---AUTO GENERATED, DO NOT MODIFY!
---@meta cc.ParticleSystem

---\class ParticleSystem
---Particle System base class.
---Attributes of a Particle System:
---- emission rate of the particles
---- Gravity Mode (Mode A):
---- gravity
---- direction
---- speed +-  variance
---- tangential acceleration +- variance
---- radial acceleration +- variance
---- Radius Mode (Mode B):
---- startRadius +- variance
---- endRadius +- variance
---- rotate +- variance
---- Properties common to all modes:
---- life +- life variance
---- start spin +- variance
---- end spin +- variance
---- start size +- variance
---- end size +- variance
---- start color +- variance
---- end color +- variance
---- life +- variance
---- blending function
---- texture
---
---Cocos2d also supports particles generated by Particle Designer (http://particledesigner.71squared.com/).
---'Radius Mode' in Particle Designer uses a fixed emit rate of 30 hz. Since that can't be guaranteed in cocos2d,
---cocos2d uses a another approach, but the results are almost identical. 
---
---Cocos2d supports all the variables used by Particle Designer plus a bit more:
---- spinning particles (supported when using ParticleSystemQuad)
---- tangential acceleration (Gravity mode)
---- radial acceleration (Gravity mode)
---- radius direction (Radius mode) (Particle Designer supports outwards to inwards direction only)
---
---It is possible to customize any of the above mentioned properties in runtime. Example:
---
---\code
---emitter.radialAccel = 15;
---emitter.startSpin = 0;
---\endcode
---@class cc.ParticleSystem : cc.Node
---@field active boolean Whether or not the particle system is active. <br><br>\return True if the particle system is active.
---@field allParticleSystems any Gets all ParticleSystem references
---@field angle number Gets the angle of each particle.  <br><br>\return The angle of each particle.
---@field angleVar number Gets the angle variance of each particle. <br><br>\return The angle variance of each particle.
---@field atlasIndex integer Gets the index of system in batch node array. <br><br>\return The index of system in batch node array.
---@field autoRemoveOnFinish boolean Whether or not the particle system removed self on finish. <br><br>\return True if the particle system removed self on finish.
---@field batchNode cc.ParticleBatchNode Gets the batch node. <br><br>\return The batch node.
---@field blendAdditive boolean Whether or not the particle system is blend additive. <br><br>\return True if the particle system is blend additive.
---@field blendFunc cc.BlendFunc \js NA \lua NA
---@field duration number Gets how many seconds the emitter will run. -1 means 'forever'. <br><br>\return The seconds that the emitter will run. -1 means 'forever'.
---@field emissionRate number Gets the emission rate of the particles. <br><br>\return The emission rate of the particles.
---@field emitterMode cc.ParticleSystem.Mode Switch between different kind of emitter modes: - kParticleModeGravity: uses gravity, speed, radial and tangential acceleration. - kParticleModeRadius: uses radius movement + rotation. <br><br>\return The mode of the emitter.
---@field endColor any Gets the end color and end color variation of each particle. <br><br>\return The end color and end color variation of each particle.
---@field endColorVar any Gets the end color variance of each particle. <br><br>\return The end color variance of each particle.
---@field endRadius number Gets the end radius. <br><br>\return The end radius.
---@field endRadiusVar number Gets the end radius variance. <br><br>\return The end radius variance.
---@field endSize number Gets the end size in pixels of each particle. <br><br>\return The end size in pixels of each particle.
---@field endSizeVar number Gets the end size variance in pixels of each particle. <br><br>\return The end size variance in pixels of each particle.
---@field endSpin number Gets the end spin of each particle. <br><br>\return The end spin of each particle.
---@field endSpinVar number Gets the end spin variance of each particle. <br><br>\return The end spin variance of each particle.
---@field full boolean Whether or not the system is full. <br><br>\return True if the system is full.
---@field gravity cc.Vec2 Gets the gravity. <br><br>\return The gravity.
---@field life number Gets the life of each particle. <br><br>\return The life of each particle.
---@field lifeVar number Gets the life variance of each particle. <br><br>\return The life variance of each particle.
---@field particleCount integer Gets the Quantity of particles that are being simulated at the moment. <br><br>\return The Quantity of particles that are being simulated at the moment.
---@field paused boolean Are the emissions paused \return True if the emissions are paused, else false
---@field posVar cc.Vec2 Gets the position variance of the emitter. <br><br>\return The position variance of the emitter.
---@field positionType cc.ParticleSystem.PositionType Gets the particles movement type: Free or Grouped. \since v0.8 <br><br>\return The particles movement type.
---@field radialAccel number Gets the radial acceleration. <br><br>\return The radial acceleration.
---@field radialAccelVar number Gets the radial acceleration variance. <br><br>\return The radial acceleration variance.
---@field resourceFile string 
---@field rotatePerSecond number Gets the number of degrees to rotate a particle around the source pos per second. <br><br>\return The number of degrees to rotate a particle around the source pos per second.
---@field rotatePerSecondVar number Gets the rotate per second variance. <br><br>\return The rotate per second variance.
---@field rotationIsDir boolean Whether or not the rotation of each particle to its direction. <br><br>\return True if the rotation is the direction.
---@field sourcePosition cc.Vec2 Gets the source position of the emitter. <br><br>\return The source position of the emitter.
---@field sourcePositionCompatible boolean 
---@field speed number Gets the speed. <br><br>\return The speed.
---@field speedVar number Gets the speed variance. <br><br>\return The speed variance.
---@field startColor any Gets the start color of each particle. <br><br>\return The start color of each particle.
---@field startColorVar any Gets the start color variance of each particle. <br><br>\return The start color variance of each particle.
---@field startRadius number Gets the start radius. <br><br>\return The start radius.
---@field startRadiusVar number Gets the start radius variance. <br><br>\return The start radius variance.
---@field startSize number Gets the start size in pixels of each particle. <br><br>\return The start size in pixels of each particle.
---@field startSizeVar number Gets the start size variance in pixels of each particle. <br><br>\return The start size variance in pixels of each particle.
---@field startSpin number Gets the start spin of each particle. <br><br>\return The start spin of each particle.
---@field startSpinVar number Gets the start spin variance of each particle. <br><br>\return The start spin variance of each particle.
---@field tangentialAccel number Gets the tangential acceleration. <br><br>\return The tangential acceleration.
---@field tangentialAccelVar number Gets the tangential acceleration variance. <br><br>\return The tangential acceleration variance.
---@field texture cc.Texture2D 
---@field totalParticles integer Gets the maximum particles of the system. <br><br>\return The maximum particles of the system.
local ParticleSystem = {}

---@param count integer
function ParticleSystem:addParticles(count) end

---@param cls string
---@return any
function ParticleSystem:as(cls) end

---Creates an initializes a ParticleSystem from a plist file.
---This plist files can be created manually or with Particle Designer:
---http://particledesigner.71squared.com/
---\since v2.0
---
---@param plistFile string # Particle plist file name.
---@return cc.ParticleSystem # An autoreleased ParticleSystem object.
function ParticleSystem.create(plistFile) end

---Create a system with a fixed number of particles.
---
---@param numberOfParticles integer # A given number of particles.
---@return cc.ParticleSystem # An autoreleased ParticleSystemQuad object.
---\js NA
function ParticleSystem.createWithTotalParticles(numberOfParticles) end

---Gets all ParticleSystem references
---@return any
function ParticleSystem.getAllParticleSystems() end

---Gets the angle of each particle. 
---
---@return number # The angle of each particle.
function ParticleSystem:getAngle() end

---Gets the angle variance of each particle.
---
---@return number # The angle variance of each particle.
function ParticleSystem:getAngleVar() end

---Gets the index of system in batch node array.
---
---@return integer # The index of system in batch node array.
function ParticleSystem:getAtlasIndex() end

---Gets the batch node.
---
---@return cc.ParticleBatchNode # The batch node.
function ParticleSystem:getBatchNode() end

---\js NA
---\lua NA
---@return cc.BlendFunc
function ParticleSystem:getBlendFunc() end

---Gets how many seconds the emitter will run. -1 means 'forever'.
---
---@return number # The seconds that the emitter will run. -1 means 'forever'.
function ParticleSystem:getDuration() end

---Gets the emission rate of the particles.
---
---@return number # The emission rate of the particles.
function ParticleSystem:getEmissionRate() end

---Switch between different kind of emitter modes:
---- kParticleModeGravity: uses gravity, speed, radial and tangential acceleration.
---- kParticleModeRadius: uses radius movement + rotation.
---
---@return cc.ParticleSystem.Mode # The mode of the emitter.
function ParticleSystem:getEmitterMode() end

---Gets the end color and end color variation of each particle.
---
---@return any # The end color and end color variation of each particle.
function ParticleSystem:getEndColor() end

---Gets the end color variance of each particle.
---
---@return any # The end color variance of each particle.
function ParticleSystem:getEndColorVar() end

---Gets the end radius.
---
---@return number # The end radius.
function ParticleSystem:getEndRadius() end

---Gets the end radius variance.
---
---@return number # The end radius variance.
function ParticleSystem:getEndRadiusVar() end

---Gets the end size in pixels of each particle.
---
---@return number # The end size in pixels of each particle.
function ParticleSystem:getEndSize() end

---Gets the end size variance in pixels of each particle.
---
---@return number # The end size variance in pixels of each particle.
function ParticleSystem:getEndSizeVar() end

---Gets the end spin of each particle.
---
---@return number # The end spin of each particle.
function ParticleSystem:getEndSpin() end

---Gets the end spin variance of each particle.
---
---@return number # The end spin variance of each particle.
function ParticleSystem:getEndSpinVar() end

---Gets the gravity.
---
---@return cc.Vec2 # The gravity.
function ParticleSystem:getGravity() end

---Gets the life of each particle.
---
---@return number # The life of each particle.
function ParticleSystem:getLife() end

---Gets the life variance of each particle.
---
---@return number # The life variance of each particle.
function ParticleSystem:getLifeVar() end

---Gets the Quantity of particles that are being simulated at the moment.
---
---@return integer # The Quantity of particles that are being simulated at the moment.
function ParticleSystem:getParticleCount() end

---Gets the position variance of the emitter.
---
---@return cc.Vec2 # The position variance of the emitter.
function ParticleSystem:getPosVar() end

---Gets the particles movement type: Free or Grouped.
---\since v0.8
---
---@return cc.ParticleSystem.PositionType # The particles movement type.
function ParticleSystem:getPositionType() end

---Gets the radial acceleration.
---
---@return number # The radial acceleration.
function ParticleSystem:getRadialAccel() end

---Gets the radial acceleration variance.
---
---@return number # The radial acceleration variance.
function ParticleSystem:getRadialAccelVar() end

---@return string
function ParticleSystem:getResourceFile() end

---Gets the number of degrees to rotate a particle around the source pos per second.
---
---@return number # The number of degrees to rotate a particle around the source pos per second.
function ParticleSystem:getRotatePerSecond() end

---Gets the rotate per second variance.
---
---@return number # The rotate per second variance.
function ParticleSystem:getRotatePerSecondVar() end

---Whether or not the rotation of each particle to its direction.
---
---@return boolean # True if the rotation is the direction.
function ParticleSystem:getRotationIsDir() end

---Gets the source position of the emitter.
---
---@return cc.Vec2 # The source position of the emitter.
function ParticleSystem:getSourcePosition() end

---Gets the speed.
---
---@return number # The speed.
function ParticleSystem:getSpeed() end

---Gets the speed variance.
---
---@return number # The speed variance.
function ParticleSystem:getSpeedVar() end

---Gets the start color of each particle.
---
---@return any # The start color of each particle.
function ParticleSystem:getStartColor() end

---Gets the start color variance of each particle.
---
---@return any # The start color variance of each particle.
function ParticleSystem:getStartColorVar() end

---Gets the start radius.
---
---@return number # The start radius.
function ParticleSystem:getStartRadius() end

---Gets the start radius variance.
---
---@return number # The start radius variance.
function ParticleSystem:getStartRadiusVar() end

---Gets the start size in pixels of each particle.
---
---@return number # The start size in pixels of each particle.
function ParticleSystem:getStartSize() end

---Gets the start size variance in pixels of each particle.
---
---@return number # The start size variance in pixels of each particle.
function ParticleSystem:getStartSizeVar() end

---Gets the start spin of each particle.
---
---@return number # The start spin of each particle.
function ParticleSystem:getStartSpin() end

---Gets the start spin variance of each particle.
---
---@return number # The start spin variance of each particle.
function ParticleSystem:getStartSpinVar() end

---Gets the tangential acceleration.
---
---@return number # The tangential acceleration.
function ParticleSystem:getTangentialAccel() end

---Gets the tangential acceleration variance.
---
---@return number # The tangential acceleration variance.
function ParticleSystem:getTangentialAccelVar() end

---@return cc.Texture2D
function ParticleSystem:getTexture() end

---Gets the maximum particles of the system.
---
---@return integer # The maximum particles of the system.
function ParticleSystem:getTotalParticles() end

---initializes a QuadParticleSystem from a Dictionary.
---\since v0.99.3
---@param dictionary cc.types.ValueMap
---@return boolean
---
---initializes a particle system from a NSDictionary and the path from where to load the png
---\since v2.1
---@overload fun(self: cc.ParticleSystem, dictionary: cc.types.ValueMap, dirname: string): boolean
function ParticleSystem:initWithDictionary(dictionary) end

---initializes a ParticleSystem from a plist file.
---This plist files can be created manually or with Particle Designer:
---http://particledesigner.71squared.com/
---\since v0.99.3
---@param plistFile string
---@return boolean
function ParticleSystem:initWithFile(plistFile) end

---! Initializes a system with a fixed number of particles
---@param numberOfParticles integer
---@return boolean
function ParticleSystem:initWithTotalParticles(numberOfParticles) end

---Whether or not the particle system is active.
---
---@return boolean # True if the particle system is active.
function ParticleSystem:isActive() end

---Whether or not the particle system removed self on finish.
---
---@return boolean # True if the particle system removed self on finish.
function ParticleSystem:isAutoRemoveOnFinish() end

---Whether or not the particle system is blend additive.
---
---@return boolean # True if the particle system is blend additive.
function ParticleSystem:isBlendAdditive() end

---Whether or not the system is full.
---
---@return boolean # True if the system is full.
function ParticleSystem:isFull() end

---Are the emissions paused
---@return boolean # True if the emissions are paused, else false
function ParticleSystem:isPaused() end

---@return boolean
function ParticleSystem:isSourcePositionCompatible() end

---\js ctor
---@return cc.ParticleSystem
function ParticleSystem.new() end

function ParticleSystem:pauseEmissions() end

---Update the VBO verts buffer which does not use batch node,
---should be overridden by subclasses.
function ParticleSystem:postStep() end

---Kill all living particles.
function ParticleSystem:resetSystem() end

function ParticleSystem:resumeEmissions() end

---Sets the angle of each particle.
---
---@param angle number # The angle of each particle.
function ParticleSystem:setAngle(angle) end

---Sets the angle variance of each particle.
---
---@param angleVar number # The angle variance of each particle.
function ParticleSystem:setAngleVar(angleVar) end

---Sets the index of system in batch node array.
---
---@param index integer # The index of system in batch node array.
function ParticleSystem:setAtlasIndex(index) end

---Set the particle system auto removed it self on finish.
---
---@param var boolean # True if the particle system removed self on finish.
function ParticleSystem:setAutoRemoveOnFinish(var) end

---Sets the batch node.
---
---@param batchNode cc.ParticleBatchNode # The batch node.
function ParticleSystem:setBatchNode(batchNode) end

---Sets the particle system blend additive.
---
---@param value boolean # True if the particle system is blend additive.
function ParticleSystem:setBlendAdditive(value) end

---\code
---When this function bound into js or lua,the parameter will be changed
---In js: var setBlendFunc(var src, var dst)
---In lua: local setBlendFunc(local src, local dst)
---\endcode
---@param blendFunc cc.BlendFunc
function ParticleSystem:setBlendFunc(blendFunc) end

---Sets how many seconds the emitter will run. -1 means 'forever'.
---
---@param duration number # The seconds that the emitter will run. -1 means 'forever'.
function ParticleSystem:setDuration(duration) end

---Sets the emission rate of the particles.
---
---@param rate number # The emission rate of the particles.
function ParticleSystem:setEmissionRate(rate) end

---Sets the mode of the emitter.
---
---@param mode cc.ParticleSystem.Mode # The mode of the emitter.
function ParticleSystem:setEmitterMode(mode) end

---Sets the end color and end color variation of each particle.
---
---@param color any # The end color and end color variation of each particle.
function ParticleSystem:setEndColor(color) end

---Sets the end color variance of each particle.
---
---@param color any # The end color variance of each particle.
function ParticleSystem:setEndColorVar(color) end

---Sets the end radius.
---
---@param endRadius number # The end radius.
function ParticleSystem:setEndRadius(endRadius) end

---Sets the end radius variance.
---
---@param endRadiusVar number # The end radius variance.
function ParticleSystem:setEndRadiusVar(endRadiusVar) end

---Sets the end size in pixels of each particle.
---
---@param endSize number # The end size in pixels of each particle.
function ParticleSystem:setEndSize(endSize) end

---Sets the end size variance in pixels of each particle.
---
---@param sizeVar number # The end size variance in pixels of each particle.
function ParticleSystem:setEndSizeVar(sizeVar) end

---Sets the end spin of each particle.
---
---@param endSpin number # The end spin of each particle.
function ParticleSystem:setEndSpin(endSpin) end

---Sets the end spin variance of each particle.
---
---@param endSpinVar number # The end spin variance of each particle.
function ParticleSystem:setEndSpinVar(endSpinVar) end

---Sets the gravity.
---
---@param g cc.Vec2 # The gravity.
function ParticleSystem:setGravity(g) end

---Sets the life of each particle.
---
---@param life number # The life of each particle.
function ParticleSystem:setLife(life) end

---Sets the life variance of each particle.
---
---@param lifeVar number # The life variance of each particle.
function ParticleSystem:setLifeVar(lifeVar) end

---Sets the position variance of the emitter.
---
---@param pos cc.Vec2 # The position variance of the emitter.
function ParticleSystem:setPosVar(pos) end

---Sets the particles movement type: Free or Grouped.
---\since v0.8
---
---@param type cc.ParticleSystem.PositionType # The particles movement type.
function ParticleSystem:setPositionType(type) end

---Sets the radial acceleration.
---
---@param t number # The radial acceleration.
function ParticleSystem:setRadialAccel(t) end

---Sets the radial acceleration variance.
---
---@param t number # The radial acceleration variance.
function ParticleSystem:setRadialAccelVar(t) end

---Sets the number of degrees to rotate a particle around the source pos per second.
---
---@param degrees number # The number of degrees to rotate a particle around the source pos per second.
function ParticleSystem:setRotatePerSecond(degrees) end

---Sets the rotate per second variance.
---
---@param degrees number # The rotate per second variance.
function ParticleSystem:setRotatePerSecondVar(degrees) end

---Sets the rotation of each particle to its direction.
---
---@param t boolean # True if the rotation is the direction.
function ParticleSystem:setRotationIsDir(t) end

---Sets the source position of the emitter.
---
---@param pos cc.Vec2 # The source position of the emitter.
function ParticleSystem:setSourcePosition(pos) end

---\} end of PlayableProtocol
---@param sourcePositionCompatible boolean
function ParticleSystem:setSourcePositionCompatible(sourcePositionCompatible) end

---Sets the speed.
---
---@param speed number # The speed.
function ParticleSystem:setSpeed(speed) end

---Sets the speed variance.
---
---@param speed number # The speed variance.
function ParticleSystem:setSpeedVar(speed) end

---Sets the start color of each particle.
---
---@param color any # The start color of each particle.
function ParticleSystem:setStartColor(color) end

---Sets the start color variance of each particle.
---
---@param color any # The start color variance of each particle.
function ParticleSystem:setStartColorVar(color) end

---Sets the start radius.
---
---@param startRadius number # The start radius.
function ParticleSystem:setStartRadius(startRadius) end

---Sets the start radius variance.
---
---@param startRadiusVar number # The start radius variance.
function ParticleSystem:setStartRadiusVar(startRadiusVar) end

---Sets the start size in pixels of each particle.
---
---@param startSize number # The start size in pixels of each particle.
function ParticleSystem:setStartSize(startSize) end

---Sets the start size variance in pixels of each particle.
---
---@param sizeVar number # The start size variance in pixels of each particle.
function ParticleSystem:setStartSizeVar(sizeVar) end

---Sets the start spin of each particle.
---
---@param spin number # The start spin of each particle.
function ParticleSystem:setStartSpin(spin) end

---Sets the start spin variance of each particle.
---
---@param pinVar number # The start spin variance of each particle.
function ParticleSystem:setStartSpinVar(pinVar) end

---Sets the tangential acceleration.
---
---@param t number # The tangential acceleration.
function ParticleSystem:setTangentialAccel(t) end

---Sets the tangential acceleration variance.
---
---@param t number # The tangential acceleration variance.
function ParticleSystem:setTangentialAccelVar(t) end

---@param texture cc.Texture2D
function ParticleSystem:setTexture(texture) end

---Sets the maximum particles of the system.
---
---@param totalParticles integer # The maximum particles of the system.
function ParticleSystem:setTotalParticles(totalParticles) end

---\{
---\name implement Playable Protocol
function ParticleSystem:start() end

function ParticleSystem:stop() end

function ParticleSystem:stopSystem() end

---Update the verts position data of particle,
---should be overridden by subclasses.
function ParticleSystem:updateParticleQuads() end

---Call the update method with no time..
function ParticleSystem:updateWithNoTime() end

return ParticleSystem