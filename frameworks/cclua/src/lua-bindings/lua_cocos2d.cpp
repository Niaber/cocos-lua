//
// AUTO GENERATED, DO NOT MODIFY!
//
#include "lua_cocos2d.h"
#include "lua-bindings/lua_cocos2d_types.h"
#include "lua-bindings/lua_conv_manual.h"
#include "audio/include/AudioEngine.h"
#include "cocos2d.h"
#include "base/TGAlib.h"
#include "ui/CocosGUI.h"
#include "navmesh/CCNavMesh.h"

static int _olua_module_cocos2d(lua_State *L);

static const std::string makeScheduleCallbackTag(const std::string &key)
{
    return "schedule." + key;
}

static int _olua_cls_cc_RenderTargetFlag(lua_State *L)
{
    oluacls_class<cocos2d::RenderTargetFlag>(L, "cc.RenderTargetFlag");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "ALL", (lua_Integer)cocos2d::RenderTargetFlag::ALL);
    oluacls_enum(L, "COLOR", (lua_Integer)cocos2d::RenderTargetFlag::COLOR);
    oluacls_enum(L, "DEPTH", (lua_Integer)cocos2d::RenderTargetFlag::DEPTH);
    oluacls_enum(L, "STENCIL", (lua_Integer)cocos2d::RenderTargetFlag::STENCIL);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_RenderTargetFlag(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.RenderTargetFlag")) {
        luaL_error(L, "class not found: cocos2d::RenderTargetFlag");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_ClearFlag(lua_State *L)
{
    oluacls_class<cocos2d::ClearFlag>(L, "cc.ClearFlag");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "ALL", (lua_Integer)cocos2d::ClearFlag::ALL);
    oluacls_enum(L, "COLOR", (lua_Integer)cocos2d::ClearFlag::COLOR);
    oluacls_enum(L, "DEPTH", (lua_Integer)cocos2d::ClearFlag::DEPTH);
    oluacls_enum(L, "NONE", (lua_Integer)cocos2d::ClearFlag::NONE);
    oluacls_enum(L, "STENCIL", (lua_Integer)cocos2d::ClearFlag::STENCIL);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ClearFlag(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ClearFlag")) {
        luaL_error(L, "class not found: cocos2d::ClearFlag");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_MATRIX_STACK_TYPE(lua_State *L)
{
    oluacls_class<cocos2d::MATRIX_STACK_TYPE>(L, "cc.MATRIX_STACK_TYPE");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "MATRIX_STACK_MODELVIEW", (lua_Integer)cocos2d::MATRIX_STACK_TYPE::MATRIX_STACK_MODELVIEW);
    oluacls_enum(L, "MATRIX_STACK_PROJECTION", (lua_Integer)cocos2d::MATRIX_STACK_TYPE::MATRIX_STACK_PROJECTION);
    oluacls_enum(L, "MATRIX_STACK_TEXTURE", (lua_Integer)cocos2d::MATRIX_STACK_TYPE::MATRIX_STACK_TEXTURE);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_MATRIX_STACK_TYPE(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.MATRIX_STACK_TYPE")) {
        luaL_error(L, "class not found: cocos2d::MATRIX_STACK_TYPE");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_Director_Projection(lua_State *L)
{
    oluacls_class<cocos2d::Director::Projection>(L, "cc.Director.Projection");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "CUSTOM", (lua_Integer)cocos2d::Director::Projection::CUSTOM);
    oluacls_enum(L, "DEFAULT", (lua_Integer)cocos2d::Director::Projection::DEFAULT);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Director_Projection(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Director.Projection")) {
        luaL_error(L, "class not found: cocos2d::Director::Projection");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_UserDefault_deleteValueForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // void deleteValueForKey(const char *key)
    self->deleteValueForKey(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_destroyInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static void destroyInstance()
    cocos2d::UserDefault::destroyInstance();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_flush(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;

    olua_to_object(L, 1, &self, "cc.UserDefault");

    // void flush()
    self->flush();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_getBoolForKey$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // bool getBoolForKey(const char *key)
    bool ret = self->getBoolForKey(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getBoolForKey$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    bool arg2 = false;       /** defaultValue */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // bool getBoolForKey(const char *key, bool defaultValue)
    bool ret = self->getBoolForKey(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getBoolForKey(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.UserDefault")) && (olua_is_string(L, 2))) {
            // bool getBoolForKey(const char *key)
            return _olua_fun_cocos2d_UserDefault_getBoolForKey$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.UserDefault")) && (olua_is_string(L, 2)) && (olua_is_bool(L, 3))) {
            // bool getBoolForKey(const char *key, bool defaultValue)
            return _olua_fun_cocos2d_UserDefault_getBoolForKey$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getBoolForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_getDataForKey$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Data getDataForKey(const char *key)
    cocos2d::Data ret = self->getDataForKey(arg1);
    int num_ret = olua_push_cocos2d_Data(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getDataForKey$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    cocos2d::Data arg2;       /** defaultValue */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_cocos2d_Data(L, 3, &arg2);

    // cocos2d::Data getDataForKey(const char *key, const cocos2d::Data &defaultValue)
    cocos2d::Data ret = self->getDataForKey(arg1, arg2);
    int num_ret = olua_push_cocos2d_Data(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getDataForKey(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.UserDefault")) && (olua_is_string(L, 2))) {
            // cocos2d::Data getDataForKey(const char *key)
            return _olua_fun_cocos2d_UserDefault_getDataForKey$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.UserDefault")) && (olua_is_string(L, 2)) && (olua_is_cocos2d_Data(L, 3))) {
            // cocos2d::Data getDataForKey(const char *key, const cocos2d::Data &defaultValue)
            return _olua_fun_cocos2d_UserDefault_getDataForKey$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getDataForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_getDoubleForKey$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // double getDoubleForKey(const char *key)
    double ret = self->getDoubleForKey(arg1);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getDoubleForKey$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    double arg2 = 0;       /** defaultValue */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // double getDoubleForKey(const char *key, double defaultValue)
    double ret = self->getDoubleForKey(arg1, arg2);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getDoubleForKey(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.UserDefault")) && (olua_is_string(L, 2))) {
            // double getDoubleForKey(const char *key)
            return _olua_fun_cocos2d_UserDefault_getDoubleForKey$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.UserDefault")) && (olua_is_string(L, 2)) && (olua_is_number(L, 3))) {
            // double getDoubleForKey(const char *key, double defaultValue)
            return _olua_fun_cocos2d_UserDefault_getDoubleForKey$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getDoubleForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_getFloatForKey$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // float getFloatForKey(const char *key)
    float ret = self->getFloatForKey(arg1);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getFloatForKey$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    float arg2 = 0;       /** defaultValue */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // float getFloatForKey(const char *key, float defaultValue)
    float ret = self->getFloatForKey(arg1, arg2);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getFloatForKey(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.UserDefault")) && (olua_is_string(L, 2))) {
            // float getFloatForKey(const char *key)
            return _olua_fun_cocos2d_UserDefault_getFloatForKey$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.UserDefault")) && (olua_is_string(L, 2)) && (olua_is_number(L, 3))) {
            // float getFloatForKey(const char *key, float defaultValue)
            return _olua_fun_cocos2d_UserDefault_getFloatForKey$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getFloatForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::UserDefault *getInstance()
    cocos2d::UserDefault *ret = cocos2d::UserDefault::getInstance();
    int num_ret = olua_push_object(L, ret, "cc.UserDefault");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getIntegerForKey$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // int getIntegerForKey(const char *key)
    int ret = self->getIntegerForKey(arg1);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getIntegerForKey$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    int arg2 = 0;       /** defaultValue */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // int getIntegerForKey(const char *key, int defaultValue)
    int ret = self->getIntegerForKey(arg1, arg2);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getIntegerForKey(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.UserDefault")) && (olua_is_string(L, 2))) {
            // int getIntegerForKey(const char *key)
            return _olua_fun_cocos2d_UserDefault_getIntegerForKey$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.UserDefault")) && (olua_is_string(L, 2)) && (olua_is_integer(L, 3))) {
            // int getIntegerForKey(const char *key, int defaultValue)
            return _olua_fun_cocos2d_UserDefault_getIntegerForKey$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getIntegerForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_getStringForKey$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);

    // std::string getStringForKey(const char *key)
    std::string ret = self->getStringForKey(arg1);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getStringForKey$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    std::string arg2;       /** defaultValue */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // std::string getStringForKey(const char *key, const std::string &defaultValue)
    std::string ret = self->getStringForKey(arg1, arg2);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_getStringForKey(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.UserDefault")) && (olua_is_string(L, 2))) {
            // std::string getStringForKey(const char *key)
            return _olua_fun_cocos2d_UserDefault_getStringForKey$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.UserDefault")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3))) {
            // std::string getStringForKey(const char *key, const std::string &defaultValue)
            return _olua_fun_cocos2d_UserDefault_getStringForKey$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::UserDefault::getStringForKey' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_getXMLFilePath(lua_State *L)
{
    olua_startinvoke(L);

    // static const std::string &getXMLFilePath()
    const std::string &ret = cocos2d::UserDefault::getXMLFilePath();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_isXMLFileExist(lua_State *L)
{
    olua_startinvoke(L);

    // static bool isXMLFileExist()
    bool ret = cocos2d::UserDefault::isXMLFileExist();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_UserDefault_setBoolForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    bool arg2 = false;       /** value */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void setBoolForKey(const char *key, bool value)
    self->setBoolForKey(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_setDataForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    cocos2d::Data arg2;       /** value */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_cocos2d_Data(L, 3, &arg2);

    // void setDataForKey(const char *key, const cocos2d::Data &value)
    self->setDataForKey(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_setDoubleForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    double arg2 = 0;       /** value */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setDoubleForKey(const char *key, double value)
    self->setDoubleForKey(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_setFloatForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    float arg2 = 0;       /** value */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setFloatForKey(const char *key, float value)
    self->setFloatForKey(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_setIntegerForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    int arg2 = 0;       /** value */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // void setIntegerForKey(const char *key, int value)
    self->setIntegerForKey(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_UserDefault_setStringForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::UserDefault *self = nullptr;
    const char *arg1 = nullptr;       /** key */
    std::string arg2;       /** value */

    olua_to_object(L, 1, &self, "cc.UserDefault");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // void setStringForKey(const char *key, const std::string &value)
    self->setStringForKey(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_UserDefault(lua_State *L)
{
    oluacls_class<cocos2d::UserDefault>(L, "cc.UserDefault");
    oluacls_func(L, "deleteValueForKey", _olua_fun_cocos2d_UserDefault_deleteValueForKey);
    oluacls_func(L, "destroyInstance", _olua_fun_cocos2d_UserDefault_destroyInstance);
    oluacls_func(L, "flush", _olua_fun_cocos2d_UserDefault_flush);
    oluacls_func(L, "getBoolForKey", _olua_fun_cocos2d_UserDefault_getBoolForKey);
    oluacls_func(L, "getDataForKey", _olua_fun_cocos2d_UserDefault_getDataForKey);
    oluacls_func(L, "getDoubleForKey", _olua_fun_cocos2d_UserDefault_getDoubleForKey);
    oluacls_func(L, "getFloatForKey", _olua_fun_cocos2d_UserDefault_getFloatForKey);
    oluacls_func(L, "getInstance", _olua_fun_cocos2d_UserDefault_getInstance);
    oluacls_func(L, "getIntegerForKey", _olua_fun_cocos2d_UserDefault_getIntegerForKey);
    oluacls_func(L, "getStringForKey", _olua_fun_cocos2d_UserDefault_getStringForKey);
    oluacls_func(L, "getXMLFilePath", _olua_fun_cocos2d_UserDefault_getXMLFilePath);
    oluacls_func(L, "isXMLFileExist", _olua_fun_cocos2d_UserDefault_isXMLFileExist);
    oluacls_func(L, "setBoolForKey", _olua_fun_cocos2d_UserDefault_setBoolForKey);
    oluacls_func(L, "setDataForKey", _olua_fun_cocos2d_UserDefault_setDataForKey);
    oluacls_func(L, "setDoubleForKey", _olua_fun_cocos2d_UserDefault_setDoubleForKey);
    oluacls_func(L, "setFloatForKey", _olua_fun_cocos2d_UserDefault_setFloatForKey);
    oluacls_func(L, "setIntegerForKey", _olua_fun_cocos2d_UserDefault_setIntegerForKey);
    oluacls_func(L, "setStringForKey", _olua_fun_cocos2d_UserDefault_setStringForKey);
    oluacls_prop(L, "instance", _olua_fun_cocos2d_UserDefault_getInstance, nullptr);
    oluacls_prop(L, "xmlFileExist", _olua_fun_cocos2d_UserDefault_isXMLFileExist, nullptr);
    oluacls_prop(L, "xmlFilePath", _olua_fun_cocos2d_UserDefault_getXMLFilePath, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_UserDefault(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.UserDefault")) {
        luaL_error(L, "class not found: cocos2d::UserDefault");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Ref___gc(lua_State *L)
{
    olua_startinvoke(L);

    olua_endinvoke(L);

    return cclua_ccobjgc(L);
}

static int _olua_fun_cocos2d_Ref_getReferenceCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Ref *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Ref");

    // unsigned int getReferenceCount()
    unsigned int ret = self->getReferenceCount();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_Ref(lua_State *L)
{
    oluacls_class<cocos2d::Ref>(L, "cc.Ref");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_Ref___gc);
    oluacls_func(L, "getReferenceCount", _olua_fun_cocos2d_Ref_getReferenceCount);
    oluacls_prop(L, "referenceCount", _olua_fun_cocos2d_Ref_getReferenceCount, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Ref(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Ref")) {
        luaL_error(L, "class not found: cocos2d::Ref");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Clonable___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Clonable *)olua_toobj(L, 1, "cc.Clonable");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Clonable_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Clonable *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Clonable");

    // cocos2d::Clonable *clone()
    cocos2d::Clonable *ret = self->clone();
    int num_ret = olua_push_object(L, ret, "cc.Clonable");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_Clonable(lua_State *L)
{
    oluacls_class<cocos2d::Clonable>(L, "cc.Clonable");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_Clonable___gc);
    oluacls_func(L, "clone", _olua_fun_cocos2d_Clonable_clone);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Clonable(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Clonable")) {
        luaL_error(L, "class not found: cocos2d::Clonable");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Console_delCommand(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Console *self = nullptr;
    std::string arg1;       /** cmdName */

    olua_to_object(L, 1, &self, "cc.Console");
    olua_check_string(L, 2, &arg1);

    // void delCommand(const std::string &cmdName)
    self->delCommand(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Console_delSubCommand(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Console *self = nullptr;
    std::string arg1;       /** cmdName */
    std::string arg2;       /** subCmdName */

    olua_to_object(L, 1, &self, "cc.Console");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // void delSubCommand(const std::string &cmdName, const std::string &subCmdName)
    self->delSubCommand(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Console_getCommandSeparator(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Console *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Console");

    // char getCommandSeparator()
    char ret = self->getCommandSeparator();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Console_isIpv6Server(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Console *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Console");

    // bool isIpv6Server()
    bool ret = self->isIpv6Server();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Console_listenOnFileDescriptor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Console *self = nullptr;
    int arg1 = 0;       /** fd */

    olua_to_object(L, 1, &self, "cc.Console");
    olua_check_integer(L, 2, &arg1);

    // bool listenOnFileDescriptor(int fd)
    bool ret = self->listenOnFileDescriptor(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Console_listenOnTCP(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Console *self = nullptr;
    int arg1 = 0;       /** port */

    olua_to_object(L, 1, &self, "cc.Console");
    olua_check_integer(L, 2, &arg1);

    // bool listenOnTCP(int port)
    bool ret = self->listenOnTCP(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Console_log(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Console *self = nullptr;
    const char *arg1 = nullptr;       /** buf */

    olua_to_object(L, 1, &self, "cc.Console");
    olua_check_string(L, 2, &arg1);

    // void log(const char *buf)
    self->log(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Console_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Console()
    cocos2d::Console *ret = new cocos2d::Console();
    int num_ret = olua_push_object(L, ret, "cc.Console");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Console_setBindAddress(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Console *self = nullptr;
    std::string arg1;       /** address */

    olua_to_object(L, 1, &self, "cc.Console");
    olua_check_string(L, 2, &arg1);

    // void setBindAddress(const std::string &address)
    self->setBindAddress(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Console_setCommandSeparator(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Console *self = nullptr;
    char arg1 = 0;       /** var */

    olua_to_object(L, 1, &self, "cc.Console");
    olua_check_integer(L, 2, &arg1);

    // void setCommandSeparator(char var)
    self->setCommandSeparator(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Console_stop(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Console *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Console");

    // void stop()
    self->stop();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Console(lua_State *L)
{
    oluacls_class<cocos2d::Console, cocos2d::Ref>(L, "cc.Console");
    oluacls_func(L, "delCommand", _olua_fun_cocos2d_Console_delCommand);
    oluacls_func(L, "delSubCommand", _olua_fun_cocos2d_Console_delSubCommand);
    oluacls_func(L, "getCommandSeparator", _olua_fun_cocos2d_Console_getCommandSeparator);
    oluacls_func(L, "isIpv6Server", _olua_fun_cocos2d_Console_isIpv6Server);
    oluacls_func(L, "listenOnFileDescriptor", _olua_fun_cocos2d_Console_listenOnFileDescriptor);
    oluacls_func(L, "listenOnTCP", _olua_fun_cocos2d_Console_listenOnTCP);
    oluacls_func(L, "log", _olua_fun_cocos2d_Console_log);
    oluacls_func(L, "new", _olua_fun_cocos2d_Console_new);
    oluacls_func(L, "setBindAddress", _olua_fun_cocos2d_Console_setBindAddress);
    oluacls_func(L, "setCommandSeparator", _olua_fun_cocos2d_Console_setCommandSeparator);
    oluacls_func(L, "stop", _olua_fun_cocos2d_Console_stop);
    oluacls_prop(L, "commandSeparator", _olua_fun_cocos2d_Console_getCommandSeparator, _olua_fun_cocos2d_Console_setCommandSeparator);
    oluacls_prop(L, "ipv6Server", _olua_fun_cocos2d_Console_isIpv6Server, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Console(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Console")) {
        luaL_error(L, "class not found: cocos2d::Console");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Acceleration_timestamp$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Acceleration");

    // double timestamp
    double ret = self->timestamp;
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Acceleration_timestamp$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;
    double arg1 = 0;       /** timestamp */

    olua_to_object(L, 1, &self, "cc.Acceleration");
    olua_check_number(L, 2, &arg1);

    // double timestamp
    self->timestamp = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Acceleration_timestamp(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // double timestamp
        return _olua_fun_cocos2d_Acceleration_timestamp$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Acceleration")) && (olua_is_number(L, 2))) {
            // double timestamp
            return _olua_fun_cocos2d_Acceleration_timestamp$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Acceleration::timestamp' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Acceleration_x$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Acceleration");

    // double x
    double ret = self->x;
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Acceleration_x$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;
    double arg1 = 0;       /** x */

    olua_to_object(L, 1, &self, "cc.Acceleration");
    olua_check_number(L, 2, &arg1);

    // double x
    self->x = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Acceleration_x(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // double x
        return _olua_fun_cocos2d_Acceleration_x$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Acceleration")) && (olua_is_number(L, 2))) {
            // double x
            return _olua_fun_cocos2d_Acceleration_x$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Acceleration::x' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Acceleration_y$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Acceleration");

    // double y
    double ret = self->y;
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Acceleration_y$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;
    double arg1 = 0;       /** y */

    olua_to_object(L, 1, &self, "cc.Acceleration");
    olua_check_number(L, 2, &arg1);

    // double y
    self->y = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Acceleration_y(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // double y
        return _olua_fun_cocos2d_Acceleration_y$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Acceleration")) && (olua_is_number(L, 2))) {
            // double y
            return _olua_fun_cocos2d_Acceleration_y$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Acceleration::y' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Acceleration_z$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Acceleration");

    // double z
    double ret = self->z;
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Acceleration_z$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *self = nullptr;
    double arg1 = 0;       /** z */

    olua_to_object(L, 1, &self, "cc.Acceleration");
    olua_check_number(L, 2, &arg1);

    // double z
    self->z = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Acceleration_z(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // double z
        return _olua_fun_cocos2d_Acceleration_z$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Acceleration")) && (olua_is_number(L, 2))) {
            // double z
            return _olua_fun_cocos2d_Acceleration_z$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Acceleration::z' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_Acceleration(lua_State *L)
{
    oluacls_class<cocos2d::Acceleration, cocos2d::Ref>(L, "cc.Acceleration");
    oluacls_prop(L, "x", _olua_fun_cocos2d_Acceleration_x, _olua_fun_cocos2d_Acceleration_x);
    oluacls_prop(L, "y", _olua_fun_cocos2d_Acceleration_y, _olua_fun_cocos2d_Acceleration_y);
    oluacls_prop(L, "z", _olua_fun_cocos2d_Acceleration_z, _olua_fun_cocos2d_Acceleration_z);
    oluacls_prop(L, "timestamp", _olua_fun_cocos2d_Acceleration_timestamp, _olua_fun_cocos2d_Acceleration_timestamp);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Acceleration(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Acceleration")) {
        luaL_error(L, "class not found: cocos2d::Acceleration");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Director_EVENT_AFTER_DRAW$1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_AFTER_DRAW
    const char *ret = cocos2d::Director::EVENT_AFTER_DRAW;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_EVENT_AFTER_DRAW$2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_AFTER_DRAW */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_AFTER_DRAW
    cocos2d::Director::EVENT_AFTER_DRAW = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_AFTER_DRAW(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static const char *EVENT_AFTER_DRAW
        return _olua_fun_cocos2d_Director_EVENT_AFTER_DRAW$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static const char *EVENT_AFTER_DRAW
            return _olua_fun_cocos2d_Director_EVENT_AFTER_DRAW$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::EVENT_AFTER_DRAW' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_AFTER_SET_NEXT_SCENE$1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_AFTER_SET_NEXT_SCENE
    const char *ret = cocos2d::Director::EVENT_AFTER_SET_NEXT_SCENE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_EVENT_AFTER_SET_NEXT_SCENE$2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_AFTER_SET_NEXT_SCENE */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_AFTER_SET_NEXT_SCENE
    cocos2d::Director::EVENT_AFTER_SET_NEXT_SCENE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_AFTER_SET_NEXT_SCENE(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static const char *EVENT_AFTER_SET_NEXT_SCENE
        return _olua_fun_cocos2d_Director_EVENT_AFTER_SET_NEXT_SCENE$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static const char *EVENT_AFTER_SET_NEXT_SCENE
            return _olua_fun_cocos2d_Director_EVENT_AFTER_SET_NEXT_SCENE$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::EVENT_AFTER_SET_NEXT_SCENE' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_AFTER_UPDATE$1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_AFTER_UPDATE
    const char *ret = cocos2d::Director::EVENT_AFTER_UPDATE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_EVENT_AFTER_UPDATE$2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_AFTER_UPDATE */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_AFTER_UPDATE
    cocos2d::Director::EVENT_AFTER_UPDATE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_AFTER_UPDATE(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static const char *EVENT_AFTER_UPDATE
        return _olua_fun_cocos2d_Director_EVENT_AFTER_UPDATE$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static const char *EVENT_AFTER_UPDATE
            return _olua_fun_cocos2d_Director_EVENT_AFTER_UPDATE$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::EVENT_AFTER_UPDATE' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_AFTER_VISIT$1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_AFTER_VISIT
    const char *ret = cocos2d::Director::EVENT_AFTER_VISIT;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_EVENT_AFTER_VISIT$2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_AFTER_VISIT */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_AFTER_VISIT
    cocos2d::Director::EVENT_AFTER_VISIT = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_AFTER_VISIT(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static const char *EVENT_AFTER_VISIT
        return _olua_fun_cocos2d_Director_EVENT_AFTER_VISIT$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static const char *EVENT_AFTER_VISIT
            return _olua_fun_cocos2d_Director_EVENT_AFTER_VISIT$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::EVENT_AFTER_VISIT' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_BEFORE_DRAW$1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_BEFORE_DRAW
    const char *ret = cocos2d::Director::EVENT_BEFORE_DRAW;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_EVENT_BEFORE_DRAW$2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_BEFORE_DRAW */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_BEFORE_DRAW
    cocos2d::Director::EVENT_BEFORE_DRAW = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_BEFORE_DRAW(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static const char *EVENT_BEFORE_DRAW
        return _olua_fun_cocos2d_Director_EVENT_BEFORE_DRAW$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static const char *EVENT_BEFORE_DRAW
            return _olua_fun_cocos2d_Director_EVENT_BEFORE_DRAW$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::EVENT_BEFORE_DRAW' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_BEFORE_SET_NEXT_SCENE$1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_BEFORE_SET_NEXT_SCENE
    const char *ret = cocos2d::Director::EVENT_BEFORE_SET_NEXT_SCENE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_EVENT_BEFORE_SET_NEXT_SCENE$2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_BEFORE_SET_NEXT_SCENE */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_BEFORE_SET_NEXT_SCENE
    cocos2d::Director::EVENT_BEFORE_SET_NEXT_SCENE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_BEFORE_SET_NEXT_SCENE(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static const char *EVENT_BEFORE_SET_NEXT_SCENE
        return _olua_fun_cocos2d_Director_EVENT_BEFORE_SET_NEXT_SCENE$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static const char *EVENT_BEFORE_SET_NEXT_SCENE
            return _olua_fun_cocos2d_Director_EVENT_BEFORE_SET_NEXT_SCENE$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::EVENT_BEFORE_SET_NEXT_SCENE' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_BEFORE_UPDATE$1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_BEFORE_UPDATE
    const char *ret = cocos2d::Director::EVENT_BEFORE_UPDATE;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_EVENT_BEFORE_UPDATE$2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_BEFORE_UPDATE */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_BEFORE_UPDATE
    cocos2d::Director::EVENT_BEFORE_UPDATE = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_BEFORE_UPDATE(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static const char *EVENT_BEFORE_UPDATE
        return _olua_fun_cocos2d_Director_EVENT_BEFORE_UPDATE$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static const char *EVENT_BEFORE_UPDATE
            return _olua_fun_cocos2d_Director_EVENT_BEFORE_UPDATE$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::EVENT_BEFORE_UPDATE' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_PROJECTION_CHANGED$1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_PROJECTION_CHANGED
    const char *ret = cocos2d::Director::EVENT_PROJECTION_CHANGED;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_EVENT_PROJECTION_CHANGED$2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_PROJECTION_CHANGED */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_PROJECTION_CHANGED
    cocos2d::Director::EVENT_PROJECTION_CHANGED = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_PROJECTION_CHANGED(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static const char *EVENT_PROJECTION_CHANGED
        return _olua_fun_cocos2d_Director_EVENT_PROJECTION_CHANGED$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static const char *EVENT_PROJECTION_CHANGED
            return _olua_fun_cocos2d_Director_EVENT_PROJECTION_CHANGED$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::EVENT_PROJECTION_CHANGED' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_RESET$1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *EVENT_RESET
    const char *ret = cocos2d::Director::EVENT_RESET;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_EVENT_RESET$2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** EVENT_RESET */

    olua_check_string(L, 1, &arg1);

    // static const char *EVENT_RESET
    cocos2d::Director::EVENT_RESET = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_EVENT_RESET(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static const char *EVENT_RESET
        return _olua_fun_cocos2d_Director_EVENT_RESET$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static const char *EVENT_RESET
            return _olua_fun_cocos2d_Director_EVENT_RESET$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::EVENT_RESET' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Director_convertToGL$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 *arg1;       /** point */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // cocos2d::Vec2 convertToGL(const cocos2d::Vec2 &point)
    cocos2d::Vec2 ret = self->convertToGL(*arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_convertToGL$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_pack_object(L, 2, &arg1);

    // @unpack cocos2d::Vec2 convertToGL(@pack const cocos2d::Vec2 &point)
    cocos2d::Vec2 ret = self->convertToGL(arg1);
    int num_ret = olua_unpack_object(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_convertToGL(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Director")) && (olua_is_object(L, 2, "cc.Vec2"))) {
            // cocos2d::Vec2 convertToGL(const cocos2d::Vec2 &point)
            return _olua_fun_cocos2d_Director_convertToGL$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Director")) && (olua_canpack_object(L, 2, (cocos2d::Vec2 *)nullptr))) {
            // @unpack cocos2d::Vec2 convertToGL(@pack const cocos2d::Vec2 &point)
            return _olua_fun_cocos2d_Director_convertToGL$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::convertToGL' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Director_convertToUI$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 *arg1;       /** point */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // cocos2d::Vec2 convertToUI(const cocos2d::Vec2 &point)
    cocos2d::Vec2 ret = self->convertToUI(*arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_convertToUI$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Vec2 arg1;       /** point */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_pack_object(L, 2, &arg1);

    // @unpack cocos2d::Vec2 convertToUI(@pack const cocos2d::Vec2 &point)
    cocos2d::Vec2 ret = self->convertToUI(arg1);
    int num_ret = olua_unpack_object(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_convertToUI(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Director")) && (olua_is_object(L, 2, "cc.Vec2"))) {
            // cocos2d::Vec2 convertToUI(const cocos2d::Vec2 &point)
            return _olua_fun_cocos2d_Director_convertToUI$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Director")) && (olua_canpack_object(L, 2, (cocos2d::Vec2 *)nullptr))) {
            // @unpack cocos2d::Vec2 convertToUI(@pack const cocos2d::Vec2 &point)
            return _olua_fun_cocos2d_Director_convertToUI$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::convertToUI' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Director_drawScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void drawScene()
    self->drawScene();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_end_(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void end()
    self->end();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_getActionManager(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // @addref(^) cocos2d::ActionManager *getActionManager()
    cocos2d::ActionManager *ret = self->getActionManager();
    int num_ret = olua_push_object(L, ret, "cc.ActionManager");

    // insert code after call
    olua_addref(L, 1, "actionmanager", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getAnimationInterval(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // float getAnimationInterval()
    float ret = self->getAnimationInterval();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getConsole(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // cocos2d::Console *getConsole()
    cocos2d::Console *ret = self->getConsole();
    int num_ret = olua_push_object(L, ret, "cc.Console");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getContentScaleFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // float getContentScaleFactor()
    float ret = self->getContentScaleFactor();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getDeltaTime(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // float getDeltaTime()
    float ret = self->getDeltaTime();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getEventDispatcher(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // @addref(^) cocos2d::EventDispatcher *getEventDispatcher()
    cocos2d::EventDispatcher *ret = self->getEventDispatcher();
    int num_ret = olua_push_object(L, ret, "cc.EventDispatcher");

    // insert code after call
    olua_addref(L, 1, "eventdispatcher", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getFrameRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // float getFrameRate()
    float ret = self->getFrameRate();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Director *getInstance()
    cocos2d::Director *ret = cocos2d::Director::getInstance();
    int num_ret = olua_push_object(L, ret, "cc.Director");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::MATRIX_STACK_TYPE arg1 = (cocos2d::MATRIX_STACK_TYPE)0;       /** type */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_enum(L, 2, &arg1);

    // const cocos2d::Mat4 &getMatrix(cocos2d::MATRIX_STACK_TYPE type)
    const cocos2d::Mat4 &ret = self->getMatrix(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Mat4");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getNotificationNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // @addref(^) cocos2d::Node *getNotificationNode()
    cocos2d::Node *ret = self->getNotificationNode();
    int num_ret = olua_push_object(L, ret, "cc.Node");

    // insert code after call
    olua_addref(L, 1, "notificationnode", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getOpenGLView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // @addref(^) cocos2d::GLView *getOpenGLView()
    cocos2d::GLView *ret = self->getOpenGLView();
    int num_ret = olua_push_object(L, ret, "cc.GLView");

    // insert code after call
    olua_addref(L, 1, "openglview", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getProjection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // cocos2d::Director::Projection getProjection()
    cocos2d::Director::Projection ret = self->getProjection();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getRenderer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // @addref(^) cocos2d::Renderer *getRenderer()
    cocos2d::Renderer *ret = self->getRenderer();
    int num_ret = olua_push_object(L, ret, "cc.Renderer");

    // insert code after call
    olua_addref(L, 1, "renderer", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getRunningScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // @addref(scenes |) cocos2d::Scene *getRunningScene()
    cocos2d::Scene *ret = self->getRunningScene();
    int num_ret = olua_push_object(L, ret, "cc.Scene");

    // insert code after call
    olua_addref(L, 1, "scenes", -1, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getSafeAreaRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // cocos2d::Rect getSafeAreaRect()
    cocos2d::Rect ret = self->getSafeAreaRect();
    int num_ret = olua_copy_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getScheduler(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // @addref(^) cocos2d::Scheduler *getScheduler()
    cocos2d::Scheduler *ret = self->getScheduler();
    int num_ret = olua_push_object(L, ret, "cc.Scheduler");

    // insert code after call
    olua_addref(L, 1, "scheduler", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getSecondsPerFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // float getSecondsPerFrame()
    float ret = self->getSecondsPerFrame();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getTextureCache(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // @addref(^) cocos2d::TextureCache *getTextureCache()
    cocos2d::TextureCache *ret = self->getTextureCache();
    int num_ret = olua_push_object(L, ret, "cc.TextureCache");

    // insert code after call
    olua_addref(L, 1, "texturecache", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getTotalFrames(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // unsigned int getTotalFrames()
    unsigned int ret = self->getTotalFrames();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getVisibleOrigin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // cocos2d::Vec2 getVisibleOrigin()
    cocos2d::Vec2 ret = self->getVisibleOrigin();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getVisibleSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // cocos2d::Size getVisibleSize()
    cocos2d::Size ret = self->getVisibleSize();
    int num_ret = olua_copy_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getWinSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // const cocos2d::Size &getWinSize()
    const cocos2d::Size &ret = self->getWinSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getWinSizeInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // cocos2d::Size getWinSizeInPixels()
    cocos2d::Size ret = self->getWinSizeInPixels();
    int num_ret = olua_copy_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_getZEye(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // float getZEye()
    float ret = self->getZEye();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // bool init()
    bool ret = self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_isDisplayStats(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // bool isDisplayStats()
    bool ret = self->isDisplayStats();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_isNextDeltaTimeZero(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // bool isNextDeltaTimeZero()
    bool ret = self->isNextDeltaTimeZero();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_isPaused(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // bool isPaused()
    bool ret = self->isPaused();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_isSendCleanupToScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // bool isSendCleanupToScene()
    bool ret = self->isSendCleanupToScene();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_isValid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // bool isValid()
    bool ret = self->isValid();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_loadIdentityMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::MATRIX_STACK_TYPE arg1 = (cocos2d::MATRIX_STACK_TYPE)0;       /** type */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_enum(L, 2, &arg1);

    // void loadIdentityMatrix(cocos2d::MATRIX_STACK_TYPE type)
    self->loadIdentityMatrix(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_loadMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::MATRIX_STACK_TYPE arg1 = (cocos2d::MATRIX_STACK_TYPE)0;       /** type */
    cocos2d::Mat4 *arg2;       /** mat */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_enum(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Mat4");

    // void loadMatrix(cocos2d::MATRIX_STACK_TYPE type, const cocos2d::Mat4 &mat)
    self->loadMatrix(arg1, *arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_mainLoop$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void mainLoop()
    self->mainLoop();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_mainLoop$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    float arg1 = 0;       /** dt */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_number(L, 2, &arg1);

    // void mainLoop(float dt)
    self->mainLoop(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_mainLoop(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // void mainLoop()
        return _olua_fun_cocos2d_Director_mainLoop$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Director")) && (olua_is_number(L, 2))) {
            // void mainLoop(float dt)
            return _olua_fun_cocos2d_Director_mainLoop$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Director::mainLoop' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Director_multiplyMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::MATRIX_STACK_TYPE arg1 = (cocos2d::MATRIX_STACK_TYPE)0;       /** type */
    cocos2d::Mat4 *arg2;       /** mat */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_enum(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Mat4");

    // void multiplyMatrix(cocos2d::MATRIX_STACK_TYPE type, const cocos2d::Mat4 &mat)
    self->multiplyMatrix(arg1, *arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Director()
    cocos2d::Director *ret = new cocos2d::Director();
    int num_ret = olua_push_object(L, ret, "cc.Director");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Director_pause(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void pause()
    self->pause();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_popMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::MATRIX_STACK_TYPE arg1 = (cocos2d::MATRIX_STACK_TYPE)0;       /** type */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_enum(L, 2, &arg1);

    // void popMatrix(cocos2d::MATRIX_STACK_TYPE type)
    self->popMatrix(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_popScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // insert code before call
    olua_startcmpref(L, 1, "scenes");

    // @delref(scenes ~) void popScene()
    self->popScene();

    // insert code after call
    olua_endcmpref(L, 1, "scenes");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_popToRootScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // insert code before call
    olua_startcmpref(L, 1, "scenes");

    // @delref(scenes ~) void popToRootScene()
    self->popToRootScene();

    // insert code after call
    olua_endcmpref(L, 1, "scenes");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_popToSceneStackLevel(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    int arg1 = 0;       /** level */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_integer(L, 2, &arg1);

    // insert code before call
    olua_startcmpref(L, 1, "scenes");

    // @delref(scenes ~) void popToSceneStackLevel(int level)
    self->popToSceneStackLevel(arg1);

    // insert code after call
    olua_endcmpref(L, 1, "scenes");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_purgeCachedData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void purgeCachedData()
    self->purgeCachedData();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_pushMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::MATRIX_STACK_TYPE arg1 = (cocos2d::MATRIX_STACK_TYPE)0;       /** type */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_enum(L, 2, &arg1);

    // void pushMatrix(cocos2d::MATRIX_STACK_TYPE type)
    self->pushMatrix(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_pushScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;       /** scene */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_object(L, 2, &arg1, "cc.Scene");

    // void pushScene(@addref(scenes |) cocos2d::Scene *scene)
    self->pushScene(arg1);

    // insert code after call
    olua_addref(L, 1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_replaceScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;       /** scene */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_object(L, 2, &arg1, "cc.Scene");

    // insert code before call
    olua_startcmpref(L, 1, "scenes");

    // @delref(scenes ~) void replaceScene(@addref(scenes |) cocos2d::Scene *scene)
    self->replaceScene(arg1);

    // insert code after call
    olua_addref(L, 1, "scenes", 2, OLUA_REF_MULTI);
    olua_endcmpref(L, 1, "scenes");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_resetMatrixStack(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void resetMatrixStack()
    self->resetMatrixStack();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_restart(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void restart()
    self->restart();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_resume(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void resume()
    self->resume();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_runWithScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;       /** scene */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_object(L, 2, &arg1, "cc.Scene");

    // void runWithScene(@addref(scenes |) cocos2d::Scene *scene)
    self->runWithScene(arg1);

    // insert code after call
    olua_addref(L, 1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setActionManager(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::ActionManager *arg1 = nullptr;       /** actionManager */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_object(L, 2, &arg1, "cc.ActionManager");

    // void setActionManager(@addref(^) cocos2d::ActionManager *actionManager)
    self->setActionManager(arg1);

    // insert code after call
    olua_addref(L, 1, "actionmanager", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setAnimationInterval(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    float arg1 = 0;       /** interval */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_number(L, 2, &arg1);

    // void setAnimationInterval(float interval)
    self->setAnimationInterval(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setClearColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Color4F arg1;       /** clearColor */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setClearColor(const cocos2d::Color4F &clearColor)
    self->setClearColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setContentScaleFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    float arg1 = 0;       /** scaleFactor */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_number(L, 2, &arg1);

    // void setContentScaleFactor(float scaleFactor)
    self->setContentScaleFactor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setDefaultValues(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void setDefaultValues()
    self->setDefaultValues();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setDisplayStats(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;       /** displayStats */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_bool(L, 2, &arg1);

    // void setDisplayStats(bool displayStats)
    self->setDisplayStats(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setEventDispatcher(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::EventDispatcher *arg1 = nullptr;       /** dispatcher */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_object(L, 2, &arg1, "cc.EventDispatcher");

    // void setEventDispatcher(@addref(^) cocos2d::EventDispatcher *dispatcher)
    self->setEventDispatcher(arg1);

    // insert code after call
    olua_addref(L, 1, "eventdispatcher", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setGLDefaultValues(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void setGLDefaultValues()
    self->setGLDefaultValues();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setNextDeltaTimeZero(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    bool arg1 = false;       /** nextDeltaTimeZero */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_bool(L, 2, &arg1);

    // void setNextDeltaTimeZero(bool nextDeltaTimeZero)
    self->setNextDeltaTimeZero(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setNotificationNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** node */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void setNotificationNode(@addref(^) cocos2d::Node *node)
    self->setNotificationNode(arg1);

    // insert code after call
    olua_addref(L, 1, "notificationnode", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setOpenGLView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::GLView *arg1 = nullptr;       /** openGLView */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_object(L, 2, &arg1, "cc.GLView");

    // void setOpenGLView(@addref(^) cocos2d::GLView *openGLView)
    self->setOpenGLView(arg1);

    // insert code after call
    olua_addref(L, 1, "openglview", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setProjection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Director::Projection arg1 = (cocos2d::Director::Projection)0;       /** projection */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_enum(L, 2, &arg1);

    // void setProjection(cocos2d::Director::Projection projection)
    self->setProjection(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setScheduler(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;
    cocos2d::Scheduler *arg1 = nullptr;       /** scheduler */

    olua_to_object(L, 1, &self, "cc.Director");
    olua_check_object(L, 2, &arg1, "cc.Scheduler");

    // void setScheduler(@addref(^) cocos2d::Scheduler *scheduler)
    self->setScheduler(arg1);

    // insert code after call
    olua_addref(L, 1, "scheduler", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_setViewport(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void setViewport()
    self->setViewport();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_startAnimation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void startAnimation()
    self->startAnimation();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Director_stopAnimation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Director *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Director");

    // void stopAnimation()
    self->stopAnimation();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Director(lua_State *L)
{
    oluacls_class<cocos2d::Director, cocos2d::Ref>(L, "cc.Director");
    oluacls_func(L, "convertToGL", _olua_fun_cocos2d_Director_convertToGL);
    oluacls_func(L, "convertToUI", _olua_fun_cocos2d_Director_convertToUI);
    oluacls_func(L, "drawScene", _olua_fun_cocos2d_Director_drawScene);
    oluacls_func(L, "end_", _olua_fun_cocos2d_Director_end_);
    oluacls_func(L, "getActionManager", _olua_fun_cocos2d_Director_getActionManager);
    oluacls_func(L, "getAnimationInterval", _olua_fun_cocos2d_Director_getAnimationInterval);
    oluacls_func(L, "getConsole", _olua_fun_cocos2d_Director_getConsole);
    oluacls_func(L, "getContentScaleFactor", _olua_fun_cocos2d_Director_getContentScaleFactor);
    oluacls_func(L, "getDeltaTime", _olua_fun_cocos2d_Director_getDeltaTime);
    oluacls_func(L, "getEventDispatcher", _olua_fun_cocos2d_Director_getEventDispatcher);
    oluacls_func(L, "getFrameRate", _olua_fun_cocos2d_Director_getFrameRate);
    oluacls_func(L, "getInstance", _olua_fun_cocos2d_Director_getInstance);
    oluacls_func(L, "getMatrix", _olua_fun_cocos2d_Director_getMatrix);
    oluacls_func(L, "getNotificationNode", _olua_fun_cocos2d_Director_getNotificationNode);
    oluacls_func(L, "getOpenGLView", _olua_fun_cocos2d_Director_getOpenGLView);
    oluacls_func(L, "getProjection", _olua_fun_cocos2d_Director_getProjection);
    oluacls_func(L, "getRenderer", _olua_fun_cocos2d_Director_getRenderer);
    oluacls_func(L, "getRunningScene", _olua_fun_cocos2d_Director_getRunningScene);
    oluacls_func(L, "getSafeAreaRect", _olua_fun_cocos2d_Director_getSafeAreaRect);
    oluacls_func(L, "getScheduler", _olua_fun_cocos2d_Director_getScheduler);
    oluacls_func(L, "getSecondsPerFrame", _olua_fun_cocos2d_Director_getSecondsPerFrame);
    oluacls_func(L, "getTextureCache", _olua_fun_cocos2d_Director_getTextureCache);
    oluacls_func(L, "getTotalFrames", _olua_fun_cocos2d_Director_getTotalFrames);
    oluacls_func(L, "getVisibleOrigin", _olua_fun_cocos2d_Director_getVisibleOrigin);
    oluacls_func(L, "getVisibleSize", _olua_fun_cocos2d_Director_getVisibleSize);
    oluacls_func(L, "getWinSize", _olua_fun_cocos2d_Director_getWinSize);
    oluacls_func(L, "getWinSizeInPixels", _olua_fun_cocos2d_Director_getWinSizeInPixels);
    oluacls_func(L, "getZEye", _olua_fun_cocos2d_Director_getZEye);
    oluacls_func(L, "init", _olua_fun_cocos2d_Director_init);
    oluacls_func(L, "isDisplayStats", _olua_fun_cocos2d_Director_isDisplayStats);
    oluacls_func(L, "isNextDeltaTimeZero", _olua_fun_cocos2d_Director_isNextDeltaTimeZero);
    oluacls_func(L, "isPaused", _olua_fun_cocos2d_Director_isPaused);
    oluacls_func(L, "isSendCleanupToScene", _olua_fun_cocos2d_Director_isSendCleanupToScene);
    oluacls_func(L, "isValid", _olua_fun_cocos2d_Director_isValid);
    oluacls_func(L, "loadIdentityMatrix", _olua_fun_cocos2d_Director_loadIdentityMatrix);
    oluacls_func(L, "loadMatrix", _olua_fun_cocos2d_Director_loadMatrix);
    oluacls_func(L, "mainLoop", _olua_fun_cocos2d_Director_mainLoop);
    oluacls_func(L, "multiplyMatrix", _olua_fun_cocos2d_Director_multiplyMatrix);
    oluacls_func(L, "new", _olua_fun_cocos2d_Director_new);
    oluacls_func(L, "pause", _olua_fun_cocos2d_Director_pause);
    oluacls_func(L, "popMatrix", _olua_fun_cocos2d_Director_popMatrix);
    oluacls_func(L, "popScene", _olua_fun_cocos2d_Director_popScene);
    oluacls_func(L, "popToRootScene", _olua_fun_cocos2d_Director_popToRootScene);
    oluacls_func(L, "popToSceneStackLevel", _olua_fun_cocos2d_Director_popToSceneStackLevel);
    oluacls_func(L, "purgeCachedData", _olua_fun_cocos2d_Director_purgeCachedData);
    oluacls_func(L, "pushMatrix", _olua_fun_cocos2d_Director_pushMatrix);
    oluacls_func(L, "pushScene", _olua_fun_cocos2d_Director_pushScene);
    oluacls_func(L, "replaceScene", _olua_fun_cocos2d_Director_replaceScene);
    oluacls_func(L, "resetMatrixStack", _olua_fun_cocos2d_Director_resetMatrixStack);
    oluacls_func(L, "restart", _olua_fun_cocos2d_Director_restart);
    oluacls_func(L, "resume", _olua_fun_cocos2d_Director_resume);
    oluacls_func(L, "runWithScene", _olua_fun_cocos2d_Director_runWithScene);
    oluacls_func(L, "setActionManager", _olua_fun_cocos2d_Director_setActionManager);
    oluacls_func(L, "setAnimationInterval", _olua_fun_cocos2d_Director_setAnimationInterval);
    oluacls_func(L, "setClearColor", _olua_fun_cocos2d_Director_setClearColor);
    oluacls_func(L, "setContentScaleFactor", _olua_fun_cocos2d_Director_setContentScaleFactor);
    oluacls_func(L, "setDefaultValues", _olua_fun_cocos2d_Director_setDefaultValues);
    oluacls_func(L, "setDisplayStats", _olua_fun_cocos2d_Director_setDisplayStats);
    oluacls_func(L, "setEventDispatcher", _olua_fun_cocos2d_Director_setEventDispatcher);
    oluacls_func(L, "setGLDefaultValues", _olua_fun_cocos2d_Director_setGLDefaultValues);
    oluacls_func(L, "setNextDeltaTimeZero", _olua_fun_cocos2d_Director_setNextDeltaTimeZero);
    oluacls_func(L, "setNotificationNode", _olua_fun_cocos2d_Director_setNotificationNode);
    oluacls_func(L, "setOpenGLView", _olua_fun_cocos2d_Director_setOpenGLView);
    oluacls_func(L, "setProjection", _olua_fun_cocos2d_Director_setProjection);
    oluacls_func(L, "setScheduler", _olua_fun_cocos2d_Director_setScheduler);
    oluacls_func(L, "setViewport", _olua_fun_cocos2d_Director_setViewport);
    oluacls_func(L, "startAnimation", _olua_fun_cocos2d_Director_startAnimation);
    oluacls_func(L, "stopAnimation", _olua_fun_cocos2d_Director_stopAnimation);
    oluacls_prop(L, "actionManager", _olua_fun_cocos2d_Director_getActionManager, _olua_fun_cocos2d_Director_setActionManager);
    oluacls_prop(L, "animationInterval", _olua_fun_cocos2d_Director_getAnimationInterval, _olua_fun_cocos2d_Director_setAnimationInterval);
    oluacls_prop(L, "console", _olua_fun_cocos2d_Director_getConsole, nullptr);
    oluacls_prop(L, "contentScaleFactor", _olua_fun_cocos2d_Director_getContentScaleFactor, _olua_fun_cocos2d_Director_setContentScaleFactor);
    oluacls_prop(L, "deltaTime", _olua_fun_cocos2d_Director_getDeltaTime, nullptr);
    oluacls_prop(L, "displayStats", _olua_fun_cocos2d_Director_isDisplayStats, _olua_fun_cocos2d_Director_setDisplayStats);
    oluacls_prop(L, "eventDispatcher", _olua_fun_cocos2d_Director_getEventDispatcher, _olua_fun_cocos2d_Director_setEventDispatcher);
    oluacls_prop(L, "frameRate", _olua_fun_cocos2d_Director_getFrameRate, nullptr);
    oluacls_prop(L, "instance", _olua_fun_cocos2d_Director_getInstance, nullptr);
    oluacls_prop(L, "nextDeltaTimeZero", _olua_fun_cocos2d_Director_isNextDeltaTimeZero, _olua_fun_cocos2d_Director_setNextDeltaTimeZero);
    oluacls_prop(L, "notificationNode", _olua_fun_cocos2d_Director_getNotificationNode, _olua_fun_cocos2d_Director_setNotificationNode);
    oluacls_prop(L, "openGLView", _olua_fun_cocos2d_Director_getOpenGLView, _olua_fun_cocos2d_Director_setOpenGLView);
    oluacls_prop(L, "paused", _olua_fun_cocos2d_Director_isPaused, nullptr);
    oluacls_prop(L, "projection", _olua_fun_cocos2d_Director_getProjection, _olua_fun_cocos2d_Director_setProjection);
    oluacls_prop(L, "renderer", _olua_fun_cocos2d_Director_getRenderer, nullptr);
    oluacls_prop(L, "runningScene", _olua_fun_cocos2d_Director_getRunningScene, nullptr);
    oluacls_prop(L, "safeAreaRect", _olua_fun_cocos2d_Director_getSafeAreaRect, nullptr);
    oluacls_prop(L, "scheduler", _olua_fun_cocos2d_Director_getScheduler, _olua_fun_cocos2d_Director_setScheduler);
    oluacls_prop(L, "secondsPerFrame", _olua_fun_cocos2d_Director_getSecondsPerFrame, nullptr);
    oluacls_prop(L, "sendCleanupToScene", _olua_fun_cocos2d_Director_isSendCleanupToScene, nullptr);
    oluacls_prop(L, "textureCache", _olua_fun_cocos2d_Director_getTextureCache, nullptr);
    oluacls_prop(L, "totalFrames", _olua_fun_cocos2d_Director_getTotalFrames, nullptr);
    oluacls_prop(L, "valid", _olua_fun_cocos2d_Director_isValid, nullptr);
    oluacls_prop(L, "visibleOrigin", _olua_fun_cocos2d_Director_getVisibleOrigin, nullptr);
    oluacls_prop(L, "visibleSize", _olua_fun_cocos2d_Director_getVisibleSize, nullptr);
    oluacls_prop(L, "winSize", _olua_fun_cocos2d_Director_getWinSize, nullptr);
    oluacls_prop(L, "winSizeInPixels", _olua_fun_cocos2d_Director_getWinSizeInPixels, nullptr);
    oluacls_prop(L, "zEye", _olua_fun_cocos2d_Director_getZEye, nullptr);
    oluacls_prop(L, "EVENT_BEFORE_SET_NEXT_SCENE", _olua_fun_cocos2d_Director_EVENT_BEFORE_SET_NEXT_SCENE, _olua_fun_cocos2d_Director_EVENT_BEFORE_SET_NEXT_SCENE);
    oluacls_prop(L, "EVENT_AFTER_SET_NEXT_SCENE", _olua_fun_cocos2d_Director_EVENT_AFTER_SET_NEXT_SCENE, _olua_fun_cocos2d_Director_EVENT_AFTER_SET_NEXT_SCENE);
    oluacls_prop(L, "EVENT_PROJECTION_CHANGED", _olua_fun_cocos2d_Director_EVENT_PROJECTION_CHANGED, _olua_fun_cocos2d_Director_EVENT_PROJECTION_CHANGED);
    oluacls_prop(L, "EVENT_BEFORE_UPDATE", _olua_fun_cocos2d_Director_EVENT_BEFORE_UPDATE, _olua_fun_cocos2d_Director_EVENT_BEFORE_UPDATE);
    oluacls_prop(L, "EVENT_AFTER_UPDATE", _olua_fun_cocos2d_Director_EVENT_AFTER_UPDATE, _olua_fun_cocos2d_Director_EVENT_AFTER_UPDATE);
    oluacls_prop(L, "EVENT_RESET", _olua_fun_cocos2d_Director_EVENT_RESET, _olua_fun_cocos2d_Director_EVENT_RESET);
    oluacls_prop(L, "EVENT_AFTER_VISIT", _olua_fun_cocos2d_Director_EVENT_AFTER_VISIT, _olua_fun_cocos2d_Director_EVENT_AFTER_VISIT);
    oluacls_prop(L, "EVENT_AFTER_DRAW", _olua_fun_cocos2d_Director_EVENT_AFTER_DRAW, _olua_fun_cocos2d_Director_EVENT_AFTER_DRAW);
    oluacls_prop(L, "EVENT_BEFORE_DRAW", _olua_fun_cocos2d_Director_EVENT_BEFORE_DRAW, _olua_fun_cocos2d_Director_EVENT_BEFORE_DRAW);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Director(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Director")) {
        luaL_error(L, "class not found: cocos2d::Director");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ccSchedulerFunc___call(lua_State *L)
{
    olua_startinvoke(L);

    luaL_checktype(L, -1, LUA_TFUNCTION);
    olua_push_callback(L, (cocos2d::ccSchedulerFunc *)nullptr, "cc.ccSchedulerFunc");

    olua_endinvoke(L);

    return 1;
}

static int _olua_cls_cc_ccSchedulerFunc(lua_State *L)
{
    oluacls_class<cocos2d::ccSchedulerFunc>(L, "cc.ccSchedulerFunc");
    oluacls_func(L, "__call", _olua_fun_cocos2d_ccSchedulerFunc___call);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ccSchedulerFunc(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ccSchedulerFunc")) {
        luaL_error(L, "class not found: cocos2d::ccSchedulerFunc");
    }
    return 1;
}
OLUA_END_DECLS

template <typename T> bool doScheduleUpdate(lua_State *L)
{
    if (olua_isa<T>(L, 2)) {
        auto self = olua_checkobj<cocos2d::Scheduler>(L, 1);
        auto target = olua_checkobj<T>(L, 2);
        lua_Integer priority = olua_checkinteger(L, 3);
        bool paused = olua_checkbool(L, 4);
        self->scheduleUpdate(target, (int)priority, paused);
        return true;
    }

    return false;
}

static int _olua_fun_cocos2d_Scheduler_getTimeScale(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Scheduler");

    // float getTimeScale()
    float ret = self->getTimeScale();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Scheduler_isScheduled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    std::string arg1;       /** key */
    void *arg2 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "void *");

    // bool isScheduled(const std::string &key, const void *target)
    bool ret = self->isScheduled(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Scheduler_isTargetPaused(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_object(L, 2, &arg1, "void *");

    // bool isTargetPaused(void *target)
    bool ret = self->isTargetPaused(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Scheduler_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Scheduler()
    cocos2d::Scheduler *ret = new cocos2d::Scheduler();
    int num_ret = olua_push_object(L, ret, "cc.Scheduler");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Scheduler_pauseAllTargets(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Scheduler");

    // std::set<void *> pauseAllTargets()
    std::set<void *> ret = self->pauseAllTargets();
    int num_ret = olua_push_array<void *>(L, ret, [L](void *arg1) {
        olua_push_object(L, arg1, "void *");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Scheduler_pauseAllTargetsWithMinPriority(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    int arg1 = 0;       /** minPriority */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_integer(L, 2, &arg1);

    // std::set<void *> pauseAllTargetsWithMinPriority(int minPriority)
    std::set<void *> ret = self->pauseAllTargetsWithMinPriority(arg1);
    int num_ret = olua_push_array<void *>(L, ret, [L](void *arg1) {
        olua_push_object(L, arg1, "void *");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Scheduler_pauseTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_object(L, 2, &arg1, "void *");

    // void pauseTarget(void *target)
    self->pauseTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_removeAllFunctionsToBePerformedInCocosThread(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Scheduler");

    // void removeAllFunctionsToBePerformedInCocosThread()
    self->removeAllFunctionsToBePerformedInCocosThread();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_resumeTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_object(L, 2, &arg1, "void *");

    // void resumeTarget(void *target)
    self->resumeTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_resumeTargets(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    std::set<void *> arg1;       /** targetsToResume */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_array<void *>(L, 2, arg1, [L](void **arg1) {
        olua_check_object(L, -1, arg1, "void *");
    });

    // void resumeTargets(const std::set<void *> &targetsToResume)
    self->resumeTargets(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_schedule$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    cocos2d::ccSchedulerFunc arg1;       /** callback */
    void *arg2 = nullptr;       /** target */
    float arg3 = 0;       /** interval */
    unsigned int arg4 = 0;       /** repeat_ */
    float arg5 = 0;       /** delay */
    bool arg6 = false;       /** paused */
    std::string arg7;       /** key */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_callback(L, 2, &arg1, "cc.ccSchedulerFunc");
    olua_check_object(L, 3, &arg2, "void *");
    olua_check_number(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);
    olua_check_bool(L, 7, &arg6);
    olua_check_string(L, 8, &arg7);

    void *cb_store = (void *)arg2;
    std::string cb_tag = makeScheduleCallbackTag(arg7);
    std::string cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg1 = [cb_store, cb_name, cb_ctx /*, ML */](float cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_number(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            lua_settop(L, top);
        }
    };

    // void schedule(const cocos2d::ccSchedulerFunc &callback, void *target, float interval, unsigned int repeat_, float delay, bool paused, const std::string &key)
    self->schedule(arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_schedule$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    cocos2d::ccSchedulerFunc arg1;       /** callback */
    void *arg2 = nullptr;       /** target */
    float arg3 = 0;       /** interval */
    bool arg4 = false;       /** paused */
    std::string arg5;       /** key */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_callback(L, 2, &arg1, "cc.ccSchedulerFunc");
    olua_check_object(L, 3, &arg2, "void *");
    olua_check_number(L, 4, &arg3);
    olua_check_bool(L, 5, &arg4);
    olua_check_string(L, 6, &arg5);

    void *cb_store = (void *)arg2;
    std::string cb_tag = makeScheduleCallbackTag(arg5);
    std::string cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg1 = [cb_store, cb_name, cb_ctx /*, ML */](float cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_number(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            lua_settop(L, top);
        }
    };

    // void schedule(const cocos2d::ccSchedulerFunc &callback, void *target, float interval, bool paused, const std::string &key)
    self->schedule(arg1, arg2, arg3, arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_schedule(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.Scheduler")) && (olua_is_callback(L, 2, "cc.ccSchedulerFunc")) && (olua_is_object(L, 3, "void *")) && (olua_is_number(L, 4)) && (olua_is_bool(L, 5)) && (olua_is_string(L, 6))) {
            // void schedule(const cocos2d::ccSchedulerFunc &callback, void *target, float interval, bool paused, const std::string &key)
            return _olua_fun_cocos2d_Scheduler_schedule$2(L);
        // }
    }

    if (num_args == 8) {
        // if ((olua_is_object(L, 1, "cc.Scheduler")) && (olua_is_callback(L, 2, "cc.ccSchedulerFunc")) && (olua_is_object(L, 3, "void *")) && (olua_is_number(L, 4)) && (olua_is_integer(L, 5)) && (olua_is_number(L, 6)) && (olua_is_bool(L, 7)) && (olua_is_string(L, 8))) {
            // void schedule(const cocos2d::ccSchedulerFunc &callback, void *target, float interval, unsigned int repeat_, float delay, bool paused, const std::string &key)
            return _olua_fun_cocos2d_Scheduler_schedule$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Scheduler::schedule' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_scheduleUpdate(lua_State *L)
{
    olua_startinvoke(L);

    if (doScheduleUpdate<cocos2d::Scheduler>(L) ||
        doScheduleUpdate<cocos2d::ActionManager>(L) ||
        doScheduleUpdate<cocos2d::Node>(L) ||
        doScheduleUpdate<cocos2d::Action>(L) ||
        doScheduleUpdate<cocos2d::Component>(L) ||
        doScheduleUpdate<cocos2d::ActionManager>(L)) {
        olua_endinvoke(L);

        return 0;
    }

    luaL_error(L, "unsupport type: %s", olua_typename(L, 2));

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_setTimeScale(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    float arg1 = 0;       /** timeScale */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_number(L, 2, &arg1);

    // void setTimeScale(float timeScale)
    self->setTimeScale(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_unschedule(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    std::string arg1;       /** key */
    void *arg2 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "void *");

    std::string cb_tag = makeScheduleCallbackTag(arg1);
    void *cb_store = (void *)arg2;
    olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // void unschedule(const std::string &key, void *target)
    self->unschedule(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_unscheduleAll(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Scheduler");

    std::string cb_tag = makeScheduleCallbackTag("");
    void *cb_store = (void *)self;
    olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_STARTWITH);

    // void unscheduleAll()
    self->unscheduleAll();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_unscheduleAllForTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_object(L, 2, &arg1, "void *");

    std::string cb_tag = makeScheduleCallbackTag("");
    void *cb_store = (void *)arg1;
    olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_STARTWITH);

    // void unscheduleAllForTarget(void *target)
    self->unscheduleAllForTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_unscheduleAllWithMinPriority(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    int arg1 = 0;       /** minPriority */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_integer(L, 2, &arg1);

    // void unscheduleAllWithMinPriority(int minPriority)
    self->unscheduleAllWithMinPriority(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_unscheduleUpdate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    void *arg1 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_object(L, 2, &arg1, "void *");

    // void unscheduleUpdate(void *target)
    self->unscheduleUpdate(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scheduler_update(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scheduler *self = nullptr;
    float arg1 = 0;       /** dt */

    olua_to_object(L, 1, &self, "cc.Scheduler");
    olua_check_number(L, 2, &arg1);

    // void update(float dt)
    self->update(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Scheduler(lua_State *L)
{
    oluacls_class<cocos2d::Scheduler, cocos2d::Ref>(L, "cc.Scheduler");
    oluacls_func(L, "getTimeScale", _olua_fun_cocos2d_Scheduler_getTimeScale);
    oluacls_func(L, "isScheduled", _olua_fun_cocos2d_Scheduler_isScheduled);
    oluacls_func(L, "isTargetPaused", _olua_fun_cocos2d_Scheduler_isTargetPaused);
    oluacls_func(L, "new", _olua_fun_cocos2d_Scheduler_new);
    oluacls_func(L, "pauseAllTargets", _olua_fun_cocos2d_Scheduler_pauseAllTargets);
    oluacls_func(L, "pauseAllTargetsWithMinPriority", _olua_fun_cocos2d_Scheduler_pauseAllTargetsWithMinPriority);
    oluacls_func(L, "pauseTarget", _olua_fun_cocos2d_Scheduler_pauseTarget);
    oluacls_func(L, "removeAllFunctionsToBePerformedInCocosThread", _olua_fun_cocos2d_Scheduler_removeAllFunctionsToBePerformedInCocosThread);
    oluacls_func(L, "resumeTarget", _olua_fun_cocos2d_Scheduler_resumeTarget);
    oluacls_func(L, "resumeTargets", _olua_fun_cocos2d_Scheduler_resumeTargets);
    oluacls_func(L, "schedule", _olua_fun_cocos2d_Scheduler_schedule);
    oluacls_func(L, "scheduleUpdate", _olua_fun_cocos2d_Scheduler_scheduleUpdate);
    oluacls_func(L, "setTimeScale", _olua_fun_cocos2d_Scheduler_setTimeScale);
    oluacls_func(L, "unschedule", _olua_fun_cocos2d_Scheduler_unschedule);
    oluacls_func(L, "unscheduleAll", _olua_fun_cocos2d_Scheduler_unscheduleAll);
    oluacls_func(L, "unscheduleAllForTarget", _olua_fun_cocos2d_Scheduler_unscheduleAllForTarget);
    oluacls_func(L, "unscheduleAllWithMinPriority", _olua_fun_cocos2d_Scheduler_unscheduleAllWithMinPriority);
    oluacls_func(L, "unscheduleUpdate", _olua_fun_cocos2d_Scheduler_unscheduleUpdate);
    oluacls_func(L, "update", _olua_fun_cocos2d_Scheduler_update);
    oluacls_prop(L, "timeScale", _olua_fun_cocos2d_Scheduler_getTimeScale, _olua_fun_cocos2d_Scheduler_setTimeScale);
    oluacls_const(L, "PRIORITY_NON_SYSTEM_MIN", cocos2d::Scheduler::PRIORITY_NON_SYSTEM_MIN);
    oluacls_const(L, "PRIORITY_SYSTEM", cocos2d::Scheduler::PRIORITY_SYSTEM);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Scheduler(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Scheduler")) {
        luaL_error(L, "class not found: cocos2d::Scheduler");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventDispatcher_addEventListenerWithFixedPriority(lua_State *L);

static void doRemoveEventListenersForTarget(lua_State *L, cocos2d::Node *target, bool recursive, const char *refname)
{
    if (olua_getrawobj(L, target)) {
        olua_delallrefs(L, -1, refname);
        lua_pop(L, 1);
    }
    if (recursive) {
        const auto &children = target->getChildren();
        for (const auto& child : children)
        {
            doRemoveEventListenersForTarget(L, child, recursive, refname);
        }
    }
}

static int _olua_fun_cocos2d_EventDispatcher_addCustomEventListener(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** eventName */
    std::function<void (cocos2d::EventCustom *)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)olua_newobjstub(L, "cc.EventListenerCustom");
    std::string cb_tag = (arg1);
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::EventCustom *cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            size_t last = olua_push_objpool(L);
            olua_enable_objpool(L);
            olua_push_object(L, cb_arg1, "cc.EventCustom");
            olua_disable_objpool(L);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            //pop stack value
            olua_pop_objpool(L, last);
            lua_settop(L, top);
        }
    };

    // @addref(listeners |) cocos2d::EventListenerCustom *addCustomEventListener(const std::string &eventName, const std::function<void (cocos2d::EventCustom *)> &callback)
    cocos2d::EventListenerCustom *ret = self->addCustomEventListener(arg1, arg2);
    if (olua_pushobjstub(L, ret, cb_store, "cc.EventListenerCustom") == OLUA_OBJ_EXIST) {
        lua_pushstring(L, cb_name.c_str());
        lua_pushvalue(L, 3);
        olua_setvariable(L, -3);
    } else {
        olua_postpush(L, ret, OLUA_OBJ_NEW);
    };

    // insert code after call
    olua_addref(L, 1, "listeners", -1, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_EventDispatcher_addEventListener(lua_State *L)
{
    olua_startinvoke(L);

    lua_settop(L, 2);
    olua_pushinteger(L, 1);

    olua_endinvoke(L);

    return _olua_fun_cocos2d_EventDispatcher_addEventListenerWithFixedPriority(L);
}

static int _olua_fun_cocos2d_EventDispatcher_addEventListenerWithFixedPriority(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;       /** listener */
    int arg2 = 0;       /** fixedPriority */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_object(L, 2, &arg1, "cc.EventListener");
    olua_check_integer(L, 3, &arg2);

    // void addEventListenerWithFixedPriority(@addref(listeners |) cocos2d::EventListener *listener, int fixedPriority)
    self->addEventListenerWithFixedPriority(arg1, arg2);

    // insert code after call
    olua_addref(L, 1, "listeners", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_addEventListenerWithSceneGraphPriority(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;       /** listener */
    cocos2d::Node *arg2 = nullptr;       /** node */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_object(L, 2, &arg1, "cc.EventListener");
    olua_check_object(L, 3, &arg2, "cc.Node");

    // void addEventListenerWithSceneGraphPriority(@addref(listeners | 3) cocos2d::EventListener *listener, cocos2d::Node *node)
    self->addEventListenerWithSceneGraphPriority(arg1, arg2);

    // insert code after call
    olua_addref(L, 3, "listeners", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_dispatchCustomEvent$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** eventName */
    void *arg2 = nullptr;       /** optionalUserData */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "void *");

    // void dispatchCustomEvent(const std::string &eventName, @optional void *optionalUserData)
    self->dispatchCustomEvent(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_dispatchCustomEvent$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** eventName */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_string(L, 2, &arg1);

    // void dispatchCustomEvent(const std::string &eventName)
    self->dispatchCustomEvent(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_dispatchCustomEvent(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventDispatcher")) && (olua_is_string(L, 2))) {
            // void dispatchCustomEvent(const std::string &eventName)
            return _olua_fun_cocos2d_EventDispatcher_dispatchCustomEvent$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.EventDispatcher")) && (olua_is_string(L, 2)) && (olua_is_object(L, 3, "void *"))) {
            // void dispatchCustomEvent(const std::string &eventName, @optional void *optionalUserData)
            return _olua_fun_cocos2d_EventDispatcher_dispatchCustomEvent$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventDispatcher::dispatchCustomEvent' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_dispatchEvent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Event *arg1 = nullptr;       /** event */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_object(L, 2, &arg1, "cc.Event");

    // void dispatchEvent(cocos2d::Event *event)
    self->dispatchEvent(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_hasEventListener(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener::ListenerID arg1;       /** listenerID */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_string(L, 2, &arg1);

    // bool hasEventListener(const cocos2d::EventListener::ListenerID &listenerID)
    bool ret = self->hasEventListener(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventDispatcher_isEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventDispatcher");

    // bool isEnabled()
    bool ret = self->isEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventDispatcher_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::EventDispatcher()
    cocos2d::EventDispatcher *ret = new cocos2d::EventDispatcher();
    int num_ret = olua_push_object(L, ret, "cc.EventDispatcher");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventDispatcher_pauseEventListenersForTarget$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */
    bool arg2 = false;       /** recursive */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_bool(L, 3, &arg2);

    // void pauseEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
    self->pauseEventListenersForTarget(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_pauseEventListenersForTarget$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void pauseEventListenersForTarget(cocos2d::Node *target)
    self->pauseEventListenersForTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_pauseEventListenersForTarget(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventDispatcher")) && (olua_is_object(L, 2, "cc.Node"))) {
            // void pauseEventListenersForTarget(cocos2d::Node *target)
            return _olua_fun_cocos2d_EventDispatcher_pauseEventListenersForTarget$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.EventDispatcher")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_bool(L, 3))) {
            // void pauseEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
            return _olua_fun_cocos2d_EventDispatcher_pauseEventListenersForTarget$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventDispatcher::pauseEventListenersForTarget' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_removeAllEventListeners(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventDispatcher");

    // insert code before call
    olua_startcmpref(L, 1, "listeners");

    // @delref(listeners ~) void removeAllEventListeners()
    self->removeAllEventListeners();

    // insert code after call
    olua_endcmpref(L, 1, "listeners");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_removeCustomEventListeners(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    std::string arg1;       /** customEventName */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_string(L, 2, &arg1);

    // insert code before call
    olua_startcmpref(L, 1, "listeners");

    // @delref(listeners ~) void removeCustomEventListeners(const std::string &customEventName)
    self->removeCustomEventListeners(arg1);

    // insert code after call
    olua_endcmpref(L, 1, "listeners");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_removeEventListener(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;       /** listener */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_object(L, 2, &arg1, "cc.EventListener");

    // insert code before call
    olua_startcmpref(L, 1, "listeners");

    // @delref(listeners ~) void removeEventListener(@delref(listeners |) cocos2d::EventListener *listener)
    self->removeEventListener(arg1);

    // insert code after call
    olua_delref(L, 1, "listeners", 2, OLUA_REF_MULTI);
    olua_endcmpref(L, 1, "listeners");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_removeEventListenersForTarget$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */
    bool arg2 = false;       /** recursive */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_bool(L, 3, &arg2);

    // insert code before call
    bool recursive = false;
    auto node = olua_checkobj<cocos2d::Node>(L, 2);
    if (lua_gettop(L) >= 3) {
        recursive = olua_tobool(L, 3);
    }
    doRemoveEventListenersForTarget(L, node, recursive, "listeners");

    // void removeEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
    self->removeEventListenersForTarget(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_removeEventListenersForTarget$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // insert code before call
    bool recursive = false;
    auto node = olua_checkobj<cocos2d::Node>(L, 2);
    if (lua_gettop(L) >= 3) {
        recursive = olua_tobool(L, 3);
    }
    doRemoveEventListenersForTarget(L, node, recursive, "listeners");

    // void removeEventListenersForTarget(cocos2d::Node *target)
    self->removeEventListenersForTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_removeEventListenersForTarget(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventDispatcher")) && (olua_is_object(L, 2, "cc.Node"))) {
            // void removeEventListenersForTarget(cocos2d::Node *target)
            return _olua_fun_cocos2d_EventDispatcher_removeEventListenersForTarget$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.EventDispatcher")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_bool(L, 3))) {
            // void removeEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
            return _olua_fun_cocos2d_EventDispatcher_removeEventListenersForTarget$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventDispatcher::removeEventListenersForTarget' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_removeEventListenersForType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener::Type arg1 = (cocos2d::EventListener::Type)0;       /** listenerType */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_enum(L, 2, &arg1);

    // insert code before call
    olua_startcmpref(L, 1, "listeners");

    // @delref(listeners ~) void removeEventListenersForType(cocos2d::EventListener::Type listenerType)
    self->removeEventListenersForType(arg1);

    // insert code after call
    olua_endcmpref(L, 1, "listeners");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_resumeEventListenersForTarget$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */
    bool arg2 = false;       /** recursive */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_bool(L, 3, &arg2);

    // void resumeEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
    self->resumeEventListenersForTarget(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_resumeEventListenersForTarget$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void resumeEventListenersForTarget(cocos2d::Node *target)
    self->resumeEventListenersForTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_resumeEventListenersForTarget(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventDispatcher")) && (olua_is_object(L, 2, "cc.Node"))) {
            // void resumeEventListenersForTarget(cocos2d::Node *target)
            return _olua_fun_cocos2d_EventDispatcher_resumeEventListenersForTarget$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.EventDispatcher")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_bool(L, 3))) {
            // void resumeEventListenersForTarget(cocos2d::Node *target, @optional bool recursive)
            return _olua_fun_cocos2d_EventDispatcher_resumeEventListenersForTarget$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventDispatcher::resumeEventListenersForTarget' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_setEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    bool arg1 = false;       /** isEnabled */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool isEnabled)
    self->setEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventDispatcher_setPriority(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventDispatcher *self = nullptr;
    cocos2d::EventListener *arg1 = nullptr;       /** listener */
    int arg2 = 0;       /** fixedPriority */

    olua_to_object(L, 1, &self, "cc.EventDispatcher");
    olua_check_object(L, 2, &arg1, "cc.EventListener");
    olua_check_integer(L, 3, &arg2);

    // void setPriority(cocos2d::EventListener *listener, int fixedPriority)
    self->setPriority(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_EventDispatcher(lua_State *L)
{
    oluacls_class<cocos2d::EventDispatcher, cocos2d::Ref>(L, "cc.EventDispatcher");
    oluacls_func(L, "addCustomEventListener", _olua_fun_cocos2d_EventDispatcher_addCustomEventListener);
    oluacls_func(L, "addEventListener", _olua_fun_cocos2d_EventDispatcher_addEventListener);
    oluacls_func(L, "addEventListenerWithFixedPriority", _olua_fun_cocos2d_EventDispatcher_addEventListenerWithFixedPriority);
    oluacls_func(L, "addEventListenerWithSceneGraphPriority", _olua_fun_cocos2d_EventDispatcher_addEventListenerWithSceneGraphPriority);
    oluacls_func(L, "dispatchCustomEvent", _olua_fun_cocos2d_EventDispatcher_dispatchCustomEvent);
    oluacls_func(L, "dispatchEvent", _olua_fun_cocos2d_EventDispatcher_dispatchEvent);
    oluacls_func(L, "hasEventListener", _olua_fun_cocos2d_EventDispatcher_hasEventListener);
    oluacls_func(L, "isEnabled", _olua_fun_cocos2d_EventDispatcher_isEnabled);
    oluacls_func(L, "new", _olua_fun_cocos2d_EventDispatcher_new);
    oluacls_func(L, "pauseEventListenersForTarget", _olua_fun_cocos2d_EventDispatcher_pauseEventListenersForTarget);
    oluacls_func(L, "removeAllEventListeners", _olua_fun_cocos2d_EventDispatcher_removeAllEventListeners);
    oluacls_func(L, "removeCustomEventListeners", _olua_fun_cocos2d_EventDispatcher_removeCustomEventListeners);
    oluacls_func(L, "removeEventListener", _olua_fun_cocos2d_EventDispatcher_removeEventListener);
    oluacls_func(L, "removeEventListenersForTarget", _olua_fun_cocos2d_EventDispatcher_removeEventListenersForTarget);
    oluacls_func(L, "removeEventListenersForType", _olua_fun_cocos2d_EventDispatcher_removeEventListenersForType);
    oluacls_func(L, "resumeEventListenersForTarget", _olua_fun_cocos2d_EventDispatcher_resumeEventListenersForTarget);
    oluacls_func(L, "setEnabled", _olua_fun_cocos2d_EventDispatcher_setEnabled);
    oluacls_func(L, "setPriority", _olua_fun_cocos2d_EventDispatcher_setPriority);
    oluacls_prop(L, "enabled", _olua_fun_cocos2d_EventDispatcher_isEnabled, _olua_fun_cocos2d_EventDispatcher_setEnabled);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventDispatcher(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventDispatcher")) {
        luaL_error(L, "class not found: cocos2d::EventDispatcher");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_EventListener_Type(lua_State *L)
{
    oluacls_class<cocos2d::EventListener::Type>(L, "cc.EventListener.Type");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "ACCELERATION", (lua_Integer)cocos2d::EventListener::Type::ACCELERATION);
    oluacls_enum(L, "CUSTOM", (lua_Integer)cocos2d::EventListener::Type::CUSTOM);
    oluacls_enum(L, "FOCUS", (lua_Integer)cocos2d::EventListener::Type::FOCUS);
    oluacls_enum(L, "GAME_CONTROLLER", (lua_Integer)cocos2d::EventListener::Type::GAME_CONTROLLER);
    oluacls_enum(L, "KEYBOARD", (lua_Integer)cocos2d::EventListener::Type::KEYBOARD);
    oluacls_enum(L, "MOUSE", (lua_Integer)cocos2d::EventListener::Type::MOUSE);
    oluacls_enum(L, "TOUCH_ALL_AT_ONCE", (lua_Integer)cocos2d::EventListener::Type::TOUCH_ALL_AT_ONCE);
    oluacls_enum(L, "TOUCH_ONE_BY_ONE", (lua_Integer)cocos2d::EventListener::Type::TOUCH_ONE_BY_ONE);
    oluacls_enum(L, "UNKNOWN", (lua_Integer)cocos2d::EventListener::Type::UNKNOWN);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListener_Type(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListener.Type")) {
        luaL_error(L, "class not found: cocos2d::EventListener::Type");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventListener_checkAvailable(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListener *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListener");

    // bool checkAvailable()
    bool ret = self->checkAvailable();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListener_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListener *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListener");

    // cocos2d::EventListener *clone()
    cocos2d::EventListener *ret = self->clone();
    int num_ret = olua_push_object(L, ret, "cc.EventListener");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListener_isEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListener *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListener");

    // bool isEnabled()
    bool ret = self->isEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListener_setEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListener *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_object(L, 1, &self, "cc.EventListener");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool enabled)
    self->setEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_EventListener(lua_State *L)
{
    oluacls_class<cocos2d::EventListener, cocos2d::Ref>(L, "cc.EventListener");
    oluacls_func(L, "checkAvailable", _olua_fun_cocos2d_EventListener_checkAvailable);
    oluacls_func(L, "clone", _olua_fun_cocos2d_EventListener_clone);
    oluacls_func(L, "isEnabled", _olua_fun_cocos2d_EventListener_isEnabled);
    oluacls_func(L, "setEnabled", _olua_fun_cocos2d_EventListener_setEnabled);
    oluacls_prop(L, "available", _olua_fun_cocos2d_EventListener_checkAvailable, nullptr);
    oluacls_prop(L, "enabled", _olua_fun_cocos2d_EventListener_isEnabled, _olua_fun_cocos2d_EventListener_setEnabled);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListener(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListener")) {
        luaL_error(L, "class not found: cocos2d::EventListener");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_ccTouchBeganCallback___call(lua_State *L)
{
    olua_startinvoke(L);

    luaL_checktype(L, -1, LUA_TFUNCTION);
    olua_push_callback(L, (cocos2d::EventListenerTouchOneByOne::ccTouchBeganCallback *)nullptr, "cc.EventListenerTouchOneByOne.ccTouchBeganCallback");

    olua_endinvoke(L);

    return 1;
}

static int _olua_cls_cc_EventListenerTouchOneByOne_ccTouchBeganCallback(lua_State *L)
{
    oluacls_class<cocos2d::EventListenerTouchOneByOne::ccTouchBeganCallback>(L, "cc.EventListenerTouchOneByOne.ccTouchBeganCallback");
    oluacls_func(L, "__call", _olua_fun_cocos2d_EventListenerTouchOneByOne_ccTouchBeganCallback___call);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListenerTouchOneByOne_ccTouchBeganCallback(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListenerTouchOneByOne.ccTouchBeganCallback")) {
        luaL_error(L, "class not found: cocos2d::EventListenerTouchOneByOne::ccTouchBeganCallback");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_ccTouchCallback___call(lua_State *L)
{
    olua_startinvoke(L);

    luaL_checktype(L, -1, LUA_TFUNCTION);
    olua_push_callback(L, (cocos2d::EventListenerTouchOneByOne::ccTouchCallback *)nullptr, "cc.EventListenerTouchOneByOne.ccTouchCallback");

    olua_endinvoke(L);

    return 1;
}

static int _olua_cls_cc_EventListenerTouchOneByOne_ccTouchCallback(lua_State *L)
{
    oluacls_class<cocos2d::EventListenerTouchOneByOne::ccTouchCallback>(L, "cc.EventListenerTouchOneByOne.ccTouchCallback");
    oluacls_func(L, "__call", _olua_fun_cocos2d_EventListenerTouchOneByOne_ccTouchCallback___call);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListenerTouchOneByOne_ccTouchCallback(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListenerTouchOneByOne.ccTouchCallback")) {
        luaL_error(L, "class not found: cocos2d::EventListenerTouchOneByOne::ccTouchCallback");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::EventListenerTouchOneByOne *create()
    cocos2d::EventListenerTouchOneByOne *ret = cocos2d::EventListenerTouchOneByOne::create();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerTouchOneByOne");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_isSwallowTouches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerTouchOneByOne");

    // bool isSwallowTouches()
    bool ret = self->isSwallowTouches();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::EventListenerTouchOneByOne()
    cocos2d::EventListenerTouchOneByOne *ret = new cocos2d::EventListenerTouchOneByOne();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerTouchOneByOne");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchBegan$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerTouchOneByOne");

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchBegan";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // cocos2d::EventListenerTouchOneByOne::ccTouchBeganCallback onTouchBegan
    cocos2d::EventListenerTouchOneByOne::ccTouchBeganCallback ret = self->onTouchBegan;
    int num_ret = olua_push_callback(L, &ret, "cc.EventListenerTouchOneByOne.ccTouchBeganCallback");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchBegan$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    cocos2d::EventListenerTouchOneByOne::ccTouchBeganCallback arg1;       /** onTouchBegan */

    olua_to_object(L, 1, &self, "cc.EventListenerTouchOneByOne");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "cc.EventListenerTouchOneByOne.ccTouchBeganCallback");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchBegan";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Touch *cb_arg1, cocos2d::Event *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();
            bool ret = false;       /** ret */
            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.Touch");
                olua_push_object(L, cb_arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                if (olua_is_bool(L, -1)) {
                    olua_check_bool(L, -1, &ret);
                }

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
            return ret;
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // cocos2d::EventListenerTouchOneByOne::ccTouchBeganCallback onTouchBegan
    self->onTouchBegan = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchBegan(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // cocos2d::EventListenerTouchOneByOne::ccTouchBeganCallback onTouchBegan
        return _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchBegan$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerTouchOneByOne")) && (olua_is_callback(L, 2, "cc.EventListenerTouchOneByOne.ccTouchBeganCallback") || olua_isnil(L, 2))) {
            // cocos2d::EventListenerTouchOneByOne::ccTouchBeganCallback onTouchBegan
            return _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchBegan$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerTouchOneByOne::onTouchBegan' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchCancelled$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerTouchOneByOne");

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchCancelled";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // cocos2d::EventListenerTouchOneByOne::ccTouchCallback onTouchCancelled
    cocos2d::EventListenerTouchOneByOne::ccTouchCallback ret = self->onTouchCancelled;
    int num_ret = olua_push_callback(L, &ret, "cc.EventListenerTouchOneByOne.ccTouchCallback");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchCancelled$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    cocos2d::EventListenerTouchOneByOne::ccTouchCallback arg1;       /** onTouchCancelled */

    olua_to_object(L, 1, &self, "cc.EventListenerTouchOneByOne");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "cc.EventListenerTouchOneByOne.ccTouchCallback");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchCancelled";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Touch *cb_arg1, cocos2d::Event *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.Touch");
                olua_push_object(L, cb_arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // cocos2d::EventListenerTouchOneByOne::ccTouchCallback onTouchCancelled
    self->onTouchCancelled = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchCancelled(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // cocos2d::EventListenerTouchOneByOne::ccTouchCallback onTouchCancelled
        return _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchCancelled$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerTouchOneByOne")) && (olua_is_callback(L, 2, "cc.EventListenerTouchOneByOne.ccTouchCallback") || olua_isnil(L, 2))) {
            // cocos2d::EventListenerTouchOneByOne::ccTouchCallback onTouchCancelled
            return _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchCancelled$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerTouchOneByOne::onTouchCancelled' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchEnded$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerTouchOneByOne");

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchEnded";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // cocos2d::EventListenerTouchOneByOne::ccTouchCallback onTouchEnded
    cocos2d::EventListenerTouchOneByOne::ccTouchCallback ret = self->onTouchEnded;
    int num_ret = olua_push_callback(L, &ret, "cc.EventListenerTouchOneByOne.ccTouchCallback");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchEnded$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    cocos2d::EventListenerTouchOneByOne::ccTouchCallback arg1;       /** onTouchEnded */

    olua_to_object(L, 1, &self, "cc.EventListenerTouchOneByOne");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "cc.EventListenerTouchOneByOne.ccTouchCallback");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchEnded";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Touch *cb_arg1, cocos2d::Event *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.Touch");
                olua_push_object(L, cb_arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // cocos2d::EventListenerTouchOneByOne::ccTouchCallback onTouchEnded
    self->onTouchEnded = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchEnded(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // cocos2d::EventListenerTouchOneByOne::ccTouchCallback onTouchEnded
        return _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchEnded$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerTouchOneByOne")) && (olua_is_callback(L, 2, "cc.EventListenerTouchOneByOne.ccTouchCallback") || olua_isnil(L, 2))) {
            // cocos2d::EventListenerTouchOneByOne::ccTouchCallback onTouchEnded
            return _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchEnded$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerTouchOneByOne::onTouchEnded' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchMoved$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerTouchOneByOne");

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchMoved";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // cocos2d::EventListenerTouchOneByOne::ccTouchCallback onTouchMoved
    cocos2d::EventListenerTouchOneByOne::ccTouchCallback ret = self->onTouchMoved;
    int num_ret = olua_push_callback(L, &ret, "cc.EventListenerTouchOneByOne.ccTouchCallback");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchMoved$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    cocos2d::EventListenerTouchOneByOne::ccTouchCallback arg1;       /** onTouchMoved */

    olua_to_object(L, 1, &self, "cc.EventListenerTouchOneByOne");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "cc.EventListenerTouchOneByOne.ccTouchCallback");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchMoved";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Touch *cb_arg1, cocos2d::Event *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.Touch");
                olua_push_object(L, cb_arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // cocos2d::EventListenerTouchOneByOne::ccTouchCallback onTouchMoved
    self->onTouchMoved = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchMoved(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // cocos2d::EventListenerTouchOneByOne::ccTouchCallback onTouchMoved
        return _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchMoved$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerTouchOneByOne")) && (olua_is_callback(L, 2, "cc.EventListenerTouchOneByOne.ccTouchCallback") || olua_isnil(L, 2))) {
            // cocos2d::EventListenerTouchOneByOne::ccTouchCallback onTouchMoved
            return _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchMoved$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerTouchOneByOne::onTouchMoved' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchOneByOne_setSwallowTouches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchOneByOne *self = nullptr;
    bool arg1 = false;       /** needSwallow */

    olua_to_object(L, 1, &self, "cc.EventListenerTouchOneByOne");
    olua_check_bool(L, 2, &arg1);

    // void setSwallowTouches(bool needSwallow)
    self->setSwallowTouches(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_EventListenerTouchOneByOne(lua_State *L)
{
    oluacls_class<cocos2d::EventListenerTouchOneByOne, cocos2d::EventListener>(L, "cc.EventListenerTouchOneByOne");
    oluacls_func(L, "create", _olua_fun_cocos2d_EventListenerTouchOneByOne_create);
    oluacls_func(L, "isSwallowTouches", _olua_fun_cocos2d_EventListenerTouchOneByOne_isSwallowTouches);
    oluacls_func(L, "new", _olua_fun_cocos2d_EventListenerTouchOneByOne_new);
    oluacls_func(L, "setSwallowTouches", _olua_fun_cocos2d_EventListenerTouchOneByOne_setSwallowTouches);
    oluacls_prop(L, "swallowTouches", _olua_fun_cocos2d_EventListenerTouchOneByOne_isSwallowTouches, _olua_fun_cocos2d_EventListenerTouchOneByOne_setSwallowTouches);
    oluacls_prop(L, "onTouchBegan", _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchBegan, _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchBegan);
    oluacls_prop(L, "onTouchMoved", _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchMoved, _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchMoved);
    oluacls_prop(L, "onTouchEnded", _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchEnded, _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchEnded);
    oluacls_prop(L, "onTouchCancelled", _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchCancelled, _olua_fun_cocos2d_EventListenerTouchOneByOne_onTouchCancelled);
    oluacls_const(L, "LISTENER_ID", cocos2d::EventListenerTouchOneByOne::LISTENER_ID);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListenerTouchOneByOne(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListenerTouchOneByOne")) {
        luaL_error(L, "class not found: cocos2d::EventListenerTouchOneByOne");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_ccTouchesCallback___call(lua_State *L)
{
    olua_startinvoke(L);

    luaL_checktype(L, -1, LUA_TFUNCTION);
    olua_push_callback(L, (cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback *)nullptr, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback");

    olua_endinvoke(L);

    return 1;
}

static int _olua_cls_cc_EventListenerTouchAllAtOnce_ccTouchesCallback(lua_State *L)
{
    oluacls_class<cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback>(L, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback");
    oluacls_func(L, "__call", _olua_fun_cocos2d_EventListenerTouchAllAtOnce_ccTouchesCallback___call);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListenerTouchAllAtOnce_ccTouchesCallback(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback")) {
        luaL_error(L, "class not found: cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::EventListenerTouchAllAtOnce *create()
    cocos2d::EventListenerTouchAllAtOnce *ret = cocos2d::EventListenerTouchAllAtOnce::create();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerTouchAllAtOnce");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::EventListenerTouchAllAtOnce()
    cocos2d::EventListenerTouchAllAtOnce *ret = new cocos2d::EventListenerTouchAllAtOnce();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerTouchAllAtOnce");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesBegan$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerTouchAllAtOnce");

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchesBegan";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesBegan
    cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback ret = self->onTouchesBegan;
    int num_ret = olua_push_callback(L, &ret, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesBegan$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback arg1;       /** onTouchesBegan */

    olua_to_object(L, 1, &self, "cc.EventListenerTouchAllAtOnce");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchesBegan";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](const std::vector<cocos2d::Touch *> &cb_arg1, cocos2d::Event *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_array<cocos2d::Touch *>(L, cb_arg1, [L](cocos2d::Touch *arg1) {
                    olua_push_object(L, arg1, "cc.Touch");
                });
                olua_push_object(L, cb_arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesBegan
    self->onTouchesBegan = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesBegan(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesBegan
        return _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesBegan$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerTouchAllAtOnce")) && (olua_is_callback(L, 2, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback") || olua_isnil(L, 2))) {
            // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesBegan
            return _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesBegan$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerTouchAllAtOnce::onTouchesBegan' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesCancelled$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerTouchAllAtOnce");

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchesCancelled";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesCancelled
    cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback ret = self->onTouchesCancelled;
    int num_ret = olua_push_callback(L, &ret, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesCancelled$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback arg1;       /** onTouchesCancelled */

    olua_to_object(L, 1, &self, "cc.EventListenerTouchAllAtOnce");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchesCancelled";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](const std::vector<cocos2d::Touch *> &cb_arg1, cocos2d::Event *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_array<cocos2d::Touch *>(L, cb_arg1, [L](cocos2d::Touch *arg1) {
                    olua_push_object(L, arg1, "cc.Touch");
                });
                olua_push_object(L, cb_arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesCancelled
    self->onTouchesCancelled = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesCancelled(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesCancelled
        return _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesCancelled$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerTouchAllAtOnce")) && (olua_is_callback(L, 2, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback") || olua_isnil(L, 2))) {
            // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesCancelled
            return _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesCancelled$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerTouchAllAtOnce::onTouchesCancelled' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesEnded$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerTouchAllAtOnce");

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchesEnded";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesEnded
    cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback ret = self->onTouchesEnded;
    int num_ret = olua_push_callback(L, &ret, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesEnded$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback arg1;       /** onTouchesEnded */

    olua_to_object(L, 1, &self, "cc.EventListenerTouchAllAtOnce");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchesEnded";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](const std::vector<cocos2d::Touch *> &cb_arg1, cocos2d::Event *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_array<cocos2d::Touch *>(L, cb_arg1, [L](cocos2d::Touch *arg1) {
                    olua_push_object(L, arg1, "cc.Touch");
                });
                olua_push_object(L, cb_arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesEnded
    self->onTouchesEnded = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesEnded(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesEnded
        return _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesEnded$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerTouchAllAtOnce")) && (olua_is_callback(L, 2, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback") || olua_isnil(L, 2))) {
            // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesEnded
            return _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesEnded$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerTouchAllAtOnce::onTouchesEnded' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesMoved$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerTouchAllAtOnce");

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchesMoved";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesMoved
    cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback ret = self->onTouchesMoved;
    int num_ret = olua_push_callback(L, &ret, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesMoved$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerTouchAllAtOnce *self = nullptr;
    cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback arg1;       /** onTouchesMoved */

    olua_to_object(L, 1, &self, "cc.EventListenerTouchAllAtOnce");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onTouchesMoved";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](const std::vector<cocos2d::Touch *> &cb_arg1, cocos2d::Event *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_array<cocos2d::Touch *>(L, cb_arg1, [L](cocos2d::Touch *arg1) {
                    olua_push_object(L, arg1, "cc.Touch");
                });
                olua_push_object(L, cb_arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesMoved
    self->onTouchesMoved = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesMoved(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesMoved
        return _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesMoved$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerTouchAllAtOnce")) && (olua_is_callback(L, 2, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback") || olua_isnil(L, 2))) {
            // cocos2d::EventListenerTouchAllAtOnce::ccTouchesCallback onTouchesMoved
            return _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesMoved$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerTouchAllAtOnce::onTouchesMoved' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_EventListenerTouchAllAtOnce(lua_State *L)
{
    oluacls_class<cocos2d::EventListenerTouchAllAtOnce, cocos2d::EventListener>(L, "cc.EventListenerTouchAllAtOnce");
    oluacls_func(L, "create", _olua_fun_cocos2d_EventListenerTouchAllAtOnce_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_EventListenerTouchAllAtOnce_new);
    oluacls_prop(L, "onTouchesBegan", _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesBegan, _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesBegan);
    oluacls_prop(L, "onTouchesMoved", _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesMoved, _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesMoved);
    oluacls_prop(L, "onTouchesEnded", _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesEnded, _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesEnded);
    oluacls_prop(L, "onTouchesCancelled", _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesCancelled, _olua_fun_cocos2d_EventListenerTouchAllAtOnce_onTouchesCancelled);
    oluacls_const(L, "LISTENER_ID", cocos2d::EventListenerTouchAllAtOnce::LISTENER_ID);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListenerTouchAllAtOnce(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListenerTouchAllAtOnce")) {
        luaL_error(L, "class not found: cocos2d::EventListenerTouchAllAtOnce");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventListenerCustom_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** eventName */
    std::function<void (cocos2d::EventCustom *)> arg2;       /** callback */

    olua_check_string(L, 1, &arg1);
    olua_check_callback(L, 2, &arg2, "std.function");

    void *cb_store = (void *)olua_newobjstub(L, "cc.EventListenerCustom");
    std::string cb_tag = "listener";
    std::string cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::EventCustom *cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            size_t last = olua_push_objpool(L);
            olua_enable_objpool(L);
            olua_push_object(L, cb_arg1, "cc.EventCustom");
            olua_disable_objpool(L);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            //pop stack value
            olua_pop_objpool(L, last);
            lua_settop(L, top);
        }
    };

    // static cocos2d::EventListenerCustom *create(const std::string &eventName, const std::function<void (cocos2d::EventCustom *)> &callback)
    cocos2d::EventListenerCustom *ret = cocos2d::EventListenerCustom::create(arg1, arg2);
    if (olua_pushobjstub(L, ret, cb_store, "cc.EventListenerCustom") == OLUA_OBJ_EXIST) {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        lua_pushstring(L, cb_name.c_str());
        lua_pushvalue(L, 2);
        olua_setvariable(L, -3);
    } else {
        olua_postpush(L, ret, OLUA_OBJ_NEW);
    };

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_EventListenerCustom_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::EventListenerCustom()
    cocos2d::EventListenerCustom *ret = new cocos2d::EventListenerCustom();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerCustom");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_EventListenerCustom(lua_State *L)
{
    oluacls_class<cocos2d::EventListenerCustom, cocos2d::EventListener>(L, "cc.EventListenerCustom");
    oluacls_func(L, "create", _olua_fun_cocos2d_EventListenerCustom_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_EventListenerCustom_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListenerCustom(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListenerCustom")) {
        luaL_error(L, "class not found: cocos2d::EventListenerCustom");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventListenerKeyboard_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::EventListenerKeyboard *create()
    cocos2d::EventListenerKeyboard *ret = cocos2d::EventListenerKeyboard::create();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerKeyboard");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerKeyboard_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::EventListenerKeyboard()
    cocos2d::EventListenerKeyboard *ret = new cocos2d::EventListenerKeyboard();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerKeyboard");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerKeyboard_onKeyPressed$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerKeyboard *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerKeyboard");

    void *cb_store = (void *)self;
    std::string cb_tag = "onKeyPressed";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> onKeyPressed
    std::function<void (cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> ret = self->onKeyPressed;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerKeyboard_onKeyPressed$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerKeyboard *self = nullptr;
    std::function<void (cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> arg1;       /** onKeyPressed */

    olua_to_object(L, 1, &self, "cc.EventListenerKeyboard");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onKeyPressed";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::EventKeyboard::KeyCode cb_arg1, cocos2d::Event *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_enum(L, cb_arg1);
                olua_push_object(L, cb_arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> onKeyPressed
    self->onKeyPressed = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerKeyboard_onKeyPressed(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> onKeyPressed
        return _olua_fun_cocos2d_EventListenerKeyboard_onKeyPressed$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerKeyboard")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> onKeyPressed
            return _olua_fun_cocos2d_EventListenerKeyboard_onKeyPressed$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerKeyboard::onKeyPressed' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerKeyboard_onKeyReleased$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerKeyboard *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerKeyboard");

    void *cb_store = (void *)self;
    std::string cb_tag = "onKeyReleased";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> onKeyReleased
    std::function<void (cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> ret = self->onKeyReleased;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerKeyboard_onKeyReleased$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerKeyboard *self = nullptr;
    std::function<void (cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> arg1;       /** onKeyReleased */

    olua_to_object(L, 1, &self, "cc.EventListenerKeyboard");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onKeyReleased";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::EventKeyboard::KeyCode cb_arg1, cocos2d::Event *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_enum(L, cb_arg1);
                olua_push_object(L, cb_arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> onKeyReleased
    self->onKeyReleased = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerKeyboard_onKeyReleased(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> onKeyReleased
        return _olua_fun_cocos2d_EventListenerKeyboard_onKeyReleased$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerKeyboard")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::EventKeyboard::KeyCode, cocos2d::Event *)> onKeyReleased
            return _olua_fun_cocos2d_EventListenerKeyboard_onKeyReleased$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerKeyboard::onKeyReleased' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_EventListenerKeyboard(lua_State *L)
{
    oluacls_class<cocos2d::EventListenerKeyboard, cocos2d::EventListener>(L, "cc.EventListenerKeyboard");
    oluacls_func(L, "create", _olua_fun_cocos2d_EventListenerKeyboard_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_EventListenerKeyboard_new);
    oluacls_prop(L, "onKeyPressed", _olua_fun_cocos2d_EventListenerKeyboard_onKeyPressed, _olua_fun_cocos2d_EventListenerKeyboard_onKeyPressed);
    oluacls_prop(L, "onKeyReleased", _olua_fun_cocos2d_EventListenerKeyboard_onKeyReleased, _olua_fun_cocos2d_EventListenerKeyboard_onKeyReleased);
    oluacls_const(L, "LISTENER_ID", cocos2d::EventListenerKeyboard::LISTENER_ID);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListenerKeyboard(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListenerKeyboard")) {
        luaL_error(L, "class not found: cocos2d::EventListenerKeyboard");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventListenerAcceleration_create(lua_State *L)
{
    olua_startinvoke(L);

    std::function<void (cocos2d::Acceleration *, cocos2d::Event *)> arg1;       /** callback */

    olua_check_callback(L, 1, &arg1, "std.function");

    void *cb_store = (void *)olua_newobjstub(L, "cc.EventListenerAcceleration");
    std::string cb_tag = "listener";
    std::string cb_name = olua_setcallback(L, cb_store, 1, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Acceleration *cb_arg1, cocos2d::Event *cb_arg2) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            size_t last = olua_push_objpool(L);
            olua_enable_objpool(L);
            olua_push_object(L, cb_arg1, "cc.Acceleration");
            olua_push_object(L, cb_arg2, "cc.Event");
            olua_disable_objpool(L);

            olua_callback(L, cb_store, cb_name.c_str(), 2);

            //pop stack value
            olua_pop_objpool(L, last);
            lua_settop(L, top);
        }
    };

    // static cocos2d::EventListenerAcceleration *create(const std::function<void (cocos2d::Acceleration *, cocos2d::Event *)> &callback)
    cocos2d::EventListenerAcceleration *ret = cocos2d::EventListenerAcceleration::create(arg1);
    if (olua_pushobjstub(L, ret, cb_store, "cc.EventListenerAcceleration") == OLUA_OBJ_EXIST) {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        lua_pushstring(L, cb_name.c_str());
        lua_pushvalue(L, 1);
        olua_setvariable(L, -3);
    } else {
        olua_postpush(L, ret, OLUA_OBJ_NEW);
    };

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_EventListenerAcceleration_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::EventListenerAcceleration()
    cocos2d::EventListenerAcceleration *ret = new cocos2d::EventListenerAcceleration();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerAcceleration");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_EventListenerAcceleration(lua_State *L)
{
    oluacls_class<cocos2d::EventListenerAcceleration, cocos2d::EventListener>(L, "cc.EventListenerAcceleration");
    oluacls_func(L, "create", _olua_fun_cocos2d_EventListenerAcceleration_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_EventListenerAcceleration_new);
    oluacls_const(L, "LISTENER_ID", cocos2d::EventListenerAcceleration::LISTENER_ID);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListenerAcceleration(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListenerAcceleration")) {
        luaL_error(L, "class not found: cocos2d::EventListenerAcceleration");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventListenerFocus_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::EventListenerFocus *create()
    cocos2d::EventListenerFocus *ret = cocos2d::EventListenerFocus::create();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerFocus");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerFocus_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::EventListenerFocus()
    cocos2d::EventListenerFocus *ret = new cocos2d::EventListenerFocus();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerFocus");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerFocus_onFocusChanged$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerFocus *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerFocus");

    void *cb_store = (void *)self;
    std::string cb_tag = "onFocusChanged";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::ui::Widget *, cocos2d::ui::Widget *)> onFocusChanged
    std::function<void (cocos2d::ui::Widget *, cocos2d::ui::Widget *)> ret = self->onFocusChanged;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerFocus_onFocusChanged$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerFocus *self = nullptr;
    std::function<void (cocos2d::ui::Widget *, cocos2d::ui::Widget *)> arg1;       /** onFocusChanged */

    olua_to_object(L, 1, &self, "cc.EventListenerFocus");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onFocusChanged";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::ui::Widget *cb_arg1, cocos2d::ui::Widget *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "ccui.Widget");
                olua_push_object(L, cb_arg2, "ccui.Widget");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::ui::Widget *, cocos2d::ui::Widget *)> onFocusChanged
    self->onFocusChanged = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerFocus_onFocusChanged(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::ui::Widget *, cocos2d::ui::Widget *)> onFocusChanged
        return _olua_fun_cocos2d_EventListenerFocus_onFocusChanged$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerFocus")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::ui::Widget *, cocos2d::ui::Widget *)> onFocusChanged
            return _olua_fun_cocos2d_EventListenerFocus_onFocusChanged$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerFocus::onFocusChanged' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_EventListenerFocus(lua_State *L)
{
    oluacls_class<cocos2d::EventListenerFocus, cocos2d::EventListener>(L, "cc.EventListenerFocus");
    oluacls_func(L, "create", _olua_fun_cocos2d_EventListenerFocus_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_EventListenerFocus_new);
    oluacls_prop(L, "onFocusChanged", _olua_fun_cocos2d_EventListenerFocus_onFocusChanged, _olua_fun_cocos2d_EventListenerFocus_onFocusChanged);
    oluacls_const(L, "LISTENER_ID", cocos2d::EventListenerFocus::LISTENER_ID);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListenerFocus(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListenerFocus")) {
        luaL_error(L, "class not found: cocos2d::EventListenerFocus");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventListenerMouse_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::EventListenerMouse *create()
    cocos2d::EventListenerMouse *ret = cocos2d::EventListenerMouse::create();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerMouse");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerMouse_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::EventListenerMouse()
    cocos2d::EventListenerMouse *ret = new cocos2d::EventListenerMouse();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerMouse");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerMouse_onMouseDown$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerMouse");

    void *cb_store = (void *)self;
    std::string cb_tag = "onMouseDown";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::EventMouse *)> onMouseDown
    std::function<void (cocos2d::EventMouse *)> ret = self->onMouseDown;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerMouse_onMouseDown$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;
    std::function<void (cocos2d::EventMouse *)> arg1;       /** onMouseDown */

    olua_to_object(L, 1, &self, "cc.EventListenerMouse");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onMouseDown";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::EventMouse *cb_arg1) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.EventMouse");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 1);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::EventMouse *)> onMouseDown
    self->onMouseDown = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerMouse_onMouseDown(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::EventMouse *)> onMouseDown
        return _olua_fun_cocos2d_EventListenerMouse_onMouseDown$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerMouse")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::EventMouse *)> onMouseDown
            return _olua_fun_cocos2d_EventListenerMouse_onMouseDown$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerMouse::onMouseDown' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerMouse_onMouseMove$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerMouse");

    void *cb_store = (void *)self;
    std::string cb_tag = "onMouseMove";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::EventMouse *)> onMouseMove
    std::function<void (cocos2d::EventMouse *)> ret = self->onMouseMove;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerMouse_onMouseMove$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;
    std::function<void (cocos2d::EventMouse *)> arg1;       /** onMouseMove */

    olua_to_object(L, 1, &self, "cc.EventListenerMouse");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onMouseMove";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::EventMouse *cb_arg1) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.EventMouse");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 1);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::EventMouse *)> onMouseMove
    self->onMouseMove = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerMouse_onMouseMove(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::EventMouse *)> onMouseMove
        return _olua_fun_cocos2d_EventListenerMouse_onMouseMove$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerMouse")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::EventMouse *)> onMouseMove
            return _olua_fun_cocos2d_EventListenerMouse_onMouseMove$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerMouse::onMouseMove' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerMouse_onMouseScroll$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerMouse");

    void *cb_store = (void *)self;
    std::string cb_tag = "onMouseScroll";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::EventMouse *)> onMouseScroll
    std::function<void (cocos2d::EventMouse *)> ret = self->onMouseScroll;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerMouse_onMouseScroll$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;
    std::function<void (cocos2d::EventMouse *)> arg1;       /** onMouseScroll */

    olua_to_object(L, 1, &self, "cc.EventListenerMouse");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onMouseScroll";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::EventMouse *cb_arg1) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.EventMouse");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 1);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::EventMouse *)> onMouseScroll
    self->onMouseScroll = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerMouse_onMouseScroll(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::EventMouse *)> onMouseScroll
        return _olua_fun_cocos2d_EventListenerMouse_onMouseScroll$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerMouse")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::EventMouse *)> onMouseScroll
            return _olua_fun_cocos2d_EventListenerMouse_onMouseScroll$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerMouse::onMouseScroll' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerMouse_onMouseUp$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerMouse");

    void *cb_store = (void *)self;
    std::string cb_tag = "onMouseUp";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::EventMouse *)> onMouseUp
    std::function<void (cocos2d::EventMouse *)> ret = self->onMouseUp;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerMouse_onMouseUp$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerMouse *self = nullptr;
    std::function<void (cocos2d::EventMouse *)> arg1;       /** onMouseUp */

    olua_to_object(L, 1, &self, "cc.EventListenerMouse");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onMouseUp";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::EventMouse *cb_arg1) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.EventMouse");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 1);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::EventMouse *)> onMouseUp
    self->onMouseUp = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerMouse_onMouseUp(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::EventMouse *)> onMouseUp
        return _olua_fun_cocos2d_EventListenerMouse_onMouseUp$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerMouse")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::EventMouse *)> onMouseUp
            return _olua_fun_cocos2d_EventListenerMouse_onMouseUp$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerMouse::onMouseUp' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_EventListenerMouse(lua_State *L)
{
    oluacls_class<cocos2d::EventListenerMouse, cocos2d::EventListener>(L, "cc.EventListenerMouse");
    oluacls_func(L, "create", _olua_fun_cocos2d_EventListenerMouse_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_EventListenerMouse_new);
    oluacls_prop(L, "onMouseDown", _olua_fun_cocos2d_EventListenerMouse_onMouseDown, _olua_fun_cocos2d_EventListenerMouse_onMouseDown);
    oluacls_prop(L, "onMouseUp", _olua_fun_cocos2d_EventListenerMouse_onMouseUp, _olua_fun_cocos2d_EventListenerMouse_onMouseUp);
    oluacls_prop(L, "onMouseMove", _olua_fun_cocos2d_EventListenerMouse_onMouseMove, _olua_fun_cocos2d_EventListenerMouse_onMouseMove);
    oluacls_prop(L, "onMouseScroll", _olua_fun_cocos2d_EventListenerMouse_onMouseScroll, _olua_fun_cocos2d_EventListenerMouse_onMouseScroll);
    oluacls_const(L, "LISTENER_ID", cocos2d::EventListenerMouse::LISTENER_ID);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListenerMouse(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListenerMouse")) {
        luaL_error(L, "class not found: cocos2d::EventListenerMouse");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_Event_Type(lua_State *L)
{
    oluacls_class<cocos2d::Event::Type>(L, "cc.Event.Type");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "ACCELERATION", (lua_Integer)cocos2d::Event::Type::ACCELERATION);
    oluacls_enum(L, "CUSTOM", (lua_Integer)cocos2d::Event::Type::CUSTOM);
    oluacls_enum(L, "FOCUS", (lua_Integer)cocos2d::Event::Type::FOCUS);
    oluacls_enum(L, "GAME_CONTROLLER", (lua_Integer)cocos2d::Event::Type::GAME_CONTROLLER);
    oluacls_enum(L, "KEYBOARD", (lua_Integer)cocos2d::Event::Type::KEYBOARD);
    oluacls_enum(L, "MOUSE", (lua_Integer)cocos2d::Event::Type::MOUSE);
    oluacls_enum(L, "TOUCH", (lua_Integer)cocos2d::Event::Type::TOUCH);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Event_Type(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Event.Type")) {
        luaL_error(L, "class not found: cocos2d::Event::Type");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Event_getCurrentTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Event *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Event");

    // cocos2d::Node *getCurrentTarget()
    cocos2d::Node *ret = self->getCurrentTarget();
    int num_ret = olua_push_object(L, ret, "cc.Node");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Event_getType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Event *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Event");

    // cocos2d::Event::Type getType()
    cocos2d::Event::Type ret = self->getType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Event_isStopped(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Event *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Event");

    // bool isStopped()
    bool ret = self->isStopped();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Event_new(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Event::Type arg1 = (cocos2d::Event::Type)0;       /** type */

    olua_check_enum(L, 1, &arg1);

    // cocos2d::Event(cocos2d::Event::Type type)
    cocos2d::Event *ret = new cocos2d::Event(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Event");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Event_stopPropagation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Event *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Event");

    // void stopPropagation()
    self->stopPropagation();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Event(lua_State *L)
{
    oluacls_class<cocos2d::Event, cocos2d::Ref>(L, "cc.Event");
    oluacls_func(L, "getCurrentTarget", _olua_fun_cocos2d_Event_getCurrentTarget);
    oluacls_func(L, "getType", _olua_fun_cocos2d_Event_getType);
    oluacls_func(L, "isStopped", _olua_fun_cocos2d_Event_isStopped);
    oluacls_func(L, "new", _olua_fun_cocos2d_Event_new);
    oluacls_func(L, "stopPropagation", _olua_fun_cocos2d_Event_stopPropagation);
    oluacls_prop(L, "currentTarget", _olua_fun_cocos2d_Event_getCurrentTarget, nullptr);
    oluacls_prop(L, "stopped", _olua_fun_cocos2d_Event_isStopped, nullptr);
    oluacls_prop(L, "type", _olua_fun_cocos2d_Event_getType, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Event(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Event")) {
        luaL_error(L, "class not found: cocos2d::Event");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventCustom_getEventName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventCustom *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventCustom");

    // const std::string &getEventName()
    const std::string &ret = self->getEventName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventCustom_getUserData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventCustom *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventCustom");

    // void *getUserData()
    void *ret = self->getUserData();
    int num_ret = olua_push_object(L, ret, "void *");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventCustom_new(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** eventName */

    olua_check_string(L, 1, &arg1);

    // cocos2d::EventCustom(const std::string &eventName)
    cocos2d::EventCustom *ret = new cocos2d::EventCustom(arg1);
    int num_ret = olua_push_object(L, ret, "cc.EventCustom");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventCustom_setUserData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventCustom *self = nullptr;
    void *arg1 = nullptr;       /** data */

    olua_to_object(L, 1, &self, "cc.EventCustom");
    olua_check_object(L, 2, &arg1, "void *");

    // void setUserData(void *data)
    self->setUserData(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_EventCustom(lua_State *L)
{
    oluacls_class<cocos2d::EventCustom, cocos2d::Event>(L, "cc.EventCustom");
    oluacls_func(L, "getEventName", _olua_fun_cocos2d_EventCustom_getEventName);
    oluacls_func(L, "getUserData", _olua_fun_cocos2d_EventCustom_getUserData);
    oluacls_func(L, "new", _olua_fun_cocos2d_EventCustom_new);
    oluacls_func(L, "setUserData", _olua_fun_cocos2d_EventCustom_setUserData);
    oluacls_prop(L, "eventName", _olua_fun_cocos2d_EventCustom_getEventName, nullptr);
    oluacls_prop(L, "userData", _olua_fun_cocos2d_EventCustom_getUserData, _olua_fun_cocos2d_EventCustom_setUserData);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventCustom(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventCustom")) {
        luaL_error(L, "class not found: cocos2d::EventCustom");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventListenerController_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::EventListenerController *create()
    cocos2d::EventListenerController *ret = cocos2d::EventListenerController::create();
    int num_ret = olua_push_object(L, ret, "cc.EventListenerController");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerController_onAxisEvent$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerController");

    void *cb_store = (void *)self;
    std::string cb_tag = "onAxisEvent";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onAxisEvent
    std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> ret = self->onAxisEvent;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerController_onAxisEvent$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;
    std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> arg1;       /** onAxisEvent */

    olua_to_object(L, 1, &self, "cc.EventListenerController");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onAxisEvent";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Controller *cb_arg1, int cb_arg2, cocos2d::Event *cb_arg3) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.Controller");
                olua_push_integer(L, cb_arg2);
                olua_push_object(L, cb_arg3, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 3);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onAxisEvent
    self->onAxisEvent = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerController_onAxisEvent(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onAxisEvent
        return _olua_fun_cocos2d_EventListenerController_onAxisEvent$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerController")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onAxisEvent
            return _olua_fun_cocos2d_EventListenerController_onAxisEvent$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerController::onAxisEvent' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerController_onConnected$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerController");

    void *cb_store = (void *)self;
    std::string cb_tag = "onConnected";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::Controller *, cocos2d::Event *)> onConnected
    std::function<void (cocos2d::Controller *, cocos2d::Event *)> ret = self->onConnected;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerController_onConnected$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;
    std::function<void (cocos2d::Controller *, cocos2d::Event *)> arg1;       /** onConnected */

    olua_to_object(L, 1, &self, "cc.EventListenerController");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onConnected";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Controller *cb_arg1, cocos2d::Event *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.Controller");
                olua_push_object(L, cb_arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::Controller *, cocos2d::Event *)> onConnected
    self->onConnected = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerController_onConnected(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::Controller *, cocos2d::Event *)> onConnected
        return _olua_fun_cocos2d_EventListenerController_onConnected$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerController")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::Controller *, cocos2d::Event *)> onConnected
            return _olua_fun_cocos2d_EventListenerController_onConnected$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerController::onConnected' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerController_onDisconnected$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerController");

    void *cb_store = (void *)self;
    std::string cb_tag = "onDisconnected";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::Controller *, cocos2d::Event *)> onDisconnected
    std::function<void (cocos2d::Controller *, cocos2d::Event *)> ret = self->onDisconnected;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerController_onDisconnected$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;
    std::function<void (cocos2d::Controller *, cocos2d::Event *)> arg1;       /** onDisconnected */

    olua_to_object(L, 1, &self, "cc.EventListenerController");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onDisconnected";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Controller *cb_arg1, cocos2d::Event *cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.Controller");
                olua_push_object(L, cb_arg2, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::Controller *, cocos2d::Event *)> onDisconnected
    self->onDisconnected = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerController_onDisconnected(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::Controller *, cocos2d::Event *)> onDisconnected
        return _olua_fun_cocos2d_EventListenerController_onDisconnected$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerController")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::Controller *, cocos2d::Event *)> onDisconnected
            return _olua_fun_cocos2d_EventListenerController_onDisconnected$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerController::onDisconnected' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerController_onKeyDown$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerController");

    void *cb_store = (void *)self;
    std::string cb_tag = "onKeyDown";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onKeyDown
    std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> ret = self->onKeyDown;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerController_onKeyDown$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;
    std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> arg1;       /** onKeyDown */

    olua_to_object(L, 1, &self, "cc.EventListenerController");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onKeyDown";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Controller *cb_arg1, int cb_arg2, cocos2d::Event *cb_arg3) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.Controller");
                olua_push_integer(L, cb_arg2);
                olua_push_object(L, cb_arg3, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 3);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onKeyDown
    self->onKeyDown = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerController_onKeyDown(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onKeyDown
        return _olua_fun_cocos2d_EventListenerController_onKeyDown$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerController")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onKeyDown
            return _olua_fun_cocos2d_EventListenerController_onKeyDown$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerController::onKeyDown' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerController_onKeyRepeat$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerController");

    void *cb_store = (void *)self;
    std::string cb_tag = "onKeyRepeat";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onKeyRepeat
    std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> ret = self->onKeyRepeat;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerController_onKeyRepeat$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;
    std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> arg1;       /** onKeyRepeat */

    olua_to_object(L, 1, &self, "cc.EventListenerController");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onKeyRepeat";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Controller *cb_arg1, int cb_arg2, cocos2d::Event *cb_arg3) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.Controller");
                olua_push_integer(L, cb_arg2);
                olua_push_object(L, cb_arg3, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 3);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onKeyRepeat
    self->onKeyRepeat = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerController_onKeyRepeat(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onKeyRepeat
        return _olua_fun_cocos2d_EventListenerController_onKeyRepeat$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerController")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onKeyRepeat
            return _olua_fun_cocos2d_EventListenerController_onKeyRepeat$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerController::onKeyRepeat' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerController_onKeyUp$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventListenerController");

    void *cb_store = (void *)self;
    std::string cb_tag = "onKeyUp";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onKeyUp
    std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> ret = self->onKeyUp;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventListenerController_onKeyUp$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventListenerController *self = nullptr;
    std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> arg1;       /** onKeyUp */

    olua_to_object(L, 1, &self, "cc.EventListenerController");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onKeyUp";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Controller *cb_arg1, int cb_arg2, cocos2d::Event *cb_arg3) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.Controller");
                olua_push_integer(L, cb_arg2);
                olua_push_object(L, cb_arg3, "cc.Event");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 3);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onKeyUp
    self->onKeyUp = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventListenerController_onKeyUp(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onKeyUp
        return _olua_fun_cocos2d_EventListenerController_onKeyUp$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.EventListenerController")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::Controller *, int, cocos2d::Event *)> onKeyUp
            return _olua_fun_cocos2d_EventListenerController_onKeyUp$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventListenerController::onKeyUp' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_EventListenerController(lua_State *L)
{
    oluacls_class<cocos2d::EventListenerController, cocos2d::EventListener>(L, "cc.EventListenerController");
    oluacls_func(L, "create", _olua_fun_cocos2d_EventListenerController_create);
    oluacls_prop(L, "onConnected", _olua_fun_cocos2d_EventListenerController_onConnected, _olua_fun_cocos2d_EventListenerController_onConnected);
    oluacls_prop(L, "onDisconnected", _olua_fun_cocos2d_EventListenerController_onDisconnected, _olua_fun_cocos2d_EventListenerController_onDisconnected);
    oluacls_prop(L, "onKeyDown", _olua_fun_cocos2d_EventListenerController_onKeyDown, _olua_fun_cocos2d_EventListenerController_onKeyDown);
    oluacls_prop(L, "onKeyUp", _olua_fun_cocos2d_EventListenerController_onKeyUp, _olua_fun_cocos2d_EventListenerController_onKeyUp);
    oluacls_prop(L, "onKeyRepeat", _olua_fun_cocos2d_EventListenerController_onKeyRepeat, _olua_fun_cocos2d_EventListenerController_onKeyRepeat);
    oluacls_prop(L, "onAxisEvent", _olua_fun_cocos2d_EventListenerController_onAxisEvent, _olua_fun_cocos2d_EventListenerController_onAxisEvent);
    oluacls_const(L, "LISTENER_ID", cocos2d::EventListenerController::LISTENER_ID);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventListenerController(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventListenerController")) {
        luaL_error(L, "class not found: cocos2d::EventListenerController");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_EventTouch_EventCode(lua_State *L)
{
    oluacls_class<cocos2d::EventTouch::EventCode>(L, "cc.EventTouch.EventCode");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "BEGAN", (lua_Integer)cocos2d::EventTouch::EventCode::BEGAN);
    oluacls_enum(L, "CANCELLED", (lua_Integer)cocos2d::EventTouch::EventCode::CANCELLED);
    oluacls_enum(L, "ENDED", (lua_Integer)cocos2d::EventTouch::EventCode::ENDED);
    oluacls_enum(L, "MOVED", (lua_Integer)cocos2d::EventTouch::EventCode::MOVED);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventTouch_EventCode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventTouch.EventCode")) {
        luaL_error(L, "class not found: cocos2d::EventTouch::EventCode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventTouch_getEventCode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventTouch *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventTouch");

    // cocos2d::EventTouch::EventCode getEventCode()
    cocos2d::EventTouch::EventCode ret = self->getEventCode();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventTouch_getTouches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventTouch *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventTouch");

    // const std::vector<cocos2d::Touch *> &getTouches()
    const std::vector<cocos2d::Touch *> &ret = self->getTouches();
    int num_ret = olua_push_array<cocos2d::Touch *>(L, ret, [L](cocos2d::Touch *arg1) {
        olua_push_object(L, arg1, "cc.Touch");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventTouch_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::EventTouch()
    cocos2d::EventTouch *ret = new cocos2d::EventTouch();
    int num_ret = olua_push_object(L, ret, "cc.EventTouch");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventTouch_setEventCode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventTouch *self = nullptr;
    cocos2d::EventTouch::EventCode arg1 = (cocos2d::EventTouch::EventCode)0;       /** eventCode */

    olua_to_object(L, 1, &self, "cc.EventTouch");
    olua_check_enum(L, 2, &arg1);

    // void setEventCode(cocos2d::EventTouch::EventCode eventCode)
    self->setEventCode(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventTouch_setTouches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventTouch *self = nullptr;
    std::vector<cocos2d::Touch *> arg1;       /** touches */

    olua_to_object(L, 1, &self, "cc.EventTouch");
    olua_check_array<cocos2d::Touch *>(L, 2, arg1, [L](cocos2d::Touch **arg1) {
        olua_check_object(L, -1, arg1, "cc.Touch");
    });

    // void setTouches(const std::vector<cocos2d::Touch *> &touches)
    self->setTouches(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_EventTouch(lua_State *L)
{
    oluacls_class<cocos2d::EventTouch, cocos2d::Event>(L, "cc.EventTouch");
    oluacls_func(L, "getEventCode", _olua_fun_cocos2d_EventTouch_getEventCode);
    oluacls_func(L, "getTouches", _olua_fun_cocos2d_EventTouch_getTouches);
    oluacls_func(L, "new", _olua_fun_cocos2d_EventTouch_new);
    oluacls_func(L, "setEventCode", _olua_fun_cocos2d_EventTouch_setEventCode);
    oluacls_func(L, "setTouches", _olua_fun_cocos2d_EventTouch_setTouches);
    oluacls_prop(L, "eventCode", _olua_fun_cocos2d_EventTouch_getEventCode, _olua_fun_cocos2d_EventTouch_setEventCode);
    oluacls_prop(L, "touches", _olua_fun_cocos2d_EventTouch_getTouches, _olua_fun_cocos2d_EventTouch_setTouches);
    oluacls_const(L, "MAX_TOUCHES", cocos2d::EventTouch::MAX_TOUCHES);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventTouch(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventTouch")) {
        luaL_error(L, "class not found: cocos2d::EventTouch");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventKeyboard_new(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventKeyboard::KeyCode arg1 = (cocos2d::EventKeyboard::KeyCode)0;       /** keyCode */
    bool arg2 = false;       /** isPressed */

    olua_check_enum(L, 1, &arg1);
    olua_check_bool(L, 2, &arg2);

    // cocos2d::EventKeyboard(cocos2d::EventKeyboard::KeyCode keyCode, bool isPressed)
    cocos2d::EventKeyboard *ret = new cocos2d::EventKeyboard(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.EventKeyboard");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_EventKeyboard(lua_State *L)
{
    oluacls_class<cocos2d::EventKeyboard, cocos2d::Event>(L, "cc.EventKeyboard");
    oluacls_func(L, "new", _olua_fun_cocos2d_EventKeyboard_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventKeyboard(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventKeyboard")) {
        luaL_error(L, "class not found: cocos2d::EventKeyboard");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventAcceleration_new(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Acceleration *arg1;       /** acc */

    olua_check_object(L, 1, &arg1, "cc.Acceleration");

    // cocos2d::EventAcceleration(const cocos2d::Acceleration &acc)
    cocos2d::EventAcceleration *ret = new cocos2d::EventAcceleration(*arg1);
    int num_ret = olua_push_object(L, ret, "cc.EventAcceleration");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_EventAcceleration(lua_State *L)
{
    oluacls_class<cocos2d::EventAcceleration, cocos2d::Event>(L, "cc.EventAcceleration");
    oluacls_func(L, "new", _olua_fun_cocos2d_EventAcceleration_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventAcceleration(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventAcceleration")) {
        luaL_error(L, "class not found: cocos2d::EventAcceleration");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventFocus_new(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ui::Widget *arg1 = nullptr;       /** widgetLoseFocus */
    cocos2d::ui::Widget *arg2 = nullptr;       /** widgetGetFocus */

    olua_check_object(L, 1, &arg1, "ccui.Widget");
    olua_check_object(L, 2, &arg2, "ccui.Widget");

    // cocos2d::EventFocus(cocos2d::ui::Widget *widgetLoseFocus, cocos2d::ui::Widget *widgetGetFocus)
    cocos2d::EventFocus *ret = new cocos2d::EventFocus(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.EventFocus");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_EventFocus(lua_State *L)
{
    oluacls_class<cocos2d::EventFocus, cocos2d::Event>(L, "cc.EventFocus");
    oluacls_func(L, "new", _olua_fun_cocos2d_EventFocus_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventFocus(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventFocus")) {
        luaL_error(L, "class not found: cocos2d::EventFocus");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_EventMouse_MouseEventType(lua_State *L)
{
    oluacls_class<cocos2d::EventMouse::MouseEventType>(L, "cc.EventMouse.MouseEventType");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "MOUSE_DOWN", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_DOWN);
    oluacls_enum(L, "MOUSE_MOVE", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_MOVE);
    oluacls_enum(L, "MOUSE_NONE", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_NONE);
    oluacls_enum(L, "MOUSE_SCROLL", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_SCROLL);
    oluacls_enum(L, "MOUSE_UP", (lua_Integer)cocos2d::EventMouse::MouseEventType::MOUSE_UP);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventMouse_MouseEventType(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventMouse.MouseEventType")) {
        luaL_error(L, "class not found: cocos2d::EventMouse::MouseEventType");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_EventMouse_MouseButton(lua_State *L)
{
    oluacls_class<cocos2d::EventMouse::MouseButton>(L, "cc.EventMouse.MouseButton");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "BUTTON_4", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_4);
    oluacls_enum(L, "BUTTON_5", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_5);
    oluacls_enum(L, "BUTTON_6", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_6);
    oluacls_enum(L, "BUTTON_7", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_7);
    oluacls_enum(L, "BUTTON_8", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_8);
    oluacls_enum(L, "BUTTON_LEFT", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_LEFT);
    oluacls_enum(L, "BUTTON_MIDDLE", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_MIDDLE);
    oluacls_enum(L, "BUTTON_RIGHT", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_RIGHT);
    oluacls_enum(L, "BUTTON_UNSET", (lua_Integer)cocos2d::EventMouse::MouseButton::BUTTON_UNSET);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventMouse_MouseButton(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventMouse.MouseButton")) {
        luaL_error(L, "class not found: cocos2d::EventMouse::MouseButton");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventMouse_getCursorX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventMouse");

    // float getCursorX()
    float ret = self->getCursorX();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_getCursorY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventMouse");

    // float getCursorY()
    float ret = self->getCursorY();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_getDelta(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventMouse");

    // cocos2d::Vec2 getDelta()
    cocos2d::Vec2 ret = self->getDelta();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_getLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventMouse");

    // cocos2d::Vec2 getLocation()
    cocos2d::Vec2 ret = self->getLocation();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_getLocationInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventMouse");

    // cocos2d::Vec2 getLocationInView()
    cocos2d::Vec2 ret = self->getLocationInView();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_getMouseButton(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventMouse");

    // cocos2d::EventMouse::MouseButton getMouseButton()
    cocos2d::EventMouse::MouseButton ret = self->getMouseButton();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_getPreviousLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventMouse");

    // cocos2d::Vec2 getPreviousLocation()
    cocos2d::Vec2 ret = self->getPreviousLocation();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_getPreviousLocationInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventMouse");

    // cocos2d::Vec2 getPreviousLocationInView()
    cocos2d::Vec2 ret = self->getPreviousLocationInView();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_getScrollX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventMouse");

    // float getScrollX()
    float ret = self->getScrollX();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_getScrollY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventMouse");

    // float getScrollY()
    float ret = self->getScrollY();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_getStartLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventMouse");

    // cocos2d::Vec2 getStartLocation()
    cocos2d::Vec2 ret = self->getStartLocation();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_getStartLocationInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventMouse");

    // cocos2d::Vec2 getStartLocationInView()
    cocos2d::Vec2 ret = self->getStartLocationInView();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_new(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse::MouseEventType arg1 = (cocos2d::EventMouse::MouseEventType)0;       /** mouseEventCode */

    olua_check_enum(L, 1, &arg1);

    // cocos2d::EventMouse(cocos2d::EventMouse::MouseEventType mouseEventCode)
    cocos2d::EventMouse *ret = new cocos2d::EventMouse(arg1);
    int num_ret = olua_push_object(L, ret, "cc.EventMouse");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventMouse_setCursorPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;
    float arg1 = 0;       /** x */
    float arg2 = 0;       /** y */

    olua_to_object(L, 1, &self, "cc.EventMouse");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setCursorPosition(float x, float y)
    self->setCursorPosition(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventMouse_setMouseButton(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;
    cocos2d::EventMouse::MouseButton arg1 = (cocos2d::EventMouse::MouseButton)0;       /** button */

    olua_to_object(L, 1, &self, "cc.EventMouse");
    olua_check_enum(L, 2, &arg1);

    // void setMouseButton(cocos2d::EventMouse::MouseButton button)
    self->setMouseButton(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventMouse_setScrollData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventMouse *self = nullptr;
    float arg1 = 0;       /** scrollX */
    float arg2 = 0;       /** scrollY */

    olua_to_object(L, 1, &self, "cc.EventMouse");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setScrollData(float scrollX, float scrollY)
    self->setScrollData(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_EventMouse(lua_State *L)
{
    oluacls_class<cocos2d::EventMouse, cocos2d::Event>(L, "cc.EventMouse");
    oluacls_func(L, "getCursorX", _olua_fun_cocos2d_EventMouse_getCursorX);
    oluacls_func(L, "getCursorY", _olua_fun_cocos2d_EventMouse_getCursorY);
    oluacls_func(L, "getDelta", _olua_fun_cocos2d_EventMouse_getDelta);
    oluacls_func(L, "getLocation", _olua_fun_cocos2d_EventMouse_getLocation);
    oluacls_func(L, "getLocationInView", _olua_fun_cocos2d_EventMouse_getLocationInView);
    oluacls_func(L, "getMouseButton", _olua_fun_cocos2d_EventMouse_getMouseButton);
    oluacls_func(L, "getPreviousLocation", _olua_fun_cocos2d_EventMouse_getPreviousLocation);
    oluacls_func(L, "getPreviousLocationInView", _olua_fun_cocos2d_EventMouse_getPreviousLocationInView);
    oluacls_func(L, "getScrollX", _olua_fun_cocos2d_EventMouse_getScrollX);
    oluacls_func(L, "getScrollY", _olua_fun_cocos2d_EventMouse_getScrollY);
    oluacls_func(L, "getStartLocation", _olua_fun_cocos2d_EventMouse_getStartLocation);
    oluacls_func(L, "getStartLocationInView", _olua_fun_cocos2d_EventMouse_getStartLocationInView);
    oluacls_func(L, "new", _olua_fun_cocos2d_EventMouse_new);
    oluacls_func(L, "setCursorPosition", _olua_fun_cocos2d_EventMouse_setCursorPosition);
    oluacls_func(L, "setMouseButton", _olua_fun_cocos2d_EventMouse_setMouseButton);
    oluacls_func(L, "setScrollData", _olua_fun_cocos2d_EventMouse_setScrollData);
    oluacls_prop(L, "cursorX", _olua_fun_cocos2d_EventMouse_getCursorX, nullptr);
    oluacls_prop(L, "cursorY", _olua_fun_cocos2d_EventMouse_getCursorY, nullptr);
    oluacls_prop(L, "delta", _olua_fun_cocos2d_EventMouse_getDelta, nullptr);
    oluacls_prop(L, "location", _olua_fun_cocos2d_EventMouse_getLocation, nullptr);
    oluacls_prop(L, "locationInView", _olua_fun_cocos2d_EventMouse_getLocationInView, nullptr);
    oluacls_prop(L, "mouseButton", _olua_fun_cocos2d_EventMouse_getMouseButton, _olua_fun_cocos2d_EventMouse_setMouseButton);
    oluacls_prop(L, "previousLocation", _olua_fun_cocos2d_EventMouse_getPreviousLocation, nullptr);
    oluacls_prop(L, "previousLocationInView", _olua_fun_cocos2d_EventMouse_getPreviousLocationInView, nullptr);
    oluacls_prop(L, "scrollX", _olua_fun_cocos2d_EventMouse_getScrollX, nullptr);
    oluacls_prop(L, "scrollY", _olua_fun_cocos2d_EventMouse_getScrollY, nullptr);
    oluacls_prop(L, "startLocation", _olua_fun_cocos2d_EventMouse_getStartLocation, nullptr);
    oluacls_prop(L, "startLocationInView", _olua_fun_cocos2d_EventMouse_getStartLocationInView, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventMouse(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventMouse")) {
        luaL_error(L, "class not found: cocos2d::EventMouse");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_EventKeyboard_KeyCode(lua_State *L)
{
    oluacls_class<cocos2d::EventKeyboard::KeyCode>(L, "cc.EventKeyboard.KeyCode");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "KEY_0", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_0);
    oluacls_enum(L, "KEY_1", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_1);
    oluacls_enum(L, "KEY_2", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_2);
    oluacls_enum(L, "KEY_3", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_3);
    oluacls_enum(L, "KEY_4", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_4);
    oluacls_enum(L, "KEY_5", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_5);
    oluacls_enum(L, "KEY_6", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_6);
    oluacls_enum(L, "KEY_7", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_7);
    oluacls_enum(L, "KEY_8", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_8);
    oluacls_enum(L, "KEY_9", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_9);
    oluacls_enum(L, "KEY_A", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_A);
    oluacls_enum(L, "KEY_ALT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_ALT);
    oluacls_enum(L, "KEY_AMPERSAND", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_AMPERSAND);
    oluacls_enum(L, "KEY_APOSTROPHE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_APOSTROPHE);
    oluacls_enum(L, "KEY_ASTERISK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_ASTERISK);
    oluacls_enum(L, "KEY_AT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_AT);
    oluacls_enum(L, "KEY_B", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_B);
    oluacls_enum(L, "KEY_BACK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BACK);
    oluacls_enum(L, "KEY_BACKSPACE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BACKSPACE);
    oluacls_enum(L, "KEY_BACK_SLASH", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BACK_SLASH);
    oluacls_enum(L, "KEY_BACK_TAB", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BACK_TAB);
    oluacls_enum(L, "KEY_BAR", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BAR);
    oluacls_enum(L, "KEY_BREAK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_BREAK);
    oluacls_enum(L, "KEY_C", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_C);
    oluacls_enum(L, "KEY_CAPITAL_A", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_A);
    oluacls_enum(L, "KEY_CAPITAL_B", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_B);
    oluacls_enum(L, "KEY_CAPITAL_C", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_C);
    oluacls_enum(L, "KEY_CAPITAL_D", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_D);
    oluacls_enum(L, "KEY_CAPITAL_E", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_E);
    oluacls_enum(L, "KEY_CAPITAL_F", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_F);
    oluacls_enum(L, "KEY_CAPITAL_G", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_G);
    oluacls_enum(L, "KEY_CAPITAL_H", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_H);
    oluacls_enum(L, "KEY_CAPITAL_I", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_I);
    oluacls_enum(L, "KEY_CAPITAL_J", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_J);
    oluacls_enum(L, "KEY_CAPITAL_K", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_K);
    oluacls_enum(L, "KEY_CAPITAL_L", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_L);
    oluacls_enum(L, "KEY_CAPITAL_M", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_M);
    oluacls_enum(L, "KEY_CAPITAL_N", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_N);
    oluacls_enum(L, "KEY_CAPITAL_O", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_O);
    oluacls_enum(L, "KEY_CAPITAL_P", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_P);
    oluacls_enum(L, "KEY_CAPITAL_Q", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_Q);
    oluacls_enum(L, "KEY_CAPITAL_R", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_R);
    oluacls_enum(L, "KEY_CAPITAL_S", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_S);
    oluacls_enum(L, "KEY_CAPITAL_T", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_T);
    oluacls_enum(L, "KEY_CAPITAL_U", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_U);
    oluacls_enum(L, "KEY_CAPITAL_V", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_V);
    oluacls_enum(L, "KEY_CAPITAL_W", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_W);
    oluacls_enum(L, "KEY_CAPITAL_X", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_X);
    oluacls_enum(L, "KEY_CAPITAL_Y", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_Y);
    oluacls_enum(L, "KEY_CAPITAL_Z", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPITAL_Z);
    oluacls_enum(L, "KEY_CAPS_LOCK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CAPS_LOCK);
    oluacls_enum(L, "KEY_CIRCUMFLEX", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CIRCUMFLEX);
    oluacls_enum(L, "KEY_COLON", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_COLON);
    oluacls_enum(L, "KEY_COMMA", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_COMMA);
    oluacls_enum(L, "KEY_CTRL", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_CTRL);
    oluacls_enum(L, "KEY_D", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_D);
    oluacls_enum(L, "KEY_DELETE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DELETE);
    oluacls_enum(L, "KEY_DOLLAR", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DOLLAR);
    oluacls_enum(L, "KEY_DOWN_ARROW", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DOWN_ARROW);
    oluacls_enum(L, "KEY_DPAD_CENTER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_CENTER);
    oluacls_enum(L, "KEY_DPAD_DOWN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_DOWN);
    oluacls_enum(L, "KEY_DPAD_LEFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_LEFT);
    oluacls_enum(L, "KEY_DPAD_RIGHT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_RIGHT);
    oluacls_enum(L, "KEY_DPAD_UP", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_DPAD_UP);
    oluacls_enum(L, "KEY_E", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_E);
    oluacls_enum(L, "KEY_END", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_END);
    oluacls_enum(L, "KEY_ENTER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_ENTER);
    oluacls_enum(L, "KEY_EQUAL", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_EQUAL);
    oluacls_enum(L, "KEY_ESCAPE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_ESCAPE);
    oluacls_enum(L, "KEY_EURO", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_EURO);
    oluacls_enum(L, "KEY_EXCLAM", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_EXCLAM);
    oluacls_enum(L, "KEY_F", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F);
    oluacls_enum(L, "KEY_F1", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F1);
    oluacls_enum(L, "KEY_F10", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F10);
    oluacls_enum(L, "KEY_F11", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F11);
    oluacls_enum(L, "KEY_F12", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F12);
    oluacls_enum(L, "KEY_F2", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F2);
    oluacls_enum(L, "KEY_F3", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F3);
    oluacls_enum(L, "KEY_F4", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F4);
    oluacls_enum(L, "KEY_F5", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F5);
    oluacls_enum(L, "KEY_F6", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F6);
    oluacls_enum(L, "KEY_F7", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F7);
    oluacls_enum(L, "KEY_F8", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F8);
    oluacls_enum(L, "KEY_F9", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_F9);
    oluacls_enum(L, "KEY_G", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_G);
    oluacls_enum(L, "KEY_GRAVE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_GRAVE);
    oluacls_enum(L, "KEY_GREATER_THAN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_GREATER_THAN);
    oluacls_enum(L, "KEY_H", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_H);
    oluacls_enum(L, "KEY_HOME", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_HOME);
    oluacls_enum(L, "KEY_HYPER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_HYPER);
    oluacls_enum(L, "KEY_I", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_I);
    oluacls_enum(L, "KEY_INSERT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_INSERT);
    oluacls_enum(L, "KEY_J", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_J);
    oluacls_enum(L, "KEY_K", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_K);
    oluacls_enum(L, "KEY_KP_DELETE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_DELETE);
    oluacls_enum(L, "KEY_KP_DIVIDE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_DIVIDE);
    oluacls_enum(L, "KEY_KP_DOWN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_DOWN);
    oluacls_enum(L, "KEY_KP_END", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_END);
    oluacls_enum(L, "KEY_KP_ENTER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_ENTER);
    oluacls_enum(L, "KEY_KP_FIVE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_FIVE);
    oluacls_enum(L, "KEY_KP_HOME", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_HOME);
    oluacls_enum(L, "KEY_KP_INSERT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_INSERT);
    oluacls_enum(L, "KEY_KP_LEFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_LEFT);
    oluacls_enum(L, "KEY_KP_MINUS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_MINUS);
    oluacls_enum(L, "KEY_KP_MULTIPLY", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_MULTIPLY);
    oluacls_enum(L, "KEY_KP_PG_DOWN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_PG_DOWN);
    oluacls_enum(L, "KEY_KP_PG_UP", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_PG_UP);
    oluacls_enum(L, "KEY_KP_PLUS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_PLUS);
    oluacls_enum(L, "KEY_KP_RIGHT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_RIGHT);
    oluacls_enum(L, "KEY_KP_UP", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_KP_UP);
    oluacls_enum(L, "KEY_L", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_L);
    oluacls_enum(L, "KEY_LEFT_ALT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_ALT);
    oluacls_enum(L, "KEY_LEFT_ARROW", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_ARROW);
    oluacls_enum(L, "KEY_LEFT_BRACE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_BRACE);
    oluacls_enum(L, "KEY_LEFT_BRACKET", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_BRACKET);
    oluacls_enum(L, "KEY_LEFT_CTRL", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_CTRL);
    oluacls_enum(L, "KEY_LEFT_PARENTHESIS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_PARENTHESIS);
    oluacls_enum(L, "KEY_LEFT_SHIFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LEFT_SHIFT);
    oluacls_enum(L, "KEY_LESS_THAN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_LESS_THAN);
    oluacls_enum(L, "KEY_M", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_M);
    oluacls_enum(L, "KEY_MENU", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_MENU);
    oluacls_enum(L, "KEY_MIDDLE_DOT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_MIDDLE_DOT);
    oluacls_enum(L, "KEY_MINUS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_MINUS);
    oluacls_enum(L, "KEY_N", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_N);
    oluacls_enum(L, "KEY_NONE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_NONE);
    oluacls_enum(L, "KEY_NUMBER", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_NUMBER);
    oluacls_enum(L, "KEY_NUM_LOCK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_NUM_LOCK);
    oluacls_enum(L, "KEY_O", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_O);
    oluacls_enum(L, "KEY_P", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_P);
    oluacls_enum(L, "KEY_PAUSE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PAUSE);
    oluacls_enum(L, "KEY_PERCENT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PERCENT);
    oluacls_enum(L, "KEY_PERIOD", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PERIOD);
    oluacls_enum(L, "KEY_PG_DOWN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PG_DOWN);
    oluacls_enum(L, "KEY_PG_UP", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PG_UP);
    oluacls_enum(L, "KEY_PLAY", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PLAY);
    oluacls_enum(L, "KEY_PLUS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PLUS);
    oluacls_enum(L, "KEY_POUND", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_POUND);
    oluacls_enum(L, "KEY_PRINT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_PRINT);
    oluacls_enum(L, "KEY_Q", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_Q);
    oluacls_enum(L, "KEY_QUESTION", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_QUESTION);
    oluacls_enum(L, "KEY_QUOTE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_QUOTE);
    oluacls_enum(L, "KEY_R", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_R);
    oluacls_enum(L, "KEY_RETURN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RETURN);
    oluacls_enum(L, "KEY_RIGHT_ALT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_ALT);
    oluacls_enum(L, "KEY_RIGHT_ARROW", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_ARROW);
    oluacls_enum(L, "KEY_RIGHT_BRACE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_BRACE);
    oluacls_enum(L, "KEY_RIGHT_BRACKET", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_BRACKET);
    oluacls_enum(L, "KEY_RIGHT_CTRL", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_CTRL);
    oluacls_enum(L, "KEY_RIGHT_PARENTHESIS", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_PARENTHESIS);
    oluacls_enum(L, "KEY_RIGHT_SHIFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_RIGHT_SHIFT);
    oluacls_enum(L, "KEY_S", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_S);
    oluacls_enum(L, "KEY_SCROLL_LOCK", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SCROLL_LOCK);
    oluacls_enum(L, "KEY_SEARCH", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SEARCH);
    oluacls_enum(L, "KEY_SEMICOLON", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SEMICOLON);
    oluacls_enum(L, "KEY_SHIFT", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SHIFT);
    oluacls_enum(L, "KEY_SLASH", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SLASH);
    oluacls_enum(L, "KEY_SPACE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SPACE);
    oluacls_enum(L, "KEY_SYSREQ", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_SYSREQ);
    oluacls_enum(L, "KEY_T", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_T);
    oluacls_enum(L, "KEY_TAB", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_TAB);
    oluacls_enum(L, "KEY_TILDE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_TILDE);
    oluacls_enum(L, "KEY_U", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_U);
    oluacls_enum(L, "KEY_UNDERSCORE", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_UNDERSCORE);
    oluacls_enum(L, "KEY_UP_ARROW", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_UP_ARROW);
    oluacls_enum(L, "KEY_V", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_V);
    oluacls_enum(L, "KEY_W", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_W);
    oluacls_enum(L, "KEY_X", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_X);
    oluacls_enum(L, "KEY_Y", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_Y);
    oluacls_enum(L, "KEY_YEN", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_YEN);
    oluacls_enum(L, "KEY_Z", (lua_Integer)cocos2d::EventKeyboard::KeyCode::KEY_Z);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventKeyboard_KeyCode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventKeyboard.KeyCode")) {
        luaL_error(L, "class not found: cocos2d::EventKeyboard::KeyCode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_Touch_DispatchMode(lua_State *L)
{
    oluacls_class<cocos2d::Touch::DispatchMode>(L, "cc.Touch.DispatchMode");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "ALL_AT_ONCE", (lua_Integer)cocos2d::Touch::DispatchMode::ALL_AT_ONCE);
    oluacls_enum(L, "ONE_BY_ONE", (lua_Integer)cocos2d::Touch::DispatchMode::ONE_BY_ONE);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Touch_DispatchMode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Touch.DispatchMode")) {
        luaL_error(L, "class not found: cocos2d::Touch::DispatchMode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_EventController_ControllerEventType(lua_State *L)
{
    oluacls_class<cocos2d::EventController::ControllerEventType>(L, "cc.EventController.ControllerEventType");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "AXIS_STATUS_CHANGED", (lua_Integer)cocos2d::EventController::ControllerEventType::AXIS_STATUS_CHANGED);
    oluacls_enum(L, "BUTTON_STATUS_CHANGED", (lua_Integer)cocos2d::EventController::ControllerEventType::BUTTON_STATUS_CHANGED);
    oluacls_enum(L, "CONNECTION", (lua_Integer)cocos2d::EventController::ControllerEventType::CONNECTION);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventController_ControllerEventType(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventController.ControllerEventType")) {
        luaL_error(L, "class not found: cocos2d::EventController::ControllerEventType");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_EventController_getController(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventController");

    // cocos2d::Controller *getController()
    cocos2d::Controller *ret = self->getController();
    int num_ret = olua_push_object(L, ret, "cc.Controller");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventController_getControllerEventType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventController");

    // cocos2d::EventController::ControllerEventType getControllerEventType()
    cocos2d::EventController::ControllerEventType ret = self->getControllerEventType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventController_getKeyCode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventController");

    // int getKeyCode()
    int ret = self->getKeyCode();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventController_isConnected(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController *self = nullptr;

    olua_to_object(L, 1, &self, "cc.EventController");

    // bool isConnected()
    bool ret = self->isConnected();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventController_new$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController::ControllerEventType arg1 = (cocos2d::EventController::ControllerEventType)0;       /** type */
    cocos2d::Controller *arg2 = nullptr;       /** controller */
    int arg3 = 0;       /** keyCode */

    olua_check_enum(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Controller");
    olua_check_integer(L, 3, &arg3);

    // cocos2d::EventController(cocos2d::EventController::ControllerEventType type, cocos2d::Controller *controller, int keyCode)
    cocos2d::EventController *ret = new cocos2d::EventController(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.EventController");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventController_new$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController::ControllerEventType arg1 = (cocos2d::EventController::ControllerEventType)0;       /** type */
    cocos2d::Controller *arg2 = nullptr;       /** controller */
    bool arg3 = false;       /** isConnected */

    olua_check_enum(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Controller");
    olua_check_bool(L, 3, &arg3);

    // cocos2d::EventController(cocos2d::EventController::ControllerEventType type, cocos2d::Controller *controller, bool isConnected)
    cocos2d::EventController *ret = new cocos2d::EventController(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.EventController");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_EventController_new(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        if ((olua_is_enum(L, 1)) && (olua_is_object(L, 2, "cc.Controller")) && (olua_is_integer(L, 3))) {
            // cocos2d::EventController(cocos2d::EventController::ControllerEventType type, cocos2d::Controller *controller, int keyCode)
            return _olua_fun_cocos2d_EventController_new$1(L);
        }

        // if ((olua_is_enum(L, 1)) && (olua_is_object(L, 2, "cc.Controller")) && (olua_is_bool(L, 3))) {
            // cocos2d::EventController(cocos2d::EventController::ControllerEventType type, cocos2d::Controller *controller, bool isConnected)
            return _olua_fun_cocos2d_EventController_new$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::EventController::new' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_EventController_setConnectStatus(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController *self = nullptr;
    bool arg1 = false;       /** isConnected */

    olua_to_object(L, 1, &self, "cc.EventController");
    olua_check_bool(L, 2, &arg1);

    // void setConnectStatus(bool isConnected)
    self->setConnectStatus(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_EventController_setKeyCode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::EventController *self = nullptr;
    int arg1 = 0;       /** keyCode */

    olua_to_object(L, 1, &self, "cc.EventController");
    olua_check_integer(L, 2, &arg1);

    // void setKeyCode(int keyCode)
    self->setKeyCode(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_EventController(lua_State *L)
{
    oluacls_class<cocos2d::EventController, cocos2d::Event>(L, "cc.EventController");
    oluacls_func(L, "getController", _olua_fun_cocos2d_EventController_getController);
    oluacls_func(L, "getControllerEventType", _olua_fun_cocos2d_EventController_getControllerEventType);
    oluacls_func(L, "getKeyCode", _olua_fun_cocos2d_EventController_getKeyCode);
    oluacls_func(L, "isConnected", _olua_fun_cocos2d_EventController_isConnected);
    oluacls_func(L, "new", _olua_fun_cocos2d_EventController_new);
    oluacls_func(L, "setConnectStatus", _olua_fun_cocos2d_EventController_setConnectStatus);
    oluacls_func(L, "setKeyCode", _olua_fun_cocos2d_EventController_setKeyCode);
    oluacls_prop(L, "connected", _olua_fun_cocos2d_EventController_isConnected, nullptr);
    oluacls_prop(L, "controller", _olua_fun_cocos2d_EventController_getController, nullptr);
    oluacls_prop(L, "controllerEventType", _olua_fun_cocos2d_EventController_getControllerEventType, nullptr);
    oluacls_prop(L, "keyCode", _olua_fun_cocos2d_EventController_getKeyCode, _olua_fun_cocos2d_EventController_setKeyCode);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_EventController(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.EventController")) {
        luaL_error(L, "class not found: cocos2d::EventController");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Touch_getCurrentForce(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Touch");

    // float getCurrentForce()
    float ret = self->getCurrentForce();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Touch_getDelta(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Touch");

    // cocos2d::Vec2 getDelta()
    cocos2d::Vec2 ret = self->getDelta();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Touch_getID(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Touch");

    // int getID()
    int ret = self->getID();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Touch_getLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Touch");

    // cocos2d::Vec2 getLocation()
    cocos2d::Vec2 ret = self->getLocation();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Touch_getLocationInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Touch");

    // cocos2d::Vec2 getLocationInView()
    cocos2d::Vec2 ret = self->getLocationInView();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Touch_getMaxForce(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Touch");

    // float getMaxForce()
    float ret = self->getMaxForce();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Touch_getPreviousLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Touch");

    // cocos2d::Vec2 getPreviousLocation()
    cocos2d::Vec2 ret = self->getPreviousLocation();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Touch_getPreviousLocationInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Touch");

    // cocos2d::Vec2 getPreviousLocationInView()
    cocos2d::Vec2 ret = self->getPreviousLocationInView();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Touch_getStartLocation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Touch");

    // cocos2d::Vec2 getStartLocation()
    cocos2d::Vec2 ret = self->getStartLocation();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Touch_getStartLocationInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Touch");

    // cocos2d::Vec2 getStartLocationInView()
    cocos2d::Vec2 ret = self->getStartLocationInView();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Touch_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Touch()
    cocos2d::Touch *ret = new cocos2d::Touch();
    int num_ret = olua_push_object(L, ret, "cc.Touch");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Touch_setTouchInfo$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;
    int arg1 = 0;       /** id */
    float arg2 = 0;       /** x */
    float arg3 = 0;       /** y */

    olua_to_object(L, 1, &self, "cc.Touch");
    olua_check_integer(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // void setTouchInfo(int id, float x, float y)
    self->setTouchInfo(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Touch_setTouchInfo$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Touch *self = nullptr;
    int arg1 = 0;       /** id */
    float arg2 = 0;       /** x */
    float arg3 = 0;       /** y */
    float arg4 = 0;       /** force */
    float arg5 = 0;       /** maxForce */

    olua_to_object(L, 1, &self, "cc.Touch");
    olua_check_integer(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // void setTouchInfo(int id, float x, float y, float force, float maxForce)
    self->setTouchInfo(arg1, arg2, arg3, arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Touch_setTouchInfo(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Touch")) && (olua_is_integer(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4))) {
            // void setTouchInfo(int id, float x, float y)
            return _olua_fun_cocos2d_Touch_setTouchInfo$1(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.Touch")) && (olua_is_integer(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_number(L, 5)) && (olua_is_number(L, 6))) {
            // void setTouchInfo(int id, float x, float y, float force, float maxForce)
            return _olua_fun_cocos2d_Touch_setTouchInfo$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Touch::setTouchInfo' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_Touch(lua_State *L)
{
    oluacls_class<cocos2d::Touch, cocos2d::Ref>(L, "cc.Touch");
    oluacls_func(L, "getCurrentForce", _olua_fun_cocos2d_Touch_getCurrentForce);
    oluacls_func(L, "getDelta", _olua_fun_cocos2d_Touch_getDelta);
    oluacls_func(L, "getID", _olua_fun_cocos2d_Touch_getID);
    oluacls_func(L, "getLocation", _olua_fun_cocos2d_Touch_getLocation);
    oluacls_func(L, "getLocationInView", _olua_fun_cocos2d_Touch_getLocationInView);
    oluacls_func(L, "getMaxForce", _olua_fun_cocos2d_Touch_getMaxForce);
    oluacls_func(L, "getPreviousLocation", _olua_fun_cocos2d_Touch_getPreviousLocation);
    oluacls_func(L, "getPreviousLocationInView", _olua_fun_cocos2d_Touch_getPreviousLocationInView);
    oluacls_func(L, "getStartLocation", _olua_fun_cocos2d_Touch_getStartLocation);
    oluacls_func(L, "getStartLocationInView", _olua_fun_cocos2d_Touch_getStartLocationInView);
    oluacls_func(L, "new", _olua_fun_cocos2d_Touch_new);
    oluacls_func(L, "setTouchInfo", _olua_fun_cocos2d_Touch_setTouchInfo);
    oluacls_prop(L, "currentForce", _olua_fun_cocos2d_Touch_getCurrentForce, nullptr);
    oluacls_prop(L, "delta", _olua_fun_cocos2d_Touch_getDelta, nullptr);
    oluacls_prop(L, "id", _olua_fun_cocos2d_Touch_getID, nullptr);
    oluacls_prop(L, "location", _olua_fun_cocos2d_Touch_getLocation, nullptr);
    oluacls_prop(L, "locationInView", _olua_fun_cocos2d_Touch_getLocationInView, nullptr);
    oluacls_prop(L, "maxForce", _olua_fun_cocos2d_Touch_getMaxForce, nullptr);
    oluacls_prop(L, "previousLocation", _olua_fun_cocos2d_Touch_getPreviousLocation, nullptr);
    oluacls_prop(L, "previousLocationInView", _olua_fun_cocos2d_Touch_getPreviousLocationInView, nullptr);
    oluacls_prop(L, "startLocation", _olua_fun_cocos2d_Touch_getStartLocation, nullptr);
    oluacls_prop(L, "startLocationInView", _olua_fun_cocos2d_Touch_getStartLocationInView, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Touch(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Touch")) {
        luaL_error(L, "class not found: cocos2d::Touch");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_Controller_Key(lua_State *L)
{
    oluacls_class<cocos2d::Controller::Key>(L, "cc.Controller.Key");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "AXIS_LEFT_TRIGGER", (lua_Integer)cocos2d::Controller::Key::AXIS_LEFT_TRIGGER);
    oluacls_enum(L, "AXIS_RIGHT_TRIGGER", (lua_Integer)cocos2d::Controller::Key::AXIS_RIGHT_TRIGGER);
    oluacls_enum(L, "BUTTON_A", (lua_Integer)cocos2d::Controller::Key::BUTTON_A);
    oluacls_enum(L, "BUTTON_B", (lua_Integer)cocos2d::Controller::Key::BUTTON_B);
    oluacls_enum(L, "BUTTON_C", (lua_Integer)cocos2d::Controller::Key::BUTTON_C);
    oluacls_enum(L, "BUTTON_DPAD_CENTER", (lua_Integer)cocos2d::Controller::Key::BUTTON_DPAD_CENTER);
    oluacls_enum(L, "BUTTON_DPAD_DOWN", (lua_Integer)cocos2d::Controller::Key::BUTTON_DPAD_DOWN);
    oluacls_enum(L, "BUTTON_DPAD_LEFT", (lua_Integer)cocos2d::Controller::Key::BUTTON_DPAD_LEFT);
    oluacls_enum(L, "BUTTON_DPAD_RIGHT", (lua_Integer)cocos2d::Controller::Key::BUTTON_DPAD_RIGHT);
    oluacls_enum(L, "BUTTON_DPAD_UP", (lua_Integer)cocos2d::Controller::Key::BUTTON_DPAD_UP);
    oluacls_enum(L, "BUTTON_LEFT_SHOULDER", (lua_Integer)cocos2d::Controller::Key::BUTTON_LEFT_SHOULDER);
    oluacls_enum(L, "BUTTON_LEFT_THUMBSTICK", (lua_Integer)cocos2d::Controller::Key::BUTTON_LEFT_THUMBSTICK);
    oluacls_enum(L, "BUTTON_PAUSE", (lua_Integer)cocos2d::Controller::Key::BUTTON_PAUSE);
    oluacls_enum(L, "BUTTON_RIGHT_SHOULDER", (lua_Integer)cocos2d::Controller::Key::BUTTON_RIGHT_SHOULDER);
    oluacls_enum(L, "BUTTON_RIGHT_THUMBSTICK", (lua_Integer)cocos2d::Controller::Key::BUTTON_RIGHT_THUMBSTICK);
    oluacls_enum(L, "BUTTON_SELECT", (lua_Integer)cocos2d::Controller::Key::BUTTON_SELECT);
    oluacls_enum(L, "BUTTON_START", (lua_Integer)cocos2d::Controller::Key::BUTTON_START);
    oluacls_enum(L, "BUTTON_X", (lua_Integer)cocos2d::Controller::Key::BUTTON_X);
    oluacls_enum(L, "BUTTON_Y", (lua_Integer)cocos2d::Controller::Key::BUTTON_Y);
    oluacls_enum(L, "BUTTON_Z", (lua_Integer)cocos2d::Controller::Key::BUTTON_Z);
    oluacls_enum(L, "JOYSTICK_LEFT_X", (lua_Integer)cocos2d::Controller::Key::JOYSTICK_LEFT_X);
    oluacls_enum(L, "JOYSTICK_LEFT_Y", (lua_Integer)cocos2d::Controller::Key::JOYSTICK_LEFT_Y);
    oluacls_enum(L, "JOYSTICK_RIGHT_X", (lua_Integer)cocos2d::Controller::Key::JOYSTICK_RIGHT_X);
    oluacls_enum(L, "JOYSTICK_RIGHT_Y", (lua_Integer)cocos2d::Controller::Key::JOYSTICK_RIGHT_Y);
    oluacls_enum(L, "KEY_MAX", (lua_Integer)cocos2d::Controller::Key::KEY_MAX);
    oluacls_enum(L, "KEY_NONE", (lua_Integer)cocos2d::Controller::Key::KEY_NONE);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Controller_Key(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Controller.Key")) {
        luaL_error(L, "class not found: cocos2d::Controller::Key");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Controller_getAllController(lua_State *L)
{
    olua_startinvoke(L);

    // static const std::vector<cocos2d::Controller *> &getAllController()
    const std::vector<cocos2d::Controller *> &ret = cocos2d::Controller::getAllController();
    int num_ret = olua_push_array<cocos2d::Controller *>(L, ret, [L](cocos2d::Controller *arg1) {
        olua_push_object(L, arg1, "cc.Controller");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Controller_getControllerByDeviceId(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** deviceId */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::Controller *getControllerByDeviceId(int deviceId)
    cocos2d::Controller *ret = cocos2d::Controller::getControllerByDeviceId(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Controller");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Controller_getControllerByTag(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** tag */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::Controller *getControllerByTag(int tag)
    cocos2d::Controller *ret = cocos2d::Controller::getControllerByTag(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Controller");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Controller_getDeviceId(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Controller *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Controller");

    // int getDeviceId()
    int ret = self->getDeviceId();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Controller_getDeviceName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Controller *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Controller");

    // const std::string &getDeviceName()
    const std::string &ret = self->getDeviceName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Controller_getKeyStatus(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Controller *self = nullptr;
    int arg1 = 0;       /** keyCode */

    olua_to_object(L, 1, &self, "cc.Controller");
    olua_check_integer(L, 2, &arg1);

    // const cocos2d::Controller::KeyStatus &getKeyStatus(int keyCode)
    const cocos2d::Controller::KeyStatus &ret = self->getKeyStatus(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Controller.KeyStatus");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Controller_getTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Controller *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Controller");

    // int getTag()
    int ret = self->getTag();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Controller_isConnected(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Controller *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Controller");

    // bool isConnected()
    bool ret = self->isConnected();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Controller_setTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Controller *self = nullptr;
    int arg1 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.Controller");
    olua_check_integer(L, 2, &arg1);

    // void setTag(int tag)
    self->setTag(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Controller_startDiscoveryController(lua_State *L)
{
    olua_startinvoke(L);

    // static void startDiscoveryController()
    cocos2d::Controller::startDiscoveryController();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Controller_stopDiscoveryController(lua_State *L)
{
    olua_startinvoke(L);

    // static void stopDiscoveryController()
    cocos2d::Controller::stopDiscoveryController();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Controller(lua_State *L)
{
    oluacls_class<cocos2d::Controller>(L, "cc.Controller");
    oluacls_func(L, "getAllController", _olua_fun_cocos2d_Controller_getAllController);
    oluacls_func(L, "getControllerByDeviceId", _olua_fun_cocos2d_Controller_getControllerByDeviceId);
    oluacls_func(L, "getControllerByTag", _olua_fun_cocos2d_Controller_getControllerByTag);
    oluacls_func(L, "getDeviceId", _olua_fun_cocos2d_Controller_getDeviceId);
    oluacls_func(L, "getDeviceName", _olua_fun_cocos2d_Controller_getDeviceName);
    oluacls_func(L, "getKeyStatus", _olua_fun_cocos2d_Controller_getKeyStatus);
    oluacls_func(L, "getTag", _olua_fun_cocos2d_Controller_getTag);
    oluacls_func(L, "isConnected", _olua_fun_cocos2d_Controller_isConnected);
    oluacls_func(L, "setTag", _olua_fun_cocos2d_Controller_setTag);
    oluacls_func(L, "startDiscoveryController", _olua_fun_cocos2d_Controller_startDiscoveryController);
    oluacls_func(L, "stopDiscoveryController", _olua_fun_cocos2d_Controller_stopDiscoveryController);
    oluacls_prop(L, "allController", _olua_fun_cocos2d_Controller_getAllController, nullptr);
    oluacls_prop(L, "connected", _olua_fun_cocos2d_Controller_isConnected, nullptr);
    oluacls_prop(L, "deviceId", _olua_fun_cocos2d_Controller_getDeviceId, nullptr);
    oluacls_prop(L, "deviceName", _olua_fun_cocos2d_Controller_getDeviceName, nullptr);
    oluacls_prop(L, "tag", _olua_fun_cocos2d_Controller_getTag, _olua_fun_cocos2d_Controller_setTag);
    oluacls_const(L, "TAG_UNSET", cocos2d::Controller::TAG_UNSET);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Controller(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Controller")) {
        luaL_error(L, "class not found: cocos2d::Controller");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_AudioProfile___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::AudioProfile *)olua_toobj(L, 1, "cc.AudioProfile");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioProfile_maxInstances$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AudioProfile *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AudioProfile");

    // unsigned int maxInstances
    unsigned int ret = self->maxInstances;
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioProfile_maxInstances$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AudioProfile *self = nullptr;
    unsigned int arg1 = 0;       /** maxInstances */

    olua_to_object(L, 1, &self, "cc.AudioProfile");
    olua_check_integer(L, 2, &arg1);

    // unsigned int maxInstances
    self->maxInstances = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioProfile_maxInstances(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // unsigned int maxInstances
        return _olua_fun_cocos2d_AudioProfile_maxInstances$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.AudioProfile")) && (olua_is_integer(L, 2))) {
            // unsigned int maxInstances
            return _olua_fun_cocos2d_AudioProfile_maxInstances$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::AudioProfile::maxInstances' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_AudioProfile_minDelay$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AudioProfile *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AudioProfile");

    // double minDelay
    double ret = self->minDelay;
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioProfile_minDelay$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AudioProfile *self = nullptr;
    double arg1 = 0;       /** minDelay */

    olua_to_object(L, 1, &self, "cc.AudioProfile");
    olua_check_number(L, 2, &arg1);

    // double minDelay
    self->minDelay = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioProfile_minDelay(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // double minDelay
        return _olua_fun_cocos2d_AudioProfile_minDelay$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.AudioProfile")) && (olua_is_number(L, 2))) {
            // double minDelay
            return _olua_fun_cocos2d_AudioProfile_minDelay$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::AudioProfile::minDelay' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_AudioProfile_name$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AudioProfile *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AudioProfile");

    // std::string name
    std::string ret = self->name;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioProfile_name$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AudioProfile *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.AudioProfile");
    olua_check_string(L, 2, &arg1);

    // std::string name
    self->name = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioProfile_name(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::string name
        return _olua_fun_cocos2d_AudioProfile_name$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.AudioProfile")) && (olua_is_string(L, 2))) {
            // std::string name
            return _olua_fun_cocos2d_AudioProfile_name$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::AudioProfile::name' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_AudioProfile_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::AudioProfile()
    cocos2d::AudioProfile *ret = new cocos2d::AudioProfile();
    int num_ret = olua_push_object(L, ret, "cc.AudioProfile");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_AudioProfile(lua_State *L)
{
    oluacls_class<cocos2d::AudioProfile>(L, "cc.AudioProfile");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_AudioProfile___gc);
    oluacls_func(L, "new", _olua_fun_cocos2d_AudioProfile_new);
    oluacls_prop(L, "name", _olua_fun_cocos2d_AudioProfile_name, _olua_fun_cocos2d_AudioProfile_name);
    oluacls_prop(L, "maxInstances", _olua_fun_cocos2d_AudioProfile_maxInstances, _olua_fun_cocos2d_AudioProfile_maxInstances);
    oluacls_prop(L, "minDelay", _olua_fun_cocos2d_AudioProfile_minDelay, _olua_fun_cocos2d_AudioProfile_minDelay);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_AudioProfile(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.AudioProfile")) {
        luaL_error(L, "class not found: cocos2d::AudioProfile");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_AudioEngine_AudioState(lua_State *L)
{
    oluacls_class<cocos2d::AudioEngine::AudioState>(L, "cc.AudioEngine.AudioState");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "ERROR", (lua_Integer)cocos2d::AudioEngine::AudioState::ERROR);
    oluacls_enum(L, "INITIALIZING", (lua_Integer)cocos2d::AudioEngine::AudioState::INITIALIZING);
    oluacls_enum(L, "PAUSED", (lua_Integer)cocos2d::AudioEngine::AudioState::PAUSED);
    oluacls_enum(L, "PLAYING", (lua_Integer)cocos2d::AudioEngine::AudioState::PLAYING);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_AudioEngine_AudioState(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.AudioEngine.AudioState")) {
        luaL_error(L, "class not found: cocos2d::AudioEngine::AudioState");
    }
    return 1;
}
OLUA_END_DECLS

NS_CC_BEGIN
class LuaAudioEngine : public cocos2d::AudioEngine
{
public:
    static std::list<int> getAudioIDs(const std::string &path)
    {
        std::list<int> list;
        auto it = _audioPathIDMap.find(path);
        if (it != _audioPathIDMap.end()) {
            list = it->second;
        }
        return list;
    }
};
NS_CC_END

static const std::string makeAudioEngineFinishCallbackTag(lua_Integer id)
{
    if (id < 0) {
        return "finishCallback.";
    } else {
        char buf[64];
        snprintf(buf, sizeof(buf), "finishCallback.%d", (int)id);
        return std::string(buf);
    }
}

static int _olua_fun_cocos2d_AudioEngine___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::AudioEngine *)olua_toobj(L, 1, "cc.AudioEngine");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_end_(lua_State *L)
{
    olua_startinvoke(L);

    // static void end()
    cocos2d::AudioEngine::end();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_getCurrentTime(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */

    olua_check_integer(L, 1, &arg1);

    // static float getCurrentTime(int audioID)
    float ret = cocos2d::AudioEngine::getCurrentTime(arg1);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_getDefaultProfile(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::AudioProfile *getDefaultProfile()
    cocos2d::AudioProfile *ret = cocos2d::AudioEngine::getDefaultProfile();
    int num_ret = olua_push_object(L, ret, "cc.AudioProfile");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_getDuration(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */

    olua_check_integer(L, 1, &arg1);

    // static float getDuration(int audioID)
    float ret = cocos2d::AudioEngine::getDuration(arg1);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_getMaxAudioInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static int getMaxAudioInstance()
    int ret = cocos2d::AudioEngine::getMaxAudioInstance();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_getPlayingAudioCount(lua_State *L)
{
    olua_startinvoke(L);

    // static int getPlayingAudioCount()
    int ret = cocos2d::AudioEngine::getPlayingAudioCount();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_getProfile$1(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::AudioProfile *getProfile(int audioID)
    cocos2d::AudioProfile *ret = cocos2d::AudioEngine::getProfile(arg1);
    int num_ret = olua_push_object(L, ret, "cc.AudioProfile");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_getProfile$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** profileName */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::AudioProfile *getProfile(const std::string &profileName)
    cocos2d::AudioProfile *ret = cocos2d::AudioEngine::getProfile(arg1);
    int num_ret = olua_push_object(L, ret, "cc.AudioProfile");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_getProfile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        if ((olua_is_integer(L, 1))) {
            // static cocos2d::AudioProfile *getProfile(int audioID)
            return _olua_fun_cocos2d_AudioEngine_getProfile$1(L);
        }

        // if ((olua_is_string(L, 1))) {
            // static cocos2d::AudioProfile *getProfile(const std::string &profileName)
            return _olua_fun_cocos2d_AudioEngine_getProfile$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::AudioEngine::getProfile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_getState(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::AudioEngine::AudioState getState(int audioID)
    cocos2d::AudioEngine::AudioState ret = cocos2d::AudioEngine::getState(arg1);
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_getVolume(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */

    olua_check_integer(L, 1, &arg1);

    // static float getVolume(int audioID)
    float ret = cocos2d::AudioEngine::getVolume(arg1);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_isEnabled(lua_State *L)
{
    olua_startinvoke(L);

    // static bool isEnabled()
    bool ret = cocos2d::AudioEngine::isEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_isLoop(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */

    olua_check_integer(L, 1, &arg1);

    // static bool isLoop(int audioID)
    bool ret = cocos2d::AudioEngine::isLoop(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_lazyInit(lua_State *L)
{
    olua_startinvoke(L);

    // static bool lazyInit()
    bool ret = cocos2d::AudioEngine::lazyInit();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_pause(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */

    olua_check_integer(L, 1, &arg1);

    // static void pause(int audioID)
    cocos2d::AudioEngine::pause(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_pauseAll(lua_State *L)
{
    olua_startinvoke(L);

    // static void pauseAll()
    cocos2d::AudioEngine::pauseAll();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_play2d$1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */
    bool arg2 = false;       /** loop */
    float arg3 = 0;       /** volume */
    float arg4 = 0;       /** position */
    cocos2d::AudioProfile *arg5 = nullptr;       /** profile */

    olua_check_string(L, 1, &arg1);
    olua_check_bool(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);
    olua_check_object(L, 5, &arg5, "cc.AudioProfile");

    // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume, @optional float position, @optional const cocos2d::AudioProfile *profile)
    int ret = cocos2d::AudioEngine::play2d(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_play2d$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */

    olua_check_string(L, 1, &arg1);

    // static int play2d(const std::string &filePath)
    int ret = cocos2d::AudioEngine::play2d(arg1);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_play2d$3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */
    bool arg2 = false;       /** loop */

    olua_check_string(L, 1, &arg1);
    olua_check_bool(L, 2, &arg2);

    // static int play2d(const std::string &filePath, @optional bool loop)
    int ret = cocos2d::AudioEngine::play2d(arg1, arg2);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_play2d$4(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */
    bool arg2 = false;       /** loop */
    float arg3 = 0;       /** volume */

    olua_check_string(L, 1, &arg1);
    olua_check_bool(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume)
    int ret = cocos2d::AudioEngine::play2d(arg1, arg2, arg3);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_play2d$5(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */
    bool arg2 = false;       /** loop */
    float arg3 = 0;       /** volume */
    float arg4 = 0;       /** position */

    olua_check_string(L, 1, &arg1);
    olua_check_bool(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume, @optional float position)
    int ret = cocos2d::AudioEngine::play2d(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_play2d(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static int play2d(const std::string &filePath)
            return _olua_fun_cocos2d_AudioEngine_play2d$2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 1)) && (olua_is_bool(L, 2))) {
            // static int play2d(const std::string &filePath, @optional bool loop)
            return _olua_fun_cocos2d_AudioEngine_play2d$3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_string(L, 1)) && (olua_is_bool(L, 2)) && (olua_is_number(L, 3))) {
            // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume)
            return _olua_fun_cocos2d_AudioEngine_play2d$4(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_string(L, 1)) && (olua_is_bool(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4))) {
            // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume, @optional float position)
            return _olua_fun_cocos2d_AudioEngine_play2d$5(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_string(L, 1)) && (olua_is_bool(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_object(L, 5, "cc.AudioProfile"))) {
            // static int play2d(const std::string &filePath, @optional bool loop, @optional float volume, @optional float position, @optional const cocos2d::AudioProfile *profile)
            return _olua_fun_cocos2d_AudioEngine_play2d$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::AudioEngine::play2d' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_preload$1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */

    olua_check_string(L, 1, &arg1);

    // static void preload(const std::string &filePath)
    cocos2d::AudioEngine::preload(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_preload$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */
    std::function<void (bool)> arg2;       /** callback */

    olua_check_string(L, 1, &arg1);
    olua_check_callback(L, 2, &arg2, "std.function");

    void *cb_store = (void *)olua_pushclassobj(L, "cc.AudioEngine");
    std::string cb_tag = "preload";
    std::string cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](bool cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_bool(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // static void preload(const std::string &filePath, std::function<void (bool)> callback)
    cocos2d::AudioEngine::preload(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_preload(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static void preload(const std::string &filePath)
            return _olua_fun_cocos2d_AudioEngine_preload$1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 1)) && (olua_is_callback(L, 2, "std.function"))) {
            // static void preload(const std::string &filePath, std::function<void (bool)> callback)
            return _olua_fun_cocos2d_AudioEngine_preload$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::AudioEngine::preload' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_resume(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */

    olua_check_integer(L, 1, &arg1);

    // static void resume(int audioID)
    cocos2d::AudioEngine::resume(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_resumeAll(lua_State *L)
{
    olua_startinvoke(L);

    // static void resumeAll()
    cocos2d::AudioEngine::resumeAll();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_setCurrentTime(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */
    float arg2 = 0;       /** sec */

    olua_check_integer(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static bool setCurrentTime(int audioID, float sec)
    bool ret = cocos2d::AudioEngine::setCurrentTime(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_setEnabled(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** isEnabled */

    olua_check_bool(L, 1, &arg1);

    // static void setEnabled(bool isEnabled)
    cocos2d::AudioEngine::setEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_setFinishCallback(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */
    std::function<void (int, const std::string &)> arg2;       /** callback */

    olua_check_integer(L, 1, &arg1);
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg2, "std.function");
    }

    void *cb_store = (void *)olua_pushclassobj(L, "cc.AudioEngine");
    std::string cb_tag = makeAudioEngineFinishCallbackTag(arg1);
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg2 = [cb_store, cb_name, cb_ctx /*, ML */](int cb_arg1, const std::string &cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                olua_push_integer(L, cb_arg1);
                olua_push_string(L, cb_arg2);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg2 = nullptr;
    }

    // static void setFinishCallback(int audioID, @nullable const std::function<void (int, const std::string &)> &callback)
    cocos2d::AudioEngine::setFinishCallback(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_setLoop(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */
    bool arg2 = false;       /** loop */

    olua_check_integer(L, 1, &arg1);
    olua_check_bool(L, 2, &arg2);

    // static void setLoop(int audioID, bool loop)
    cocos2d::AudioEngine::setLoop(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_setMaxAudioInstance(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** maxInstances */

    olua_check_integer(L, 1, &arg1);

    // static bool setMaxAudioInstance(int maxInstances)
    bool ret = cocos2d::AudioEngine::setMaxAudioInstance(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AudioEngine_setVolume(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */
    float arg2 = 0;       /** volume */

    olua_check_integer(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static void setVolume(int audioID, float volume)
    cocos2d::AudioEngine::setVolume(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_stop(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** audioID */

    olua_check_integer(L, 1, &arg1);

    std::string cb_tag = makeAudioEngineFinishCallbackTag(arg1);
    void *cb_store = (void *)olua_pushclassobj(L, "cc.AudioEngine");
    olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // static void stop(int audioID)
    cocos2d::AudioEngine::stop(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_stopAll(lua_State *L)
{
    olua_startinvoke(L);

    std::string cb_tag = makeAudioEngineFinishCallbackTag(-1);
    void *cb_store = (void *)olua_pushclassobj(L, "cc.AudioEngine");
    olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_STARTWITH);

    // static void stopAll()
    cocos2d::AudioEngine::stopAll();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_uncache(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filePath */

    olua_check_string(L, 1, &arg1);

    // insert code before call
    std::string path = olua_checkstring(L, 1);
    std::list<int> ids = cocos2d::LuaAudioEngine::getAudioIDs(path);
    void *cb_store = olua_pushclassobj<cocos2d::AudioEngine>(L);
    for (auto id : ids) {
        std::string tag = makeAudioEngineFinishCallbackTag((lua_Integer)id);
        olua_removecallback(L, cb_store, tag.c_str(), OLUA_TAG_EQUAL);
    }

    // static void uncache(const std::string &filePath)
    cocos2d::AudioEngine::uncache(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AudioEngine_uncacheAll(lua_State *L)
{
    olua_startinvoke(L);

    std::string cb_tag = makeAudioEngineFinishCallbackTag(-1);
    void *cb_store = (void *)olua_pushclassobj(L, "cc.AudioEngine");
    olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_STARTWITH);

    // static void uncacheAll()
    cocos2d::AudioEngine::uncacheAll();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_AudioEngine(lua_State *L)
{
    oluacls_class<cocos2d::AudioEngine>(L, "cc.AudioEngine");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_AudioEngine___gc);
    oluacls_func(L, "end_", _olua_fun_cocos2d_AudioEngine_end_);
    oluacls_func(L, "getCurrentTime", _olua_fun_cocos2d_AudioEngine_getCurrentTime);
    oluacls_func(L, "getDefaultProfile", _olua_fun_cocos2d_AudioEngine_getDefaultProfile);
    oluacls_func(L, "getDuration", _olua_fun_cocos2d_AudioEngine_getDuration);
    oluacls_func(L, "getMaxAudioInstance", _olua_fun_cocos2d_AudioEngine_getMaxAudioInstance);
    oluacls_func(L, "getPlayingAudioCount", _olua_fun_cocos2d_AudioEngine_getPlayingAudioCount);
    oluacls_func(L, "getProfile", _olua_fun_cocos2d_AudioEngine_getProfile);
    oluacls_func(L, "getState", _olua_fun_cocos2d_AudioEngine_getState);
    oluacls_func(L, "getVolume", _olua_fun_cocos2d_AudioEngine_getVolume);
    oluacls_func(L, "isEnabled", _olua_fun_cocos2d_AudioEngine_isEnabled);
    oluacls_func(L, "isLoop", _olua_fun_cocos2d_AudioEngine_isLoop);
    oluacls_func(L, "lazyInit", _olua_fun_cocos2d_AudioEngine_lazyInit);
    oluacls_func(L, "pause", _olua_fun_cocos2d_AudioEngine_pause);
    oluacls_func(L, "pauseAll", _olua_fun_cocos2d_AudioEngine_pauseAll);
    oluacls_func(L, "play2d", _olua_fun_cocos2d_AudioEngine_play2d);
    oluacls_func(L, "preload", _olua_fun_cocos2d_AudioEngine_preload);
    oluacls_func(L, "resume", _olua_fun_cocos2d_AudioEngine_resume);
    oluacls_func(L, "resumeAll", _olua_fun_cocos2d_AudioEngine_resumeAll);
    oluacls_func(L, "setCurrentTime", _olua_fun_cocos2d_AudioEngine_setCurrentTime);
    oluacls_func(L, "setEnabled", _olua_fun_cocos2d_AudioEngine_setEnabled);
    oluacls_func(L, "setFinishCallback", _olua_fun_cocos2d_AudioEngine_setFinishCallback);
    oluacls_func(L, "setLoop", _olua_fun_cocos2d_AudioEngine_setLoop);
    oluacls_func(L, "setMaxAudioInstance", _olua_fun_cocos2d_AudioEngine_setMaxAudioInstance);
    oluacls_func(L, "setVolume", _olua_fun_cocos2d_AudioEngine_setVolume);
    oluacls_func(L, "stop", _olua_fun_cocos2d_AudioEngine_stop);
    oluacls_func(L, "stopAll", _olua_fun_cocos2d_AudioEngine_stopAll);
    oluacls_func(L, "uncache", _olua_fun_cocos2d_AudioEngine_uncache);
    oluacls_func(L, "uncacheAll", _olua_fun_cocos2d_AudioEngine_uncacheAll);
    oluacls_prop(L, "defaultProfile", _olua_fun_cocos2d_AudioEngine_getDefaultProfile, nullptr);
    oluacls_prop(L, "enabled", _olua_fun_cocos2d_AudioEngine_isEnabled, _olua_fun_cocos2d_AudioEngine_setEnabled);
    oluacls_prop(L, "maxAudioInstance", _olua_fun_cocos2d_AudioEngine_getMaxAudioInstance, _olua_fun_cocos2d_AudioEngine_setMaxAudioInstance);
    oluacls_prop(L, "playingAudioCount", _olua_fun_cocos2d_AudioEngine_getPlayingAudioCount, nullptr);
    oluacls_const(L, "INVALID_AUDIO_ID", cocos2d::AudioEngine::INVALID_AUDIO_ID);
    oluacls_const(L, "TIME_UNKNOWN", cocos2d::AudioEngine::TIME_UNKNOWN);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_AudioEngine(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.AudioEngine")) {
        luaL_error(L, "class not found: cocos2d::AudioEngine");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_ApplicationProtocol_Platform(lua_State *L)
{
    oluacls_class<cocos2d::ApplicationProtocol::Platform>(L, "cc.ApplicationProtocol.Platform");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "OS_ANDROID", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_ANDROID);
    oluacls_enum(L, "OS_IPAD", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_IPAD);
    oluacls_enum(L, "OS_IPHONE", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_IPHONE);
    oluacls_enum(L, "OS_LINUX", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_LINUX);
    oluacls_enum(L, "OS_MAC", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_MAC);
    oluacls_enum(L, "OS_WINDOWS", (lua_Integer)cocos2d::ApplicationProtocol::Platform::OS_WINDOWS);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ApplicationProtocol_Platform(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ApplicationProtocol.Platform")) {
        luaL_error(L, "class not found: cocos2d::ApplicationProtocol::Platform");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_LanguageType(lua_State *L)
{
    oluacls_class<cocos2d::LanguageType>(L, "cc.LanguageType");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "ARABIC", (lua_Integer)cocos2d::LanguageType::ARABIC);
    oluacls_enum(L, "BELARUSIAN", (lua_Integer)cocos2d::LanguageType::BELARUSIAN);
    oluacls_enum(L, "BULGARIAN", (lua_Integer)cocos2d::LanguageType::BULGARIAN);
    oluacls_enum(L, "CHINESE", (lua_Integer)cocos2d::LanguageType::CHINESE);
    oluacls_enum(L, "DUTCH", (lua_Integer)cocos2d::LanguageType::DUTCH);
    oluacls_enum(L, "ENGLISH", (lua_Integer)cocos2d::LanguageType::ENGLISH);
    oluacls_enum(L, "FRENCH", (lua_Integer)cocos2d::LanguageType::FRENCH);
    oluacls_enum(L, "GERMAN", (lua_Integer)cocos2d::LanguageType::GERMAN);
    oluacls_enum(L, "HUNGARIAN", (lua_Integer)cocos2d::LanguageType::HUNGARIAN);
    oluacls_enum(L, "ITALIAN", (lua_Integer)cocos2d::LanguageType::ITALIAN);
    oluacls_enum(L, "JAPANESE", (lua_Integer)cocos2d::LanguageType::JAPANESE);
    oluacls_enum(L, "KOREAN", (lua_Integer)cocos2d::LanguageType::KOREAN);
    oluacls_enum(L, "NORWEGIAN", (lua_Integer)cocos2d::LanguageType::NORWEGIAN);
    oluacls_enum(L, "POLISH", (lua_Integer)cocos2d::LanguageType::POLISH);
    oluacls_enum(L, "PORTUGUESE", (lua_Integer)cocos2d::LanguageType::PORTUGUESE);
    oluacls_enum(L, "ROMANIAN", (lua_Integer)cocos2d::LanguageType::ROMANIAN);
    oluacls_enum(L, "RUSSIAN", (lua_Integer)cocos2d::LanguageType::RUSSIAN);
    oluacls_enum(L, "SPANISH", (lua_Integer)cocos2d::LanguageType::SPANISH);
    oluacls_enum(L, "TURKISH", (lua_Integer)cocos2d::LanguageType::TURKISH);
    oluacls_enum(L, "UKRAINIAN", (lua_Integer)cocos2d::LanguageType::UKRAINIAN);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_LanguageType(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.LanguageType")) {
        luaL_error(L, "class not found: cocos2d::LanguageType");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ApplicationProtocol___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ApplicationProtocol *)olua_toobj(L, 1, "cc.ApplicationProtocol");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ApplicationProtocol_applicationDidEnterBackground(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ApplicationProtocol");

    // void applicationDidEnterBackground()
    self->applicationDidEnterBackground();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ApplicationProtocol_applicationDidFinishLaunching(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ApplicationProtocol");

    // bool applicationDidFinishLaunching()
    bool ret = self->applicationDidFinishLaunching();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ApplicationProtocol_applicationWillEnterForeground(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ApplicationProtocol");

    // void applicationWillEnterForeground()
    self->applicationWillEnterForeground();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ApplicationProtocol_getCurrentLanguage(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ApplicationProtocol");

    // cocos2d::LanguageType getCurrentLanguage()
    cocos2d::LanguageType ret = self->getCurrentLanguage();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ApplicationProtocol_getCurrentLanguageCode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ApplicationProtocol");

    // const char *getCurrentLanguageCode()
    const char *ret = self->getCurrentLanguageCode();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ApplicationProtocol_getTargetPlatform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ApplicationProtocol");

    // cocos2d::ApplicationProtocol::Platform getTargetPlatform()
    cocos2d::ApplicationProtocol::Platform ret = self->getTargetPlatform();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ApplicationProtocol_getVersion(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ApplicationProtocol");

    // std::string getVersion()
    std::string ret = self->getVersion();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ApplicationProtocol_initGLContextAttrs(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ApplicationProtocol");

    // void initGLContextAttrs()
    self->initGLContextAttrs();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ApplicationProtocol_openURL(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;
    std::string arg1;       /** url */

    olua_to_object(L, 1, &self, "cc.ApplicationProtocol");
    olua_check_string(L, 2, &arg1);

    // bool openURL(const std::string &url)
    bool ret = self->openURL(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ApplicationProtocol_setAnimationInterval(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ApplicationProtocol *self = nullptr;
    float arg1 = 0;       /** interval */

    olua_to_object(L, 1, &self, "cc.ApplicationProtocol");
    olua_check_number(L, 2, &arg1);

    // void setAnimationInterval(float interval)
    self->setAnimationInterval(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_ApplicationProtocol(lua_State *L)
{
    oluacls_class<cocos2d::ApplicationProtocol>(L, "cc.ApplicationProtocol");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_ApplicationProtocol___gc);
    oluacls_func(L, "applicationDidEnterBackground", _olua_fun_cocos2d_ApplicationProtocol_applicationDidEnterBackground);
    oluacls_func(L, "applicationDidFinishLaunching", _olua_fun_cocos2d_ApplicationProtocol_applicationDidFinishLaunching);
    oluacls_func(L, "applicationWillEnterForeground", _olua_fun_cocos2d_ApplicationProtocol_applicationWillEnterForeground);
    oluacls_func(L, "getCurrentLanguage", _olua_fun_cocos2d_ApplicationProtocol_getCurrentLanguage);
    oluacls_func(L, "getCurrentLanguageCode", _olua_fun_cocos2d_ApplicationProtocol_getCurrentLanguageCode);
    oluacls_func(L, "getTargetPlatform", _olua_fun_cocos2d_ApplicationProtocol_getTargetPlatform);
    oluacls_func(L, "getVersion", _olua_fun_cocos2d_ApplicationProtocol_getVersion);
    oluacls_func(L, "initGLContextAttrs", _olua_fun_cocos2d_ApplicationProtocol_initGLContextAttrs);
    oluacls_func(L, "openURL", _olua_fun_cocos2d_ApplicationProtocol_openURL);
    oluacls_func(L, "setAnimationInterval", _olua_fun_cocos2d_ApplicationProtocol_setAnimationInterval);
    oluacls_prop(L, "currentLanguage", _olua_fun_cocos2d_ApplicationProtocol_getCurrentLanguage, nullptr);
    oluacls_prop(L, "currentLanguageCode", _olua_fun_cocos2d_ApplicationProtocol_getCurrentLanguageCode, nullptr);
    oluacls_prop(L, "targetPlatform", _olua_fun_cocos2d_ApplicationProtocol_getTargetPlatform, nullptr);
    oluacls_prop(L, "version", _olua_fun_cocos2d_ApplicationProtocol_getVersion, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ApplicationProtocol(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ApplicationProtocol")) {
        luaL_error(L, "class not found: cocos2d::ApplicationProtocol");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Application_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Application *getInstance()
    cocos2d::Application *ret = cocos2d::Application::getInstance();
    int num_ret = olua_push_object(L, ret, "cc.Application");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Application_run(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Application *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Application");

    // int run()
    int ret = self->run();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_Application(lua_State *L)
{
    oluacls_class<cocos2d::Application, cocos2d::ApplicationProtocol>(L, "cc.Application");
    oluacls_func(L, "getInstance", _olua_fun_cocos2d_Application_getInstance);
    oluacls_func(L, "run", _olua_fun_cocos2d_Application_run);
    oluacls_prop(L, "instance", _olua_fun_cocos2d_Application_getInstance, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Application(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Application")) {
        luaL_error(L, "class not found: cocos2d::Application");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Device___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Device *)olua_toobj(L, 1, "cc.Device");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Device_getDPI(lua_State *L)
{
    olua_startinvoke(L);

    // static int getDPI()
    int ret = cocos2d::Device::getDPI();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Device_setAccelerometerEnabled(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** isEnabled */

    olua_check_bool(L, 1, &arg1);

    // static void setAccelerometerEnabled(bool isEnabled)
    cocos2d::Device::setAccelerometerEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Device_setAccelerometerInterval(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** interval */

    olua_check_number(L, 1, &arg1);

    // static void setAccelerometerInterval(float interval)
    cocos2d::Device::setAccelerometerInterval(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Device_setKeepScreenOn(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** keepScreenOn */

    olua_check_bool(L, 1, &arg1);

    // static void setKeepScreenOn(bool keepScreenOn)
    cocos2d::Device::setKeepScreenOn(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Device_vibrate(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** duration */

    olua_check_number(L, 1, &arg1);

    // static void vibrate(float duration)
    cocos2d::Device::vibrate(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Device(lua_State *L)
{
    oluacls_class<cocos2d::Device>(L, "cc.Device");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_Device___gc);
    oluacls_func(L, "getDPI", _olua_fun_cocos2d_Device_getDPI);
    oluacls_func(L, "setAccelerometerEnabled", _olua_fun_cocos2d_Device_setAccelerometerEnabled);
    oluacls_func(L, "setAccelerometerInterval", _olua_fun_cocos2d_Device_setAccelerometerInterval);
    oluacls_func(L, "setKeepScreenOn", _olua_fun_cocos2d_Device_setKeepScreenOn);
    oluacls_func(L, "vibrate", _olua_fun_cocos2d_Device_vibrate);
    oluacls_prop(L, "dpi", _olua_fun_cocos2d_Device_getDPI, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Device(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Device")) {
        luaL_error(L, "class not found: cocos2d::Device");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ResizableBuffer___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::ResizableBuffer *)olua_toobj(L, 1, "cc.ResizableBuffer");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ResizableBuffer_buffer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ResizableBuffer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ResizableBuffer");

    // void *buffer()
    void *ret = self->buffer();
    int num_ret = olua_push_object(L, ret, "void *");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ResizableBuffer_resize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ResizableBuffer *self = nullptr;
    size_t arg1 = 0;       /** size */

    olua_to_object(L, 1, &self, "cc.ResizableBuffer");
    olua_check_integer(L, 2, &arg1);

    // void resize(size_t size)
    self->resize(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_ResizableBuffer(lua_State *L)
{
    oluacls_class<cocos2d::ResizableBuffer>(L, "cc.ResizableBuffer");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_ResizableBuffer___gc);
    oluacls_func(L, "buffer", _olua_fun_cocos2d_ResizableBuffer_buffer);
    oluacls_func(L, "resize", _olua_fun_cocos2d_ResizableBuffer_resize);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ResizableBuffer(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ResizableBuffer")) {
        luaL_error(L, "class not found: cocos2d::ResizableBuffer");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_FileUtils_Status(lua_State *L)
{
    oluacls_class<cocos2d::FileUtils::Status>(L, "cc.FileUtils.Status");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "NotExists", (lua_Integer)cocos2d::FileUtils::Status::NotExists);
    oluacls_enum(L, "NotInitialized", (lua_Integer)cocos2d::FileUtils::Status::NotInitialized);
    oluacls_enum(L, "NotRegularFileType", (lua_Integer)cocos2d::FileUtils::Status::NotRegularFileType);
    oluacls_enum(L, "OK", (lua_Integer)cocos2d::FileUtils::Status::OK);
    oluacls_enum(L, "ObtainSizeFailed", (lua_Integer)cocos2d::FileUtils::Status::ObtainSizeFailed);
    oluacls_enum(L, "OpenFailed", (lua_Integer)cocos2d::FileUtils::Status::OpenFailed);
    oluacls_enum(L, "ReadFailed", (lua_Integer)cocos2d::FileUtils::Status::ReadFailed);
    oluacls_enum(L, "TooLarge", (lua_Integer)cocos2d::FileUtils::Status::TooLarge);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_FileUtils_Status(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.FileUtils.Status")) {
        luaL_error(L, "class not found: cocos2d::FileUtils::Status");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_FileUtils___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::FileUtils *)olua_toobj(L, 1, "cc.FileUtils");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_addSearchPath$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */
    bool arg2 = false;       /** front */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void addSearchPath(const std::string &path, @optional const bool front)
    self->addSearchPath(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_addSearchPath$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // void addSearchPath(const std::string &path)
    self->addSearchPath(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_addSearchPath(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2))) {
            // void addSearchPath(const std::string &path)
            return _olua_fun_cocos2d_FileUtils_addSearchPath$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_bool(L, 3))) {
            // void addSearchPath(const std::string &path, @optional const bool front)
            return _olua_fun_cocos2d_FileUtils_addSearchPath$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::addSearchPath' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_addSearchResolutionsOrder$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** order */
    bool arg2 = false;       /** front */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void addSearchResolutionsOrder(const std::string &order, @optional const bool front)
    self->addSearchResolutionsOrder(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_addSearchResolutionsOrder$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** order */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // void addSearchResolutionsOrder(const std::string &order)
    self->addSearchResolutionsOrder(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_addSearchResolutionsOrder(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2))) {
            // void addSearchResolutionsOrder(const std::string &order)
            return _olua_fun_cocos2d_FileUtils_addSearchResolutionsOrder$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_bool(L, 3))) {
            // void addSearchResolutionsOrder(const std::string &order, @optional const bool front)
            return _olua_fun_cocos2d_FileUtils_addSearchResolutionsOrder$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::addSearchResolutionsOrder' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_createDirectory$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // bool createDirectory(const std::string &dirPath)
    bool ret = self->createDirectory(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_createDirectory$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */
    std::function<void (bool)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "createDirectory";
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](bool cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_bool(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void createDirectory(const std::string &dirPath, std::function<void (bool)> callback)
    self->createDirectory(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_createDirectory(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2))) {
            // bool createDirectory(const std::string &dirPath)
            return _olua_fun_cocos2d_FileUtils_createDirectory$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_callback(L, 3, "std.function"))) {
            // void createDirectory(const std::string &dirPath, std::function<void (bool)> callback)
            return _olua_fun_cocos2d_FileUtils_createDirectory$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::createDirectory' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_destroyInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static void destroyInstance()
    cocos2d::FileUtils::destroyInstance();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_fullPathForFilename(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // std::string fullPathForFilename(const std::string &filename)
    std::string ret = self->fullPathForFilename(arg1);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_fullPathFromRelativeFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */
    std::string arg2;       /** relativeFile */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // std::string fullPathFromRelativeFile(const std::string &filename, const std::string &relativeFile)
    std::string ret = self->fullPathFromRelativeFile(arg1, arg2);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getContents(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::ResizableBuffer *arg2 = nullptr;       /** buffer */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.ResizableBuffer");

    // cocos2d::FileUtils::Status getContents(const std::string &filename, cocos2d::ResizableBuffer *buffer)
    cocos2d::FileUtils::Status ret = self->getContents(arg1, arg2);
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getDataFromFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Data getDataFromFile(const std::string &filename)
    cocos2d::Data ret = self->getDataFromFile(arg1);
    int num_ret = olua_push_cocos2d_Data(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getDataFromFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */
    std::function<void (cocos2d::Data)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "DataFromFile";
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Data cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            size_t last = olua_push_objpool(L);
            olua_enable_objpool(L);
            olua_push_cocos2d_Data(L, cb_arg1);
            olua_disable_objpool(L);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            //pop stack value
            olua_pop_objpool(L, last);
            lua_settop(L, top);
        }
    };

    // void getDataFromFile(const std::string &filename, std::function<void (cocos2d::Data)> callback)
    self->getDataFromFile(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_getDataFromFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2))) {
            // cocos2d::Data getDataFromFile(const std::string &filename)
            return _olua_fun_cocos2d_FileUtils_getDataFromFile$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_callback(L, 3, "std.function"))) {
            // void getDataFromFile(const std::string &filename, std::function<void (cocos2d::Data)> callback)
            return _olua_fun_cocos2d_FileUtils_getDataFromFile$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::getDataFromFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_getDefaultResourceRootPath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FileUtils");

    // const std::string getDefaultResourceRootPath()
    const std::string ret = self->getDefaultResourceRootPath();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getFileDataFromZip$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** zipFilePath */
    std::string arg2;       /** filename */
    ssize_t *arg3 = nullptr;       /** size */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_pointer(L, 4, &arg3, "olua.ssize_t");

    // unsigned char *getFileDataFromZip(const std::string &zipFilePath, const std::string &filename, ssize_t *size)
    unsigned char *ret = self->getFileDataFromZip(arg1, arg2, arg3);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getFileDataFromZip$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *arg1 = nullptr;       /** obj */
    std::string arg2;       /** zipPath */
    std::string arg3;       /** name */

    olua_check_object(L, 1, &arg1, "cc.FileUtils");
    olua_check_string(L, 2, &arg2);
    olua_check_string(L, 3, &arg3);

    // @extend(cocos2d::FileUtilsExtend) static cocos2d::Data getFileDataFromZip(cocos2d::FileUtils *obj, const std::string &zipPath, const std::string &name)
    cocos2d::Data ret = cocos2d::FileUtilsExtend::getFileDataFromZip(arg1, arg2, arg3);
    int num_ret = olua_push_cocos2d_Data(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getFileDataFromZip(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3))) {
            // @extend(cocos2d::FileUtilsExtend) static cocos2d::Data getFileDataFromZip(cocos2d::FileUtils *obj, const std::string &zipPath, const std::string &name)
            return _olua_fun_cocos2d_FileUtils_getFileDataFromZip$2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_pointer(L, 4, "olua.ssize_t"))) {
            // unsigned char *getFileDataFromZip(const std::string &zipFilePath, const std::string &filename, ssize_t *size)
            return _olua_fun_cocos2d_FileUtils_getFileDataFromZip$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::getFileDataFromZip' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_getFileExtension(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filePath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // std::string getFileExtension(const std::string &filePath)
    std::string ret = self->getFileExtension(arg1);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getFileSize$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filepath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // long getFileSize(const std::string &filepath)
    long ret = self->getFileSize(arg1);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getFileSize$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filepath */
    std::function<void (long)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "FileSize";
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](long cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_integer(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void getFileSize(const std::string &filepath, std::function<void (long)> callback)
    self->getFileSize(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_getFileSize(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2))) {
            // long getFileSize(const std::string &filepath)
            return _olua_fun_cocos2d_FileUtils_getFileSize$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_callback(L, 3, "std.function"))) {
            // void getFileSize(const std::string &filepath, std::function<void (long)> callback)
            return _olua_fun_cocos2d_FileUtils_getFileSize$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::getFileSize' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_getFullPathCache(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FileUtils");

    // const std::unordered_map<std::string, std::string> getFullPathCache()
    const std::unordered_map<std::string, std::string> ret = self->getFullPathCache();
    int num_ret = olua_push_map<std::string, std::string>(L, ret, [L](std::string &arg1, std::string &arg2) {
        olua_push_string(L, arg1);
        olua_push_string(L, arg2);
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::FileUtils *getInstance()
    cocos2d::FileUtils *ret = cocos2d::FileUtils::getInstance();
    int num_ret = olua_push_object(L, ret, "cc.FileUtils");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getNewFilename(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // std::string getNewFilename(const std::string &filename)
    std::string ret = self->getNewFilename(arg1);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getOriginalSearchPaths(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FileUtils");

    // const std::vector<std::string> getOriginalSearchPaths()
    const std::vector<std::string> ret = self->getOriginalSearchPaths();
    int num_ret = olua_push_array<std::string>(L, ret, [L](std::string &arg1) {
        olua_push_string(L, arg1);
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getSearchPaths(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FileUtils");

    // const std::vector<std::string> getSearchPaths()
    const std::vector<std::string> ret = self->getSearchPaths();
    int num_ret = olua_push_array<std::string>(L, ret, [L](std::string &arg1) {
        olua_push_string(L, arg1);
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getSearchResolutionsOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FileUtils");

    // const std::vector<std::string> getSearchResolutionsOrder()
    const std::vector<std::string> ret = self->getSearchResolutionsOrder();
    int num_ret = olua_push_array<std::string>(L, ret, [L](std::string &arg1) {
        olua_push_string(L, arg1);
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getStringFromFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // std::string getStringFromFile(const std::string &filename)
    std::string ret = self->getStringFromFile(arg1);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getStringFromFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */
    std::function<void (std::string)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "StringFromFile";
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](std::string cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_string(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void getStringFromFile(const std::string &path, std::function<void (std::string)> callback)
    self->getStringFromFile(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_getStringFromFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2))) {
            // std::string getStringFromFile(const std::string &filename)
            return _olua_fun_cocos2d_FileUtils_getStringFromFile$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_callback(L, 3, "std.function"))) {
            // void getStringFromFile(const std::string &path, std::function<void (std::string)> callback)
            return _olua_fun_cocos2d_FileUtils_getStringFromFile$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::getStringFromFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_getSuitableFOpen(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filenameUtf8 */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // std::string getSuitableFOpen(const std::string &filenameUtf8)
    std::string ret = self->getSuitableFOpen(arg1);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getValueMapFromData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    const char *arg1 = nullptr;       /** filedata */
    int arg2 = 0;       /** filesize */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // cocos2d::ValueMap getValueMapFromData(const char *filedata, int filesize)
    cocos2d::ValueMap ret = self->getValueMapFromData(arg1, arg2);
    int num_ret = olua_push_cocos2d_ValueMap(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getValueMapFromFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // cocos2d::ValueMap getValueMapFromFile(const std::string &filename)
    cocos2d::ValueMap ret = self->getValueMapFromFile(arg1);
    int num_ret = olua_push_cocos2d_ValueMap(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getValueVectorFromFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // cocos2d::ValueVector getValueVectorFromFile(const std::string &filename)
    cocos2d::ValueVector ret = self->getValueVectorFromFile(arg1);
    int num_ret = olua_push_cocos2d_ValueVector(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_getWritablePath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FileUtils");

    // std::string getWritablePath()
    std::string ret = self->getWritablePath();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_isAbsolutePath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // bool isAbsolutePath(const std::string &path)
    bool ret = self->isAbsolutePath(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_isDirectoryExist$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // bool isDirectoryExist(const std::string &dirPath)
    bool ret = self->isDirectoryExist(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_isDirectoryExist$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** fullPath */
    std::function<void (bool)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "isDirectoryExist";
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](bool cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_bool(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void isDirectoryExist(const std::string &fullPath, std::function<void (bool)> callback)
    self->isDirectoryExist(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_isDirectoryExist(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2))) {
            // bool isDirectoryExist(const std::string &dirPath)
            return _olua_fun_cocos2d_FileUtils_isDirectoryExist$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_callback(L, 3, "std.function"))) {
            // void isDirectoryExist(const std::string &fullPath, std::function<void (bool)> callback)
            return _olua_fun_cocos2d_FileUtils_isDirectoryExist$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::isDirectoryExist' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_isFileExist$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // bool isFileExist(const std::string &filename)
    bool ret = self->isFileExist(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_isFileExist$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */
    std::function<void (bool)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "isFileExist";
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](bool cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_bool(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void isFileExist(const std::string &filename, std::function<void (bool)> callback)
    self->isFileExist(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_isFileExist(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2))) {
            // bool isFileExist(const std::string &filename)
            return _olua_fun_cocos2d_FileUtils_isFileExist$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_callback(L, 3, "std.function"))) {
            // void isFileExist(const std::string &filename, std::function<void (bool)> callback)
            return _olua_fun_cocos2d_FileUtils_isFileExist$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::isFileExist' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_isPopupNotify(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FileUtils");

    // bool isPopupNotify()
    bool ret = self->isPopupNotify();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_listFiles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // std::vector<std::string> listFiles(const std::string &dirPath)
    std::vector<std::string> ret = self->listFiles(arg1);
    int num_ret = olua_push_array<std::string>(L, ret, [L](std::string &arg1) {
        olua_push_string(L, arg1);
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_listFilesAsync(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */
    std::function<void (std::vector<std::string>)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "listFilesAsync";
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](std::vector<std::string> cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            size_t last = olua_push_objpool(L);
            olua_enable_objpool(L);
            olua_push_array<std::string>(L, cb_arg1, [L](std::string &arg1) {
                olua_push_string(L, arg1);
            });
            olua_disable_objpool(L);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            //pop stack value
            olua_pop_objpool(L, last);
            lua_settop(L, top);
        }
    };

    // void listFilesAsync(const std::string &dirPath, std::function<void (std::vector<std::string>)> callback)
    self->listFilesAsync(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_listFilesRecursively(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */
    std::vector<std::string> *arg2 = nullptr;       /** files */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_pointer(L, 3, &arg2, "cc.types.VectorString");

    // void listFilesRecursively(const std::string &dirPath, std::vector<std::string> *files)
    self->listFilesRecursively(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_listFilesRecursivelyAsync(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */
    std::function<void (std::vector<std::string>)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "listFilesRecursivelyAsync";
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](std::vector<std::string> cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            size_t last = olua_push_objpool(L);
            olua_enable_objpool(L);
            olua_push_array<std::string>(L, cb_arg1, [L](std::string &arg1) {
                olua_push_string(L, arg1);
            });
            olua_disable_objpool(L);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            //pop stack value
            olua_pop_objpool(L, last);
            lua_settop(L, top);
        }
    };

    // void listFilesRecursivelyAsync(const std::string &dirPath, std::function<void (std::vector<std::string>)> callback)
    self->listFilesRecursivelyAsync(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_loadFilenameLookupDictionaryFromFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // void loadFilenameLookupDictionaryFromFile(const std::string &filename)
    self->loadFilenameLookupDictionaryFromFile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_purgeCachedEntries(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FileUtils");

    // void purgeCachedEntries()
    self->purgeCachedEntries();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_removeDirectory$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // bool removeDirectory(const std::string &dirPath)
    bool ret = self->removeDirectory(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_removeDirectory$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dirPath */
    std::function<void (bool)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "removeDirectory";
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](bool cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_bool(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void removeDirectory(const std::string &dirPath, std::function<void (bool)> callback)
    self->removeDirectory(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_removeDirectory(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2))) {
            // bool removeDirectory(const std::string &dirPath)
            return _olua_fun_cocos2d_FileUtils_removeDirectory$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_callback(L, 3, "std.function"))) {
            // void removeDirectory(const std::string &dirPath, std::function<void (bool)> callback)
            return _olua_fun_cocos2d_FileUtils_removeDirectory$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::removeDirectory' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_removeFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filepath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // bool removeFile(const std::string &filepath)
    bool ret = self->removeFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_removeFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** filepath */
    std::function<void (bool)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "removeFile";
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](bool cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_bool(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void removeFile(const std::string &filepath, std::function<void (bool)> callback)
    self->removeFile(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_removeFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2))) {
            // bool removeFile(const std::string &filepath)
            return _olua_fun_cocos2d_FileUtils_removeFile$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_callback(L, 3, "std.function"))) {
            // void removeFile(const std::string &filepath, std::function<void (bool)> callback)
            return _olua_fun_cocos2d_FileUtils_removeFile$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::removeFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_renameFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */
    std::string arg2;       /** oldname */
    std::string arg3;       /** name */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_string(L, 4, &arg3);

    // bool renameFile(const std::string &path, const std::string &oldname, const std::string &name)
    bool ret = self->renameFile(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_renameFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */
    std::string arg2;       /** oldname */
    std::string arg3;       /** name */
    std::function<void (bool)> arg4;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_string(L, 4, &arg3);
    olua_check_callback(L, 5, &arg4, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "renameFile";
    std::string cb_name = olua_setcallback(L, cb_store, 5, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg4 = [cb_store, cb_name, cb_ctx /*, ML */](bool cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_bool(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void renameFile(const std::string &path, const std::string &oldname, const std::string &name, std::function<void (bool)> callback)
    self->renameFile(arg1, arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_renameFile$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** oldfullpath */
    std::string arg2;       /** newfullpath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // bool renameFile(const std::string &oldfullpath, const std::string &newfullpath)
    bool ret = self->renameFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_renameFile$4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** oldfullpath */
    std::string arg2;       /** newfullpath */
    std::function<void (bool)> arg3;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_callback(L, 4, &arg3, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "renameFile";
    std::string cb_name = olua_setcallback(L, cb_store, 4, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg3 = [cb_store, cb_name, cb_ctx /*, ML */](bool cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_bool(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void renameFile(const std::string &oldfullpath, const std::string &newfullpath, std::function<void (bool)> callback)
    self->renameFile(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_renameFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3))) {
            // bool renameFile(const std::string &oldfullpath, const std::string &newfullpath)
            return _olua_fun_cocos2d_FileUtils_renameFile$3(L);
        // }
    }

    if (num_args == 4) {
        if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_string(L, 4))) {
            // bool renameFile(const std::string &path, const std::string &oldname, const std::string &name)
            return _olua_fun_cocos2d_FileUtils_renameFile$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_callback(L, 4, "std.function"))) {
            // void renameFile(const std::string &oldfullpath, const std::string &newfullpath, std::function<void (bool)> callback)
            return _olua_fun_cocos2d_FileUtils_renameFile$4(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_string(L, 4)) && (olua_is_callback(L, 5, "std.function"))) {
            // void renameFile(const std::string &path, const std::string &oldname, const std::string &name, std::function<void (bool)> callback)
            return _olua_fun_cocos2d_FileUtils_renameFile$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::renameFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_setDefaultResourceRootPath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** path */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // void setDefaultResourceRootPath(const std::string &path)
    self->setDefaultResourceRootPath(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_setDelegate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *arg1 = nullptr;       /** delegate */

    olua_check_object(L, 1, &arg1, "cc.FileUtils");

    // static void setDelegate(cocos2d::FileUtils *delegate)
    cocos2d::FileUtils::setDelegate(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_setFilenameLookupDictionary(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueMap arg1;       /** filenameLookupDict */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setFilenameLookupDictionary(const cocos2d::ValueMap &filenameLookupDict)
    self->setFilenameLookupDictionary(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_setPopupNotify(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    bool arg1 = false;       /** notify */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_bool(L, 2, &arg1);

    // void setPopupNotify(bool notify)
    self->setPopupNotify(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_setSearchPaths(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::vector<std::string> arg1;       /** searchPaths */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_array<std::string>(L, 2, arg1, [L](std::string *arg1) {
        olua_check_string(L, -1, arg1);
    });

    // void setSearchPaths(const std::vector<std::string> &searchPaths)
    self->setSearchPaths(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_setSearchResolutionsOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::vector<std::string> arg1;       /** searchResolutionsOrder */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_array<std::string>(L, 2, arg1, [L](std::string *arg1) {
        olua_check_string(L, -1, arg1);
    });

    // void setSearchResolutionsOrder(const std::vector<std::string> &searchResolutionsOrder)
    self->setSearchResolutionsOrder(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_setWritablePath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** writablePath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);

    // void setWritablePath(const std::string &writablePath)
    self->setWritablePath(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_writeDataToFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::Data arg1;       /** data */
    std::string arg2;       /** fullPath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_cocos2d_Data(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // bool writeDataToFile(const cocos2d::Data &data, const std::string &fullPath)
    bool ret = self->writeDataToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_writeDataToFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::Data arg1;       /** data */
    std::string arg2;       /** fullPath */
    std::function<void (bool)> arg3;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_cocos2d_Data(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_callback(L, 4, &arg3, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "writeDataToFile";
    std::string cb_name = olua_setcallback(L, cb_store, 4, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg3 = [cb_store, cb_name, cb_ctx /*, ML */](bool cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_bool(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void writeDataToFile(cocos2d::Data data, const std::string &fullPath, std::function<void (bool)> callback)
    self->writeDataToFile(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_writeDataToFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_cocos2d_Data(L, 2)) && (olua_is_string(L, 3))) {
            // bool writeDataToFile(const cocos2d::Data &data, const std::string &fullPath)
            return _olua_fun_cocos2d_FileUtils_writeDataToFile$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_cocos2d_Data(L, 2)) && (olua_is_string(L, 3)) && (olua_is_callback(L, 4, "std.function"))) {
            // void writeDataToFile(cocos2d::Data data, const std::string &fullPath, std::function<void (bool)> callback)
            return _olua_fun_cocos2d_FileUtils_writeDataToFile$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::writeDataToFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_writeStringToFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dataStr */
    std::string arg2;       /** fullPath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // bool writeStringToFile(const std::string &dataStr, const std::string &fullPath)
    bool ret = self->writeStringToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_writeStringToFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    std::string arg1;       /** dataStr */
    std::string arg2;       /** fullPath */
    std::function<void (bool)> arg3;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_callback(L, 4, &arg3, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "writeStringToFile";
    std::string cb_name = olua_setcallback(L, cb_store, 4, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg3 = [cb_store, cb_name, cb_ctx /*, ML */](bool cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_bool(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void writeStringToFile(std::string dataStr, const std::string &fullPath, std::function<void (bool)> callback)
    self->writeStringToFile(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_writeStringToFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3))) {
            // bool writeStringToFile(const std::string &dataStr, const std::string &fullPath)
            return _olua_fun_cocos2d_FileUtils_writeStringToFile$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_callback(L, 4, "std.function"))) {
            // void writeStringToFile(std::string dataStr, const std::string &fullPath, std::function<void (bool)> callback)
            return _olua_fun_cocos2d_FileUtils_writeStringToFile$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::writeStringToFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_writeToFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueMap arg1;       /** dict */
    std::string arg2;       /** fullPath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // bool writeToFile(const cocos2d::ValueMap &dict, const std::string &fullPath)
    bool ret = self->writeToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_writeValueMapToFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueMap arg1;       /** dict */
    std::string arg2;       /** fullPath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // bool writeValueMapToFile(const cocos2d::ValueMap &dict, const std::string &fullPath)
    bool ret = self->writeValueMapToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_writeValueMapToFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueMap arg1;       /** dict */
    std::string arg2;       /** fullPath */
    std::function<void (bool)> arg3;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_callback(L, 4, &arg3, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "writeValueMapToFile";
    std::string cb_name = olua_setcallback(L, cb_store, 4, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg3 = [cb_store, cb_name, cb_ctx /*, ML */](bool cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_bool(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void writeValueMapToFile(cocos2d::ValueMap dict, const std::string &fullPath, std::function<void (bool)> callback)
    self->writeValueMapToFile(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_writeValueMapToFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_cocos2d_ValueMap(L, 2)) && (olua_is_string(L, 3))) {
            // bool writeValueMapToFile(const cocos2d::ValueMap &dict, const std::string &fullPath)
            return _olua_fun_cocos2d_FileUtils_writeValueMapToFile$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_cocos2d_ValueMap(L, 2)) && (olua_is_string(L, 3)) && (olua_is_callback(L, 4, "std.function"))) {
            // void writeValueMapToFile(cocos2d::ValueMap dict, const std::string &fullPath, std::function<void (bool)> callback)
            return _olua_fun_cocos2d_FileUtils_writeValueMapToFile$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::writeValueMapToFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_writeValueVectorToFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueVector arg1;       /** vecData */
    std::string arg2;       /** fullPath */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_cocos2d_ValueVector(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // bool writeValueVectorToFile(const cocos2d::ValueVector &vecData, const std::string &fullPath)
    bool ret = self->writeValueVectorToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FileUtils_writeValueVectorToFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FileUtils *self = nullptr;
    cocos2d::ValueVector arg1;       /** vecData */
    std::string arg2;       /** fullPath */
    std::function<void (bool)> arg3;       /** callback */

    olua_to_object(L, 1, &self, "cc.FileUtils");
    olua_check_cocos2d_ValueVector(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_callback(L, 4, &arg3, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "writeValueVectorToFile";
    std::string cb_name = olua_setcallback(L, cb_store, 4, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg3 = [cb_store, cb_name, cb_ctx /*, ML */](bool cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_bool(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void writeValueVectorToFile(cocos2d::ValueVector vecData, const std::string &fullPath, std::function<void (bool)> callback)
    self->writeValueVectorToFile(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FileUtils_writeValueVectorToFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_cocos2d_ValueVector(L, 2)) && (olua_is_string(L, 3))) {
            // bool writeValueVectorToFile(const cocos2d::ValueVector &vecData, const std::string &fullPath)
            return _olua_fun_cocos2d_FileUtils_writeValueVectorToFile$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.FileUtils")) && (olua_is_cocos2d_ValueVector(L, 2)) && (olua_is_string(L, 3)) && (olua_is_callback(L, 4, "std.function"))) {
            // void writeValueVectorToFile(cocos2d::ValueVector vecData, const std::string &fullPath, std::function<void (bool)> callback)
            return _olua_fun_cocos2d_FileUtils_writeValueVectorToFile$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FileUtils::writeValueVectorToFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_FileUtils(lua_State *L)
{
    oluacls_class<cocos2d::FileUtils>(L, "cc.FileUtils");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_FileUtils___gc);
    oluacls_func(L, "addSearchPath", _olua_fun_cocos2d_FileUtils_addSearchPath);
    oluacls_func(L, "addSearchResolutionsOrder", _olua_fun_cocos2d_FileUtils_addSearchResolutionsOrder);
    oluacls_func(L, "createDirectory", _olua_fun_cocos2d_FileUtils_createDirectory);
    oluacls_func(L, "destroyInstance", _olua_fun_cocos2d_FileUtils_destroyInstance);
    oluacls_func(L, "fullPathForFilename", _olua_fun_cocos2d_FileUtils_fullPathForFilename);
    oluacls_func(L, "fullPathFromRelativeFile", _olua_fun_cocos2d_FileUtils_fullPathFromRelativeFile);
    oluacls_func(L, "getContents", _olua_fun_cocos2d_FileUtils_getContents);
    oluacls_func(L, "getDataFromFile", _olua_fun_cocos2d_FileUtils_getDataFromFile);
    oluacls_func(L, "getDefaultResourceRootPath", _olua_fun_cocos2d_FileUtils_getDefaultResourceRootPath);
    oluacls_func(L, "getFileDataFromZip", _olua_fun_cocos2d_FileUtils_getFileDataFromZip);
    oluacls_func(L, "getFileExtension", _olua_fun_cocos2d_FileUtils_getFileExtension);
    oluacls_func(L, "getFileSize", _olua_fun_cocos2d_FileUtils_getFileSize);
    oluacls_func(L, "getFullPathCache", _olua_fun_cocos2d_FileUtils_getFullPathCache);
    oluacls_func(L, "getInstance", _olua_fun_cocos2d_FileUtils_getInstance);
    oluacls_func(L, "getNewFilename", _olua_fun_cocos2d_FileUtils_getNewFilename);
    oluacls_func(L, "getOriginalSearchPaths", _olua_fun_cocos2d_FileUtils_getOriginalSearchPaths);
    oluacls_func(L, "getSearchPaths", _olua_fun_cocos2d_FileUtils_getSearchPaths);
    oluacls_func(L, "getSearchResolutionsOrder", _olua_fun_cocos2d_FileUtils_getSearchResolutionsOrder);
    oluacls_func(L, "getStringFromFile", _olua_fun_cocos2d_FileUtils_getStringFromFile);
    oluacls_func(L, "getSuitableFOpen", _olua_fun_cocos2d_FileUtils_getSuitableFOpen);
    oluacls_func(L, "getValueMapFromData", _olua_fun_cocos2d_FileUtils_getValueMapFromData);
    oluacls_func(L, "getValueMapFromFile", _olua_fun_cocos2d_FileUtils_getValueMapFromFile);
    oluacls_func(L, "getValueVectorFromFile", _olua_fun_cocos2d_FileUtils_getValueVectorFromFile);
    oluacls_func(L, "getWritablePath", _olua_fun_cocos2d_FileUtils_getWritablePath);
    oluacls_func(L, "isAbsolutePath", _olua_fun_cocos2d_FileUtils_isAbsolutePath);
    oluacls_func(L, "isDirectoryExist", _olua_fun_cocos2d_FileUtils_isDirectoryExist);
    oluacls_func(L, "isFileExist", _olua_fun_cocos2d_FileUtils_isFileExist);
    oluacls_func(L, "isPopupNotify", _olua_fun_cocos2d_FileUtils_isPopupNotify);
    oluacls_func(L, "listFiles", _olua_fun_cocos2d_FileUtils_listFiles);
    oluacls_func(L, "listFilesAsync", _olua_fun_cocos2d_FileUtils_listFilesAsync);
    oluacls_func(L, "listFilesRecursively", _olua_fun_cocos2d_FileUtils_listFilesRecursively);
    oluacls_func(L, "listFilesRecursivelyAsync", _olua_fun_cocos2d_FileUtils_listFilesRecursivelyAsync);
    oluacls_func(L, "loadFilenameLookupDictionaryFromFile", _olua_fun_cocos2d_FileUtils_loadFilenameLookupDictionaryFromFile);
    oluacls_func(L, "purgeCachedEntries", _olua_fun_cocos2d_FileUtils_purgeCachedEntries);
    oluacls_func(L, "removeDirectory", _olua_fun_cocos2d_FileUtils_removeDirectory);
    oluacls_func(L, "removeFile", _olua_fun_cocos2d_FileUtils_removeFile);
    oluacls_func(L, "renameFile", _olua_fun_cocos2d_FileUtils_renameFile);
    oluacls_func(L, "setDefaultResourceRootPath", _olua_fun_cocos2d_FileUtils_setDefaultResourceRootPath);
    oluacls_func(L, "setDelegate", _olua_fun_cocos2d_FileUtils_setDelegate);
    oluacls_func(L, "setFilenameLookupDictionary", _olua_fun_cocos2d_FileUtils_setFilenameLookupDictionary);
    oluacls_func(L, "setPopupNotify", _olua_fun_cocos2d_FileUtils_setPopupNotify);
    oluacls_func(L, "setSearchPaths", _olua_fun_cocos2d_FileUtils_setSearchPaths);
    oluacls_func(L, "setSearchResolutionsOrder", _olua_fun_cocos2d_FileUtils_setSearchResolutionsOrder);
    oluacls_func(L, "setWritablePath", _olua_fun_cocos2d_FileUtils_setWritablePath);
    oluacls_func(L, "writeDataToFile", _olua_fun_cocos2d_FileUtils_writeDataToFile);
    oluacls_func(L, "writeStringToFile", _olua_fun_cocos2d_FileUtils_writeStringToFile);
    oluacls_func(L, "writeToFile", _olua_fun_cocos2d_FileUtils_writeToFile);
    oluacls_func(L, "writeValueMapToFile", _olua_fun_cocos2d_FileUtils_writeValueMapToFile);
    oluacls_func(L, "writeValueVectorToFile", _olua_fun_cocos2d_FileUtils_writeValueVectorToFile);
    oluacls_prop(L, "defaultResourceRootPath", _olua_fun_cocos2d_FileUtils_getDefaultResourceRootPath, _olua_fun_cocos2d_FileUtils_setDefaultResourceRootPath);
    oluacls_prop(L, "fullPathCache", _olua_fun_cocos2d_FileUtils_getFullPathCache, nullptr);
    oluacls_prop(L, "instance", _olua_fun_cocos2d_FileUtils_getInstance, nullptr);
    oluacls_prop(L, "originalSearchPaths", _olua_fun_cocos2d_FileUtils_getOriginalSearchPaths, nullptr);
    oluacls_prop(L, "popupNotify", _olua_fun_cocos2d_FileUtils_isPopupNotify, _olua_fun_cocos2d_FileUtils_setPopupNotify);
    oluacls_prop(L, "searchPaths", _olua_fun_cocos2d_FileUtils_getSearchPaths, _olua_fun_cocos2d_FileUtils_setSearchPaths);
    oluacls_prop(L, "searchResolutionsOrder", _olua_fun_cocos2d_FileUtils_getSearchResolutionsOrder, _olua_fun_cocos2d_FileUtils_setSearchResolutionsOrder);
    oluacls_prop(L, "writablePath", _olua_fun_cocos2d_FileUtils_getWritablePath, _olua_fun_cocos2d_FileUtils_setWritablePath);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_FileUtils(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.FileUtils")) {
        luaL_error(L, "class not found: cocos2d::FileUtils");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_ResolutionPolicy(lua_State *L)
{
    oluacls_class<ResolutionPolicy>(L, "cc.ResolutionPolicy");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "EXACT_FIT", (lua_Integer)ResolutionPolicy::EXACT_FIT);
    oluacls_enum(L, "FIXED_HEIGHT", (lua_Integer)ResolutionPolicy::FIXED_HEIGHT);
    oluacls_enum(L, "FIXED_WIDTH", (lua_Integer)ResolutionPolicy::FIXED_WIDTH);
    oluacls_enum(L, "NO_BORDER", (lua_Integer)ResolutionPolicy::NO_BORDER);
    oluacls_enum(L, "SHOW_ALL", (lua_Integer)ResolutionPolicy::SHOW_ALL);
    oluacls_enum(L, "UNKNOWN", (lua_Integer)ResolutionPolicy::UNKNOWN);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ResolutionPolicy(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ResolutionPolicy")) {
        luaL_error(L, "class not found: ResolutionPolicy");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_GLView_end_(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // void end()
    self->end();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_getAllTouches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // std::vector<cocos2d::Touch *> getAllTouches()
    std::vector<cocos2d::Touch *> ret = self->getAllTouches();
    int num_ret = olua_push_array<cocos2d::Touch *>(L, ret, [L](cocos2d::Touch *arg1) {
        olua_push_object(L, arg1, "cc.Touch");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getContentScaleFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // float getContentScaleFactor()
    float ret = self->getContentScaleFactor();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getDesignResolutionSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // const cocos2d::Size &getDesignResolutionSize()
    const cocos2d::Size &ret = self->getDesignResolutionSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getFrameSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // cocos2d::Size getFrameSize()
    cocos2d::Size ret = self->getFrameSize();
    int num_ret = olua_copy_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getFrameZoomFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // float getFrameZoomFactor()
    float ret = self->getFrameZoomFactor();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getGLContextAttrs(lua_State *L)
{
    olua_startinvoke(L);

    // static GLContextAttrs getGLContextAttrs()
    GLContextAttrs ret = cocos2d::GLView::getGLContextAttrs();
    int num_ret = olua_copy_object(L, ret, "cc.GLContextAttrs");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getResolutionPolicy(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // ResolutionPolicy getResolutionPolicy()
    ResolutionPolicy ret = self->getResolutionPolicy();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getRetinaFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // int getRetinaFactor()
    int ret = self->getRetinaFactor();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getSafeAreaRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // cocos2d::Rect getSafeAreaRect()
    cocos2d::Rect ret = self->getSafeAreaRect();
    int num_ret = olua_copy_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getScaleX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // float getScaleX()
    float ret = self->getScaleX();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getScaleY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // float getScaleY()
    float ret = self->getScaleY();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getScissorRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // cocos2d::Rect getScissorRect()
    cocos2d::Rect ret = self->getScissorRect();
    int num_ret = olua_copy_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getViewName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // const std::string &getViewName()
    const std::string &ret = self->getViewName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getViewPortRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // const cocos2d::Rect &getViewPortRect()
    const cocos2d::Rect &ret = self->getViewPortRect();
    int num_ret = olua_push_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getVisibleOrigin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // cocos2d::Vec2 getVisibleOrigin()
    cocos2d::Vec2 ret = self->getVisibleOrigin();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getVisibleRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // cocos2d::Rect getVisibleRect()
    cocos2d::Rect ret = self->getVisibleRect();
    int num_ret = olua_copy_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_getVisibleSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // cocos2d::Size getVisibleSize()
    cocos2d::Size ret = self->getVisibleSize();
    int num_ret = olua_copy_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_isOpenGLReady(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // bool isOpenGLReady()
    bool ret = self->isOpenGLReady();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_isRetinaDisplay(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // bool isRetinaDisplay()
    bool ret = self->isRetinaDisplay();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_isScissorEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // bool isScissorEnabled()
    bool ret = self->isScissorEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_pollEvents(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // void pollEvents()
    self->pollEvents();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_renderScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;       /** scene */
    cocos2d::Renderer *arg2 = nullptr;       /** renderer */

    olua_to_object(L, 1, &self, "cc.GLView");
    olua_check_object(L, 2, &arg1, "cc.Scene");
    olua_check_object(L, 3, &arg2, "cc.Renderer");

    // void renderScene(cocos2d::Scene *scene, cocos2d::Renderer *renderer)
    self->renderScene(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setContentScaleFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    float arg1 = 0;       /** arg1 */

    olua_to_object(L, 1, &self, "cc.GLView");
    olua_check_number(L, 2, &arg1);

    // bool setContentScaleFactor(float arg1)
    bool ret = self->setContentScaleFactor(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_GLView_setCursorVisible(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    bool arg1 = false;       /** arg1 */

    olua_to_object(L, 1, &self, "cc.GLView");
    olua_check_bool(L, 2, &arg1);

    // void setCursorVisible(bool arg1)
    self->setCursorVisible(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setDefaultIcon(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // void setDefaultIcon()
    self->setDefaultIcon();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setDesignResolutionSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    float arg1 = 0;       /** width */
    float arg2 = 0;       /** height */
    ResolutionPolicy arg3 = (ResolutionPolicy)0;       /** resolutionPolicy */

    olua_to_object(L, 1, &self, "cc.GLView");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_enum(L, 4, &arg3);

    // void setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy)
    self->setDesignResolutionSize(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setFrameSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    float arg1 = 0;       /** width */
    float arg2 = 0;       /** height */

    olua_to_object(L, 1, &self, "cc.GLView");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setFrameSize(float width, float height)
    self->setFrameSize(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setFrameZoomFactor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    float arg1 = 0;       /** arg1 */

    olua_to_object(L, 1, &self, "cc.GLView");
    olua_check_number(L, 2, &arg1);

    // void setFrameZoomFactor(float arg1)
    self->setFrameZoomFactor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setGLContextAttrs(lua_State *L)
{
    olua_startinvoke(L);

    GLContextAttrs *arg1 = nullptr;       /** glContextAttrs */

    olua_check_object(L, 1, &arg1, "cc.GLContextAttrs");

    // static void setGLContextAttrs(GLContextAttrs &glContextAttrs)
    cocos2d::GLView::setGLContextAttrs(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setIMEKeyboardState(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    bool arg1 = false;       /** open */

    olua_to_object(L, 1, &self, "cc.GLView");
    olua_check_bool(L, 2, &arg1);

    // void setIMEKeyboardState(bool open)
    self->setIMEKeyboardState(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setIcon$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.GLView");
    olua_check_string(L, 2, &arg1);

    // void setIcon(const std::string &filename)
    self->setIcon(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setIcon$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    std::vector<std::string> arg1;       /** filelist */

    olua_to_object(L, 1, &self, "cc.GLView");
    olua_check_array<std::string>(L, 2, arg1, [L](std::string *arg1) {
        olua_check_string(L, -1, arg1);
    });

    // void setIcon(const std::vector<std::string> &filelist)
    self->setIcon(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setIcon(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_object(L, 1, "cc.GLView")) && (olua_is_string(L, 2))) {
            // void setIcon(const std::string &filename)
            return _olua_fun_cocos2d_GLView_setIcon$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.GLView")) && (olua_is_array(L, 2))) {
            // void setIcon(const std::vector<std::string> &filelist)
            return _olua_fun_cocos2d_GLView_setIcon$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::GLView::setIcon' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setScissorInPoints(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    float arg1 = 0;       /** x */
    float arg2 = 0;       /** y */
    float arg3 = 0;       /** w */
    float arg4 = 0;       /** h */

    olua_to_object(L, 1, &self, "cc.GLView");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void setScissorInPoints(float x, float y, float w, float h)
    self->setScissorInPoints(arg1, arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setViewName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    std::string arg1;       /** viewname */

    olua_to_object(L, 1, &self, "cc.GLView");
    olua_check_string(L, 2, &arg1);

    // void setViewName(const std::string &viewname)
    self->setViewName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_setViewPortInPoints(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;
    float arg1 = 0;       /** x */
    float arg2 = 0;       /** y */
    float arg3 = 0;       /** w */
    float arg4 = 0;       /** h */

    olua_to_object(L, 1, &self, "cc.GLView");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void setViewPortInPoints(float x, float y, float w, float h)
    self->setViewPortInPoints(arg1, arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_swapBuffers(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // void swapBuffers()
    self->swapBuffers();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_GLView_windowShouldClose(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::GLView *self = nullptr;

    olua_to_object(L, 1, &self, "cc.GLView");

    // bool windowShouldClose()
    bool ret = self->windowShouldClose();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_GLView(lua_State *L)
{
    oluacls_class<cocos2d::GLView, cocos2d::Ref>(L, "cc.GLView");
    oluacls_func(L, "end_", _olua_fun_cocos2d_GLView_end_);
    oluacls_func(L, "getAllTouches", _olua_fun_cocos2d_GLView_getAllTouches);
    oluacls_func(L, "getContentScaleFactor", _olua_fun_cocos2d_GLView_getContentScaleFactor);
    oluacls_func(L, "getDesignResolutionSize", _olua_fun_cocos2d_GLView_getDesignResolutionSize);
    oluacls_func(L, "getFrameSize", _olua_fun_cocos2d_GLView_getFrameSize);
    oluacls_func(L, "getFrameZoomFactor", _olua_fun_cocos2d_GLView_getFrameZoomFactor);
    oluacls_func(L, "getGLContextAttrs", _olua_fun_cocos2d_GLView_getGLContextAttrs);
    oluacls_func(L, "getResolutionPolicy", _olua_fun_cocos2d_GLView_getResolutionPolicy);
    oluacls_func(L, "getRetinaFactor", _olua_fun_cocos2d_GLView_getRetinaFactor);
    oluacls_func(L, "getSafeAreaRect", _olua_fun_cocos2d_GLView_getSafeAreaRect);
    oluacls_func(L, "getScaleX", _olua_fun_cocos2d_GLView_getScaleX);
    oluacls_func(L, "getScaleY", _olua_fun_cocos2d_GLView_getScaleY);
    oluacls_func(L, "getScissorRect", _olua_fun_cocos2d_GLView_getScissorRect);
    oluacls_func(L, "getViewName", _olua_fun_cocos2d_GLView_getViewName);
    oluacls_func(L, "getViewPortRect", _olua_fun_cocos2d_GLView_getViewPortRect);
    oluacls_func(L, "getVisibleOrigin", _olua_fun_cocos2d_GLView_getVisibleOrigin);
    oluacls_func(L, "getVisibleRect", _olua_fun_cocos2d_GLView_getVisibleRect);
    oluacls_func(L, "getVisibleSize", _olua_fun_cocos2d_GLView_getVisibleSize);
    oluacls_func(L, "isOpenGLReady", _olua_fun_cocos2d_GLView_isOpenGLReady);
    oluacls_func(L, "isRetinaDisplay", _olua_fun_cocos2d_GLView_isRetinaDisplay);
    oluacls_func(L, "isScissorEnabled", _olua_fun_cocos2d_GLView_isScissorEnabled);
    oluacls_func(L, "pollEvents", _olua_fun_cocos2d_GLView_pollEvents);
    oluacls_func(L, "renderScene", _olua_fun_cocos2d_GLView_renderScene);
    oluacls_func(L, "setContentScaleFactor", _olua_fun_cocos2d_GLView_setContentScaleFactor);
    oluacls_func(L, "setCursorVisible", _olua_fun_cocos2d_GLView_setCursorVisible);
    oluacls_func(L, "setDefaultIcon", _olua_fun_cocos2d_GLView_setDefaultIcon);
    oluacls_func(L, "setDesignResolutionSize", _olua_fun_cocos2d_GLView_setDesignResolutionSize);
    oluacls_func(L, "setFrameSize", _olua_fun_cocos2d_GLView_setFrameSize);
    oluacls_func(L, "setFrameZoomFactor", _olua_fun_cocos2d_GLView_setFrameZoomFactor);
    oluacls_func(L, "setGLContextAttrs", _olua_fun_cocos2d_GLView_setGLContextAttrs);
    oluacls_func(L, "setIMEKeyboardState", _olua_fun_cocos2d_GLView_setIMEKeyboardState);
    oluacls_func(L, "setIcon", _olua_fun_cocos2d_GLView_setIcon);
    oluacls_func(L, "setScissorInPoints", _olua_fun_cocos2d_GLView_setScissorInPoints);
    oluacls_func(L, "setViewName", _olua_fun_cocos2d_GLView_setViewName);
    oluacls_func(L, "setViewPortInPoints", _olua_fun_cocos2d_GLView_setViewPortInPoints);
    oluacls_func(L, "swapBuffers", _olua_fun_cocos2d_GLView_swapBuffers);
    oluacls_func(L, "windowShouldClose", _olua_fun_cocos2d_GLView_windowShouldClose);
    oluacls_prop(L, "allTouches", _olua_fun_cocos2d_GLView_getAllTouches, nullptr);
    oluacls_prop(L, "contentScaleFactor", _olua_fun_cocos2d_GLView_getContentScaleFactor, _olua_fun_cocos2d_GLView_setContentScaleFactor);
    oluacls_prop(L, "frameZoomFactor", _olua_fun_cocos2d_GLView_getFrameZoomFactor, _olua_fun_cocos2d_GLView_setFrameZoomFactor);
    oluacls_prop(L, "glContextAttrs", _olua_fun_cocos2d_GLView_getGLContextAttrs, _olua_fun_cocos2d_GLView_setGLContextAttrs);
    oluacls_prop(L, "openGLReady", _olua_fun_cocos2d_GLView_isOpenGLReady, nullptr);
    oluacls_prop(L, "resolutionPolicy", _olua_fun_cocos2d_GLView_getResolutionPolicy, nullptr);
    oluacls_prop(L, "retinaDisplay", _olua_fun_cocos2d_GLView_isRetinaDisplay, nullptr);
    oluacls_prop(L, "retinaFactor", _olua_fun_cocos2d_GLView_getRetinaFactor, nullptr);
    oluacls_prop(L, "safeAreaRect", _olua_fun_cocos2d_GLView_getSafeAreaRect, nullptr);
    oluacls_prop(L, "scaleX", _olua_fun_cocos2d_GLView_getScaleX, nullptr);
    oluacls_prop(L, "scaleY", _olua_fun_cocos2d_GLView_getScaleY, nullptr);
    oluacls_prop(L, "scissorEnabled", _olua_fun_cocos2d_GLView_isScissorEnabled, nullptr);
    oluacls_prop(L, "scissorRect", _olua_fun_cocos2d_GLView_getScissorRect, nullptr);
    oluacls_prop(L, "viewName", _olua_fun_cocos2d_GLView_getViewName, _olua_fun_cocos2d_GLView_setViewName);
    oluacls_prop(L, "viewPortRect", _olua_fun_cocos2d_GLView_getViewPortRect, nullptr);
    oluacls_prop(L, "visibleOrigin", _olua_fun_cocos2d_GLView_getVisibleOrigin, nullptr);
    oluacls_prop(L, "visibleRect", _olua_fun_cocos2d_GLView_getVisibleRect, nullptr);
    oluacls_prop(L, "visibleSize", _olua_fun_cocos2d_GLView_getVisibleSize, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_GLView(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.GLView")) {
        luaL_error(L, "class not found: cocos2d::GLView");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_GLViewImpl(lua_State *L)
{
    oluacls_class<cocos2d::GLViewImpl, cocos2d::GLView>(L, "cc.GLViewImpl");

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_GLViewImpl(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.GLViewImpl")) {
        luaL_error(L, "class not found: cocos2d::GLViewImpl");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_Image_Format(lua_State *L)
{
    oluacls_class<cocos2d::Image::Format>(L, "cc.Image.Format");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "ATITC", (lua_Integer)cocos2d::Image::Format::ATITC);
    oluacls_enum(L, "ETC", (lua_Integer)cocos2d::Image::Format::ETC);
    oluacls_enum(L, "JPG", (lua_Integer)cocos2d::Image::Format::JPG);
    oluacls_enum(L, "PNG", (lua_Integer)cocos2d::Image::Format::PNG);
    oluacls_enum(L, "PVR", (lua_Integer)cocos2d::Image::Format::PVR);
    oluacls_enum(L, "RAW_DATA", (lua_Integer)cocos2d::Image::Format::RAW_DATA);
    oluacls_enum(L, "S3TC", (lua_Integer)cocos2d::Image::Format::S3TC);
    oluacls_enum(L, "TGA", (lua_Integer)cocos2d::Image::Format::TGA);
    oluacls_enum(L, "UNKNOWN", (lua_Integer)cocos2d::Image::Format::UNKNOWN);
    oluacls_enum(L, "WEBP", (lua_Integer)cocos2d::Image::Format::WEBP);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Image_Format(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Image.Format")) {
        luaL_error(L, "class not found: cocos2d::Image::Format");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Image_getBitPerPixel(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // int getBitPerPixel()
    int ret = self->getBitPerPixel();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_getData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // unsigned char *getData()
    unsigned char *ret = self->getData();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_getDataLen(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // ssize_t getDataLen()
    ssize_t ret = self->getDataLen();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_getFilePath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // std::string getFilePath()
    std::string ret = self->getFilePath();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_getFileType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // cocos2d::Image::Format getFileType()
    cocos2d::Image::Format ret = self->getFileType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_getHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // int getHeight()
    int ret = self->getHeight();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_getNumberOfMipmaps(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // int getNumberOfMipmaps()
    int ret = self->getNumberOfMipmaps();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_getPNGPremultipliedAlphaEnabled(lua_State *L)
{
    olua_startinvoke(L);

    // @extend(cocos2d::ImageExtend) static bool getPNGPremultipliedAlphaEnabled()
    bool ret = cocos2d::ImageExtend::getPNGPremultipliedAlphaEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_getPixelFormat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // cocos2d::backend::PixelFormat getPixelFormat()
    cocos2d::backend::PixelFormat ret = self->getPixelFormat();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_getWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // int getWidth()
    int ret = self->getWidth();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_hasAlpha(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // bool hasAlpha()
    bool ret = self->hasAlpha();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_hasPremultipliedAlpha(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // bool hasPremultipliedAlpha()
    bool ret = self->hasPremultipliedAlpha();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_initWithImageData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;
    const unsigned char *arg1 = nullptr;       /** data */
    ssize_t arg2 = 0;       /** dataLen */

    olua_to_object(L, 1, &self, "cc.Image");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // bool initWithImageData(const unsigned char *data, ssize_t dataLen)
    bool ret = self->initWithImageData(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_initWithImageFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;
    std::string arg1;       /** path */

    olua_to_object(L, 1, &self, "cc.Image");
    olua_check_string(L, 2, &arg1);

    // bool initWithImageFile(const std::string &path)
    bool ret = self->initWithImageFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_initWithRawData$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;
    const unsigned char *arg1 = nullptr;       /** data */
    ssize_t arg2 = 0;       /** dataLen */
    int arg3 = 0;       /** width */
    int arg4 = 0;       /** height */
    int arg5 = 0;       /** bitsPerComponent */
    bool arg6 = false;       /** preMulti */

    olua_to_object(L, 1, &self, "cc.Image");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_integer(L, 6, &arg5);
    olua_check_bool(L, 7, &arg6);

    // bool initWithRawData(const unsigned char *data, ssize_t dataLen, int width, int height, int bitsPerComponent, @optional bool preMulti)
    bool ret = self->initWithRawData(arg1, arg2, arg3, arg4, arg5, arg6);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_initWithRawData$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;
    const unsigned char *arg1 = nullptr;       /** data */
    ssize_t arg2 = 0;       /** dataLen */
    int arg3 = 0;       /** width */
    int arg4 = 0;       /** height */
    int arg5 = 0;       /** bitsPerComponent */

    olua_to_object(L, 1, &self, "cc.Image");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_integer(L, 6, &arg5);

    // bool initWithRawData(const unsigned char *data, ssize_t dataLen, int width, int height, int bitsPerComponent)
    bool ret = self->initWithRawData(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_initWithRawData(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.Image")) && (olua_is_string(L, 2)) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4)) && (olua_is_integer(L, 5)) && (olua_is_integer(L, 6))) {
            // bool initWithRawData(const unsigned char *data, ssize_t dataLen, int width, int height, int bitsPerComponent)
            return _olua_fun_cocos2d_Image_initWithRawData$2(L);
        // }
    }

    if (num_args == 7) {
        // if ((olua_is_object(L, 1, "cc.Image")) && (olua_is_string(L, 2)) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4)) && (olua_is_integer(L, 5)) && (olua_is_integer(L, 6)) && (olua_is_bool(L, 7))) {
            // bool initWithRawData(const unsigned char *data, ssize_t dataLen, int width, int height, int bitsPerComponent, @optional bool preMulti)
            return _olua_fun_cocos2d_Image_initWithRawData$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Image::initWithRawData' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Image_isCompressed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // bool isCompressed()
    bool ret = self->isCompressed();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Image()
    cocos2d::Image *ret = new cocos2d::Image();
    int num_ret = olua_push_object(L, ret, "cc.Image");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_premultiplyAlpha(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // void premultiplyAlpha()
    self->premultiplyAlpha();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Image_reversePremultipliedAlpha(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Image");

    // void reversePremultipliedAlpha()
    self->reversePremultipliedAlpha();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Image_saveToFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;
    std::string arg1;       /** filename */
    bool arg2 = false;       /** isToRGB */

    olua_to_object(L, 1, &self, "cc.Image");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // bool saveToFile(const std::string &filename, @optional bool isToRGB)
    bool ret = self->saveToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_saveToFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Image *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.Image");
    olua_check_string(L, 2, &arg1);

    // bool saveToFile(const std::string &filename)
    bool ret = self->saveToFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Image_saveToFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Image")) && (olua_is_string(L, 2))) {
            // bool saveToFile(const std::string &filename)
            return _olua_fun_cocos2d_Image_saveToFile$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Image")) && (olua_is_string(L, 2)) && (olua_is_bool(L, 3))) {
            // bool saveToFile(const std::string &filename, @optional bool isToRGB)
            return _olua_fun_cocos2d_Image_saveToFile$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Image::saveToFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Image_setPNGPremultipliedAlphaEnabled(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** enabled */

    olua_check_bool(L, 1, &arg1);

    // static void setPNGPremultipliedAlphaEnabled(bool enabled)
    cocos2d::Image::setPNGPremultipliedAlphaEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Image_setPVRImagesHavePremultipliedAlpha(lua_State *L)
{
    olua_startinvoke(L);

    bool arg1 = false;       /** haveAlphaPremultiplied */

    olua_check_bool(L, 1, &arg1);

    // static void setPVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)
    cocos2d::Image::setPVRImagesHavePremultipliedAlpha(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Image(lua_State *L)
{
    oluacls_class<cocos2d::Image, cocos2d::Ref>(L, "cc.Image");
    oluacls_func(L, "getBitPerPixel", _olua_fun_cocos2d_Image_getBitPerPixel);
    oluacls_func(L, "getData", _olua_fun_cocos2d_Image_getData);
    oluacls_func(L, "getDataLen", _olua_fun_cocos2d_Image_getDataLen);
    oluacls_func(L, "getFilePath", _olua_fun_cocos2d_Image_getFilePath);
    oluacls_func(L, "getFileType", _olua_fun_cocos2d_Image_getFileType);
    oluacls_func(L, "getHeight", _olua_fun_cocos2d_Image_getHeight);
    oluacls_func(L, "getNumberOfMipmaps", _olua_fun_cocos2d_Image_getNumberOfMipmaps);
    oluacls_func(L, "getPNGPremultipliedAlphaEnabled", _olua_fun_cocos2d_Image_getPNGPremultipliedAlphaEnabled);
    oluacls_func(L, "getPixelFormat", _olua_fun_cocos2d_Image_getPixelFormat);
    oluacls_func(L, "getWidth", _olua_fun_cocos2d_Image_getWidth);
    oluacls_func(L, "hasAlpha", _olua_fun_cocos2d_Image_hasAlpha);
    oluacls_func(L, "hasPremultipliedAlpha", _olua_fun_cocos2d_Image_hasPremultipliedAlpha);
    oluacls_func(L, "initWithImageData", _olua_fun_cocos2d_Image_initWithImageData);
    oluacls_func(L, "initWithImageFile", _olua_fun_cocos2d_Image_initWithImageFile);
    oluacls_func(L, "initWithRawData", _olua_fun_cocos2d_Image_initWithRawData);
    oluacls_func(L, "isCompressed", _olua_fun_cocos2d_Image_isCompressed);
    oluacls_func(L, "new", _olua_fun_cocos2d_Image_new);
    oluacls_func(L, "premultiplyAlpha", _olua_fun_cocos2d_Image_premultiplyAlpha);
    oluacls_func(L, "reversePremultipliedAlpha", _olua_fun_cocos2d_Image_reversePremultipliedAlpha);
    oluacls_func(L, "saveToFile", _olua_fun_cocos2d_Image_saveToFile);
    oluacls_func(L, "setPNGPremultipliedAlphaEnabled", _olua_fun_cocos2d_Image_setPNGPremultipliedAlphaEnabled);
    oluacls_func(L, "setPVRImagesHavePremultipliedAlpha", _olua_fun_cocos2d_Image_setPVRImagesHavePremultipliedAlpha);
    oluacls_prop(L, "bitPerPixel", _olua_fun_cocos2d_Image_getBitPerPixel, nullptr);
    oluacls_prop(L, "compressed", _olua_fun_cocos2d_Image_isCompressed, nullptr);
    oluacls_prop(L, "data", _olua_fun_cocos2d_Image_getData, nullptr);
    oluacls_prop(L, "dataLen", _olua_fun_cocos2d_Image_getDataLen, nullptr);
    oluacls_prop(L, "filePath", _olua_fun_cocos2d_Image_getFilePath, nullptr);
    oluacls_prop(L, "fileType", _olua_fun_cocos2d_Image_getFileType, nullptr);
    oluacls_prop(L, "height", _olua_fun_cocos2d_Image_getHeight, nullptr);
    oluacls_prop(L, "numberOfMipmaps", _olua_fun_cocos2d_Image_getNumberOfMipmaps, nullptr);
    oluacls_prop(L, "pixelFormat", _olua_fun_cocos2d_Image_getPixelFormat, nullptr);
    oluacls_prop(L, "pngPremultipliedAlphaEnabled", _olua_fun_cocos2d_Image_getPNGPremultipliedAlphaEnabled, _olua_fun_cocos2d_Image_setPNGPremultipliedAlphaEnabled);
    oluacls_prop(L, "width", _olua_fun_cocos2d_Image_getWidth, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Image(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Image")) {
        luaL_error(L, "class not found: cocos2d::Image");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_Properties_Type(lua_State *L)
{
    oluacls_class<cocos2d::Properties::Type>(L, "cc.Properties.Type");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "MATRIX", (lua_Integer)cocos2d::Properties::Type::MATRIX);
    oluacls_enum(L, "NONE", (lua_Integer)cocos2d::Properties::Type::NONE);
    oluacls_enum(L, "NUMBER", (lua_Integer)cocos2d::Properties::Type::NUMBER);
    oluacls_enum(L, "STRING", (lua_Integer)cocos2d::Properties::Type::STRING);
    oluacls_enum(L, "VECTOR2", (lua_Integer)cocos2d::Properties::Type::VECTOR2);
    oluacls_enum(L, "VECTOR3", (lua_Integer)cocos2d::Properties::Type::VECTOR3);
    oluacls_enum(L, "VECTOR4", (lua_Integer)cocos2d::Properties::Type::VECTOR4);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Properties_Type(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Properties.Type")) {
        luaL_error(L, "class not found: cocos2d::Properties::Type");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Properties___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Properties *)olua_toobj(L, 1, "cc.Properties");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Properties_createNonRefCounted(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** url */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::Properties *createNonRefCounted(const std::string &url)
    cocos2d::Properties *ret = cocos2d::Properties::createNonRefCounted(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Properties");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_exists(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);

    // bool exists(const char *name)
    bool ret = self->exists(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getBool$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    bool arg2 = false;       /** defaultValue */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // bool getBool(@optional const char *name, @optional bool defaultValue)
    bool ret = self->getBool(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getBool$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Properties");

    // bool getBool()
    bool ret = self->getBool();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getBool$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);

    // bool getBool(@optional const char *name)
    bool ret = self->getBool(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getBool(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // bool getBool()
        return _olua_fun_cocos2d_Properties_getBool$2(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2))) {
            // bool getBool(@optional const char *name)
            return _olua_fun_cocos2d_Properties_getBool$3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2)) && (olua_is_bool(L, 3))) {
            // bool getBool(@optional const char *name, @optional bool defaultValue)
            return _olua_fun_cocos2d_Properties_getBool$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Properties::getBool' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Properties_getColor$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    cocos2d::Vec3 *arg2 = nullptr;       /** out */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Vec3");

    // bool getColor(const char *name, cocos2d::Vec3 *out)
    bool ret = self->getColor(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getColor$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    cocos2d::Vec4 *arg2 = nullptr;       /** out */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Vec4");

    // bool getColor(const char *name, cocos2d::Vec4 *out)
    bool ret = self->getColor(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getColor(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2)) && (olua_is_object(L, 3, "cc.Vec4"))) {
            // bool getColor(const char *name, cocos2d::Vec4 *out)
            return _olua_fun_cocos2d_Properties_getColor$2(L);
        }

        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2)) && (olua_is_object(L, 3, "cc.Vec3"))) {
            // bool getColor(const char *name, cocos2d::Vec3 *out)
            return _olua_fun_cocos2d_Properties_getColor$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Properties::getColor' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Properties_getFloat$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);

    // float getFloat(@optional const char *name)
    float ret = self->getFloat(arg1);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getFloat$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Properties");

    // float getFloat()
    float ret = self->getFloat();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getFloat(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // float getFloat()
        return _olua_fun_cocos2d_Properties_getFloat$2(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2))) {
            // float getFloat(@optional const char *name)
            return _olua_fun_cocos2d_Properties_getFloat$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Properties::getFloat' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Properties_getId(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Properties");

    // const char *getId()
    const char *ret = self->getId();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getInt$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);

    // int getInt(@optional const char *name)
    int ret = self->getInt(arg1);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getInt$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Properties");

    // int getInt()
    int ret = self->getInt();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getInt(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // int getInt()
        return _olua_fun_cocos2d_Properties_getInt$2(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2))) {
            // int getInt(@optional const char *name)
            return _olua_fun_cocos2d_Properties_getInt$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Properties::getInt' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Properties_getLong$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);

    // long getLong(@optional const char *name)
    long ret = self->getLong(arg1);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getLong$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Properties");

    // long getLong()
    long ret = self->getLong();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getLong(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // long getLong()
        return _olua_fun_cocos2d_Properties_getLong$2(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2))) {
            // long getLong(@optional const char *name)
            return _olua_fun_cocos2d_Properties_getLong$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Properties::getLong' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Properties_getMat4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    cocos2d::Mat4 *arg2 = nullptr;       /** out */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Mat4");

    // bool getMat4(const char *name, cocos2d::Mat4 *out)
    bool ret = self->getMat4(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getNamespace$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** id */
    bool arg2 = false;       /** searchNames */
    bool arg3 = false;       /** recurse */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);

    // cocos2d::Properties *getNamespace(const char *id, @optional bool searchNames, @optional bool recurse)
    cocos2d::Properties *ret = self->getNamespace(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.Properties");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getNamespace$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** id */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Properties *getNamespace(const char *id)
    cocos2d::Properties *ret = self->getNamespace(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Properties");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getNamespace$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** id */
    bool arg2 = false;       /** searchNames */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // cocos2d::Properties *getNamespace(const char *id, @optional bool searchNames)
    cocos2d::Properties *ret = self->getNamespace(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.Properties");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getNamespace$4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Properties");

    // const char *getNamespace()
    const char *ret = self->getNamespace();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getNamespace(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // const char *getNamespace()
        return _olua_fun_cocos2d_Properties_getNamespace$4(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2))) {
            // cocos2d::Properties *getNamespace(const char *id)
            return _olua_fun_cocos2d_Properties_getNamespace$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2)) && (olua_is_bool(L, 3))) {
            // cocos2d::Properties *getNamespace(const char *id, @optional bool searchNames)
            return _olua_fun_cocos2d_Properties_getNamespace$3(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2)) && (olua_is_bool(L, 3)) && (olua_is_bool(L, 4))) {
            // cocos2d::Properties *getNamespace(const char *id, @optional bool searchNames, @optional bool recurse)
            return _olua_fun_cocos2d_Properties_getNamespace$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Properties::getNamespace' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Properties_getNextNamespace(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Properties");

    // cocos2d::Properties *getNextNamespace()
    cocos2d::Properties *ret = self->getNextNamespace();
    int num_ret = olua_push_object(L, ret, "cc.Properties");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getNextProperty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Properties");

    // const char *getNextProperty()
    const char *ret = self->getNextProperty();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getPath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    std::string *arg2 = nullptr;       /** path */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_pointer(L, 3, &arg2, "olua.string");

    // bool getPath(const char *name, std::string *path)
    bool ret = self->getPath(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getQuaternionFromAxisAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    cocos2d::Quaternion *arg2 = nullptr;       /** out */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Quaternion");

    // bool getQuaternionFromAxisAngle(const char *name, cocos2d::Quaternion *out)
    bool ret = self->getQuaternionFromAxisAngle(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getString$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    const char *arg2 = nullptr;       /** defaultValue */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // const char *getString(@optional const char *name, @optional const char *defaultValue)
    const char *ret = self->getString(arg1, arg2);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getString$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Properties");

    // const char *getString()
    const char *ret = self->getString();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getString$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);

    // const char *getString(@optional const char *name)
    const char *ret = self->getString(arg1);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getString(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // const char *getString()
        return _olua_fun_cocos2d_Properties_getString$2(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2))) {
            // const char *getString(@optional const char *name)
            return _olua_fun_cocos2d_Properties_getString$3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3))) {
            // const char *getString(@optional const char *name, @optional const char *defaultValue)
            return _olua_fun_cocos2d_Properties_getString$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Properties::getString' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Properties_getType$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Properties::Type getType(@optional const char *name)
    cocos2d::Properties::Type ret = self->getType(arg1);
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getType$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Properties");

    // cocos2d::Properties::Type getType()
    cocos2d::Properties::Type ret = self->getType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getType(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // cocos2d::Properties::Type getType()
        return _olua_fun_cocos2d_Properties_getType$2(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2))) {
            // cocos2d::Properties::Type getType(@optional const char *name)
            return _olua_fun_cocos2d_Properties_getType$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Properties::getType' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Properties_getVariable$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    const char *arg2 = nullptr;       /** defaultValue */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // const char *getVariable(const char *name, @optional const char *defaultValue)
    const char *ret = self->getVariable(arg1, arg2);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getVariable$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);

    // const char *getVariable(const char *name)
    const char *ret = self->getVariable(arg1);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getVariable(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2))) {
            // const char *getVariable(const char *name)
            return _olua_fun_cocos2d_Properties_getVariable$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Properties")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3))) {
            // const char *getVariable(const char *name, @optional const char *defaultValue)
            return _olua_fun_cocos2d_Properties_getVariable$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Properties::getVariable' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Properties_getVec2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    cocos2d::Vec2 *arg2 = nullptr;       /** out */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Vec2");

    // bool getVec2(const char *name, cocos2d::Vec2 *out)
    bool ret = self->getVec2(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getVec3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    cocos2d::Vec3 *arg2 = nullptr;       /** out */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Vec3");

    // bool getVec3(const char *name, cocos2d::Vec3 *out)
    bool ret = self->getVec3(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_getVec4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    cocos2d::Vec4 *arg2 = nullptr;       /** out */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Vec4");

    // bool getVec4(const char *name, cocos2d::Vec4 *out)
    bool ret = self->getVec4(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_parseAxisAngle(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** str */
    cocos2d::Quaternion *arg2 = nullptr;       /** out */

    olua_check_string(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Quaternion");

    // static bool parseAxisAngle(const char *str, cocos2d::Quaternion *out)
    bool ret = cocos2d::Properties::parseAxisAngle(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_parseColor$1(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** str */
    cocos2d::Vec3 *arg2 = nullptr;       /** out */

    olua_check_string(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Vec3");

    // static bool parseColor(const char *str, cocos2d::Vec3 *out)
    bool ret = cocos2d::Properties::parseColor(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_parseColor$2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** str */
    cocos2d::Vec4 *arg2 = nullptr;       /** out */

    olua_check_string(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Vec4");

    // static bool parseColor(const char *str, cocos2d::Vec4 *out)
    bool ret = cocos2d::Properties::parseColor(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_parseColor(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_string(L, 1)) && (olua_is_object(L, 2, "cc.Vec4"))) {
            // static bool parseColor(const char *str, cocos2d::Vec4 *out)
            return _olua_fun_cocos2d_Properties_parseColor$2(L);
        }

        // if ((olua_is_string(L, 1)) && (olua_is_object(L, 2, "cc.Vec3"))) {
            // static bool parseColor(const char *str, cocos2d::Vec3 *out)
            return _olua_fun_cocos2d_Properties_parseColor$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Properties::parseColor' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Properties_parseVec2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** str */
    cocos2d::Vec2 *arg2 = nullptr;       /** out */

    olua_check_string(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Vec2");

    // static bool parseVec2(const char *str, cocos2d::Vec2 *out)
    bool ret = cocos2d::Properties::parseVec2(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_parseVec3(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** str */
    cocos2d::Vec3 *arg2 = nullptr;       /** out */

    olua_check_string(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Vec3");

    // static bool parseVec3(const char *str, cocos2d::Vec3 *out)
    bool ret = cocos2d::Properties::parseVec3(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_parseVec4(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** str */
    cocos2d::Vec4 *arg2 = nullptr;       /** out */

    olua_check_string(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Vec4");

    // static bool parseVec4(const char *str, cocos2d::Vec4 *out)
    bool ret = cocos2d::Properties::parseVec4(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_rewind(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Properties");

    // void rewind()
    self->rewind();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Properties_setString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    const char *arg2 = nullptr;       /** value */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // bool setString(const char *name, const char *value)
    bool ret = self->setString(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Properties_setVariable(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *self = nullptr;
    const char *arg1 = nullptr;       /** name */
    const char *arg2 = nullptr;       /** value */

    olua_to_object(L, 1, &self, "cc.Properties");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // void setVariable(const char *name, const char *value)
    self->setVariable(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Properties(lua_State *L)
{
    oluacls_class<cocos2d::Properties>(L, "cc.Properties");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_Properties___gc);
    oluacls_func(L, "createNonRefCounted", _olua_fun_cocos2d_Properties_createNonRefCounted);
    oluacls_func(L, "exists", _olua_fun_cocos2d_Properties_exists);
    oluacls_func(L, "getBool", _olua_fun_cocos2d_Properties_getBool);
    oluacls_func(L, "getColor", _olua_fun_cocos2d_Properties_getColor);
    oluacls_func(L, "getFloat", _olua_fun_cocos2d_Properties_getFloat);
    oluacls_func(L, "getId", _olua_fun_cocos2d_Properties_getId);
    oluacls_func(L, "getInt", _olua_fun_cocos2d_Properties_getInt);
    oluacls_func(L, "getLong", _olua_fun_cocos2d_Properties_getLong);
    oluacls_func(L, "getMat4", _olua_fun_cocos2d_Properties_getMat4);
    oluacls_func(L, "getNamespace", _olua_fun_cocos2d_Properties_getNamespace);
    oluacls_func(L, "getNextNamespace", _olua_fun_cocos2d_Properties_getNextNamespace);
    oluacls_func(L, "getNextProperty", _olua_fun_cocos2d_Properties_getNextProperty);
    oluacls_func(L, "getPath", _olua_fun_cocos2d_Properties_getPath);
    oluacls_func(L, "getQuaternionFromAxisAngle", _olua_fun_cocos2d_Properties_getQuaternionFromAxisAngle);
    oluacls_func(L, "getString", _olua_fun_cocos2d_Properties_getString);
    oluacls_func(L, "getType", _olua_fun_cocos2d_Properties_getType);
    oluacls_func(L, "getVariable", _olua_fun_cocos2d_Properties_getVariable);
    oluacls_func(L, "getVec2", _olua_fun_cocos2d_Properties_getVec2);
    oluacls_func(L, "getVec3", _olua_fun_cocos2d_Properties_getVec3);
    oluacls_func(L, "getVec4", _olua_fun_cocos2d_Properties_getVec4);
    oluacls_func(L, "parseAxisAngle", _olua_fun_cocos2d_Properties_parseAxisAngle);
    oluacls_func(L, "parseColor", _olua_fun_cocos2d_Properties_parseColor);
    oluacls_func(L, "parseVec2", _olua_fun_cocos2d_Properties_parseVec2);
    oluacls_func(L, "parseVec3", _olua_fun_cocos2d_Properties_parseVec3);
    oluacls_func(L, "parseVec4", _olua_fun_cocos2d_Properties_parseVec4);
    oluacls_func(L, "rewind", _olua_fun_cocos2d_Properties_rewind);
    oluacls_func(L, "setString", _olua_fun_cocos2d_Properties_setString);
    oluacls_func(L, "setVariable", _olua_fun_cocos2d_Properties_setVariable);
    oluacls_prop(L, "id", _olua_fun_cocos2d_Properties_getId, nullptr);
    oluacls_prop(L, "nextNamespace", _olua_fun_cocos2d_Properties_getNextNamespace, nullptr);
    oluacls_prop(L, "nextProperty", _olua_fun_cocos2d_Properties_getNextProperty, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Properties(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Properties")) {
        luaL_error(L, "class not found: cocos2d::Properties");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Material_addTechnique(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Material *self = nullptr;
    cocos2d::Technique *arg1 = nullptr;       /** technique */

    olua_to_object(L, 1, &self, "cc.Material");
    olua_check_object(L, 2, &arg1, "cc.Technique");

    // void addTechnique(cocos2d::Technique *technique)
    self->addTechnique(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Material_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Material *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Material");

    // cocos2d::Material *clone()
    cocos2d::Material *ret = self->clone();
    int num_ret = olua_push_object(L, ret, "cc.Material");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Material_createWithFilename(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** path */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::Material *createWithFilename(const std::string &path)
    cocos2d::Material *ret = cocos2d::Material::createWithFilename(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Material");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Material_createWithProgramState(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::backend::ProgramState *arg1 = nullptr;       /** programState */

    olua_check_object(L, 1, &arg1, "ccb.ProgramState");

    // static cocos2d::Material *createWithProgramState(cocos2d::backend::ProgramState *programState)
    cocos2d::Material *ret = cocos2d::Material::createWithProgramState(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Material");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Material_createWithProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Properties *arg1 = nullptr;       /** materialProperties */

    olua_check_object(L, 1, &arg1, "cc.Properties");

    // static cocos2d::Material *createWithProperties(cocos2d::Properties *materialProperties)
    cocos2d::Material *ret = cocos2d::Material::createWithProperties(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Material");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Material_draw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Material *self = nullptr;
    cocos2d::MeshCommand *arg1 = nullptr;       /** meshCommand */
    float arg2 = 0;       /** globalZOrder */
    cocos2d::backend::Buffer *arg3 = nullptr;       /** vertexBuffer */
    cocos2d::backend::Buffer *arg4 = nullptr;       /** indexBuffer */
    cocos2d::CustomCommand::PrimitiveType arg5 = (cocos2d::CustomCommand::PrimitiveType)0;       /** primitive */
    cocos2d::CustomCommand::IndexFormat arg6 = (cocos2d::CustomCommand::IndexFormat)0;       /** indexFormat */
    unsigned int arg7 = 0;       /** indexCount */
    cocos2d::Mat4 *arg8;       /** modelView */

    olua_to_object(L, 1, &self, "cc.Material");
    olua_check_object(L, 2, &arg1, "cc.MeshCommand");
    olua_check_number(L, 3, &arg2);
    olua_check_object(L, 4, &arg3, "ccb.Buffer");
    olua_check_object(L, 5, &arg4, "ccb.Buffer");
    olua_check_enum(L, 6, &arg5);
    olua_check_enum(L, 7, &arg6);
    olua_check_integer(L, 8, &arg7);
    olua_check_object(L, 9, &arg8, "cc.Mat4");

    // void draw(cocos2d::MeshCommand *meshCommand, float globalZOrder, cocos2d::backend::Buffer *vertexBuffer, cocos2d::backend::Buffer *indexBuffer, cocos2d::CustomCommand::PrimitiveType primitive, cocos2d::CustomCommand::IndexFormat indexFormat, unsigned int indexCount, const cocos2d::Mat4 &modelView)
    self->draw(arg1, arg2, arg3, arg4, arg5, arg6, arg7, *arg8);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Material_getName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Material *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Material");

    // std::string getName()
    std::string ret = self->getName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Material_getRenderState(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Material *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Material");

    // cocos2d::RenderState *getRenderState()
    cocos2d::RenderState *ret = self->getRenderState();
    int num_ret = olua_push_object(L, ret, "cc.RenderState");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Material_getTechnique(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Material *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Material");

    // cocos2d::Technique *getTechnique()
    cocos2d::Technique *ret = self->getTechnique();
    int num_ret = olua_push_object(L, ret, "cc.Technique");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Material_getTechniqueByIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Material *self = nullptr;
    ssize_t arg1 = 0;       /** index */

    olua_to_object(L, 1, &self, "cc.Material");
    olua_check_integer(L, 2, &arg1);

    // cocos2d::Technique *getTechniqueByIndex(ssize_t index)
    cocos2d::Technique *ret = self->getTechniqueByIndex(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Technique");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Material_getTechniqueByName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Material *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.Material");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Technique *getTechniqueByName(const std::string &name)
    cocos2d::Technique *ret = self->getTechniqueByName(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Technique");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Material_getTechniqueCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Material *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Material");

    // ssize_t getTechniqueCount()
    ssize_t ret = self->getTechniqueCount();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Material_getTechniques(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Material *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Material");

    // const cocos2d::Vector<cocos2d::Technique *> &getTechniques()
    const cocos2d::Vector<cocos2d::Technique *> &ret = self->getTechniques();
    int num_ret = olua_push_array<cocos2d::Technique *>(L, ret, [L](cocos2d::Technique *arg1) {
        olua_push_object(L, arg1, "cc.Technique");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Material_setName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Material *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.Material");
    olua_check_string(L, 2, &arg1);

    // void setName(const std::string &name)
    self->setName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Material_setTechnique(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Material *self = nullptr;
    std::string arg1;       /** techniqueName */

    olua_to_object(L, 1, &self, "cc.Material");
    olua_check_string(L, 2, &arg1);

    // void setTechnique(const std::string &techniqueName)
    self->setTechnique(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Material(lua_State *L)
{
    oluacls_class<cocos2d::Material, cocos2d::Ref>(L, "cc.Material");
    oluacls_func(L, "addTechnique", _olua_fun_cocos2d_Material_addTechnique);
    oluacls_func(L, "clone", _olua_fun_cocos2d_Material_clone);
    oluacls_func(L, "createWithFilename", _olua_fun_cocos2d_Material_createWithFilename);
    oluacls_func(L, "createWithProgramState", _olua_fun_cocos2d_Material_createWithProgramState);
    oluacls_func(L, "createWithProperties", _olua_fun_cocos2d_Material_createWithProperties);
    oluacls_func(L, "draw", _olua_fun_cocos2d_Material_draw);
    oluacls_func(L, "getName", _olua_fun_cocos2d_Material_getName);
    oluacls_func(L, "getRenderState", _olua_fun_cocos2d_Material_getRenderState);
    oluacls_func(L, "getTechnique", _olua_fun_cocos2d_Material_getTechnique);
    oluacls_func(L, "getTechniqueByIndex", _olua_fun_cocos2d_Material_getTechniqueByIndex);
    oluacls_func(L, "getTechniqueByName", _olua_fun_cocos2d_Material_getTechniqueByName);
    oluacls_func(L, "getTechniqueCount", _olua_fun_cocos2d_Material_getTechniqueCount);
    oluacls_func(L, "getTechniques", _olua_fun_cocos2d_Material_getTechniques);
    oluacls_func(L, "setName", _olua_fun_cocos2d_Material_setName);
    oluacls_func(L, "setTechnique", _olua_fun_cocos2d_Material_setTechnique);
    oluacls_prop(L, "name", _olua_fun_cocos2d_Material_getName, _olua_fun_cocos2d_Material_setName);
    oluacls_prop(L, "renderState", _olua_fun_cocos2d_Material_getRenderState, nullptr);
    oluacls_prop(L, "technique", _olua_fun_cocos2d_Material_getTechnique, _olua_fun_cocos2d_Material_setTechnique);
    oluacls_prop(L, "techniqueCount", _olua_fun_cocos2d_Material_getTechniqueCount, nullptr);
    oluacls_prop(L, "techniques", _olua_fun_cocos2d_Material_getTechniques, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Material(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Material")) {
        luaL_error(L, "class not found: cocos2d::Material");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Renderer___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::Renderer *)olua_toobj(L, 1, "cc.Renderer");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_addCommand$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::RenderCommand *arg1 = nullptr;       /** command */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_object(L, 2, &arg1, "cc.RenderCommand");

    // void addCommand(cocos2d::RenderCommand *command)
    self->addCommand(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_addCommand$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::RenderCommand *arg1 = nullptr;       /** command */
    int arg2 = 0;       /** renderQueueID */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_object(L, 2, &arg1, "cc.RenderCommand");
    olua_check_integer(L, 3, &arg2);

    // void addCommand(cocos2d::RenderCommand *command, int renderQueueID)
    self->addCommand(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_addCommand(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Renderer")) && (olua_is_object(L, 2, "cc.RenderCommand"))) {
            // void addCommand(cocos2d::RenderCommand *command)
            return _olua_fun_cocos2d_Renderer_addCommand$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Renderer")) && (olua_is_object(L, 2, "cc.RenderCommand")) && (olua_is_integer(L, 3))) {
            // void addCommand(cocos2d::RenderCommand *command, int renderQueueID)
            return _olua_fun_cocos2d_Renderer_addCommand$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Renderer::addCommand' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_addDrawnBatches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    ssize_t arg1 = 0;       /** number */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_integer(L, 2, &arg1);

    // void addDrawnBatches(ssize_t number)
    self->addDrawnBatches(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_addDrawnVertices(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    ssize_t arg1 = 0;       /** number */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_integer(L, 2, &arg1);

    // void addDrawnVertices(ssize_t number)
    self->addDrawnVertices(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_checkVisibility(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::Mat4 *arg1;       /** transform */
    cocos2d::Size *arg2;       /** size */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_object(L, 2, &arg1, "cc.Mat4");
    olua_check_object(L, 3, &arg2, "cc.Size");

    // bool checkVisibility(const cocos2d::Mat4 &transform, const cocos2d::Size &size)
    bool ret = self->checkVisibility(*arg1, *arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_clean(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // void clean()
    self->clean();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_clear(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::ClearFlag arg1 = (cocos2d::ClearFlag)0;       /** flags */
    cocos2d::Color4F arg2;       /** color */
    float arg3 = 0;       /** depth */
    unsigned int arg4 = 0;       /** stencil */
    float arg5 = 0;       /** globalOrder */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_enum(L, 2, &arg1);
    olua_check_cocos2d_Color4F(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // void clear(cocos2d::ClearFlag flags, const cocos2d::Color4F &color, float depth, unsigned int stencil, float globalOrder)
    self->clear(arg1, arg2, arg3, arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_clearDrawStats(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // void clearDrawStats()
    self->clearDrawStats();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_createRenderQueue(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // int createRenderQueue()
    int ret = self->createRenderQueue();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_drawCommand(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::RenderCommand *arg1 = nullptr;       /** command */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_object(L, 2, &arg1, "cc.RenderCommand");

    // void drawCommand(cocos2d::RenderCommand *command)
    self->drawCommand(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_getClearColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // const cocos2d::Color4F &getClearColor()
    const cocos2d::Color4F &ret = self->getClearColor();
    int num_ret = olua_push_cocos2d_Color4F(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getClearDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // float getClearDepth()
    float ret = self->getClearDepth();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getClearFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // cocos2d::ClearFlag getClearFlag()
    cocos2d::ClearFlag ret = self->getClearFlag();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getClearStencil(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // unsigned int getClearStencil()
    unsigned int ret = self->getClearStencil();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getColorAttachment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // cocos2d::Texture2D *getColorAttachment()
    cocos2d::Texture2D *ret = self->getColorAttachment();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getCullMode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // cocos2d::CullMode getCullMode()
    cocos2d::CullMode ret = self->getCullMode();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getDepthAttachment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // cocos2d::Texture2D *getDepthAttachment()
    cocos2d::Texture2D *ret = self->getDepthAttachment();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getDepthCompareFunction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // cocos2d::backend::CompareFunction getDepthCompareFunction()
    cocos2d::backend::CompareFunction ret = self->getDepthCompareFunction();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getDepthTest(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // bool getDepthTest()
    bool ret = self->getDepthTest();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getDepthWrite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // bool getDepthWrite()
    bool ret = self->getDepthWrite();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getDrawnBatches(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // ssize_t getDrawnBatches()
    ssize_t ret = self->getDrawnBatches();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getDrawnVertices(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // ssize_t getDrawnVertices()
    ssize_t ret = self->getDrawnVertices();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getRenderTargetFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // cocos2d::RenderTargetFlag getRenderTargetFlag()
    cocos2d::RenderTargetFlag ret = self->getRenderTargetFlag();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getScissorRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // const cocos2d::ScissorRect &getScissorRect()
    const cocos2d::ScissorRect &ret = self->getScissorRect();
    int num_ret = olua_push_object(L, ret, "cc.ScissorRect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getScissorTest(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // bool getScissorTest()
    bool ret = self->getScissorTest();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getStencilAttachment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // cocos2d::Texture2D *getStencilAttachment()
    cocos2d::Texture2D *ret = self->getStencilAttachment();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getStencilCompareFunction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // cocos2d::backend::CompareFunction getStencilCompareFunction()
    cocos2d::backend::CompareFunction ret = self->getStencilCompareFunction();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getStencilDepthPassOperation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // cocos2d::backend::StencilOperation getStencilDepthPassOperation()
    cocos2d::backend::StencilOperation ret = self->getStencilDepthPassOperation();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getStencilFailureOperation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // cocos2d::backend::StencilOperation getStencilFailureOperation()
    cocos2d::backend::StencilOperation ret = self->getStencilFailureOperation();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getStencilPassDepthFailureOperation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // cocos2d::backend::StencilOperation getStencilPassDepthFailureOperation()
    cocos2d::backend::StencilOperation ret = self->getStencilPassDepthFailureOperation();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getStencilReadMask(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // unsigned int getStencilReadMask()
    unsigned int ret = self->getStencilReadMask();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getStencilReferenceValue(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // unsigned int getStencilReferenceValue()
    unsigned int ret = self->getStencilReferenceValue();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getStencilTest(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // bool getStencilTest()
    bool ret = self->getStencilTest();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getStencilWriteMask(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // unsigned int getStencilWriteMask()
    unsigned int ret = self->getStencilWriteMask();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getViewport(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // const cocos2d::Viewport &getViewport()
    const cocos2d::Viewport &ret = self->getViewport();
    int num_ret = olua_push_object(L, ret, "cc.Viewport");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_getWinding(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // cocos2d::Winding getWinding()
    cocos2d::Winding ret = self->getWinding();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // void init()
    self->init();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Renderer()
    cocos2d::Renderer *ret = new cocos2d::Renderer();
    int num_ret = olua_push_object(L, ret, "cc.Renderer");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Renderer_popGroup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // void popGroup()
    self->popGroup();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_pushGroup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    int arg1 = 0;       /** renderQueueID */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_integer(L, 2, &arg1);

    // void pushGroup(int renderQueueID)
    self->pushGroup(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_render(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Renderer");

    // void render()
    self->render();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setCullMode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::CullMode arg1 = (cocos2d::CullMode)0;       /** mode */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_enum(L, 2, &arg1);

    // void setCullMode(cocos2d::CullMode mode)
    self->setCullMode(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setDepthCompareFunction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::backend::CompareFunction arg1 = (cocos2d::backend::CompareFunction)0;       /** func */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_enum(L, 2, &arg1);

    // void setDepthCompareFunction(cocos2d::backend::CompareFunction func)
    self->setDepthCompareFunction(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setDepthTest(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_bool(L, 2, &arg1);

    // void setDepthTest(bool value)
    self->setDepthTest(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setDepthWrite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_bool(L, 2, &arg1);

    // void setDepthWrite(bool value)
    self->setDepthWrite(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setRenderTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::RenderTargetFlag arg1 = (cocos2d::RenderTargetFlag)0;       /** flags */
    cocos2d::Texture2D *arg2 = nullptr;       /** colorAttachment */
    cocos2d::Texture2D *arg3 = nullptr;       /** depthAttachment */
    cocos2d::Texture2D *arg4 = nullptr;       /** stencilAttachment */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_enum(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Texture2D");
    olua_check_object(L, 4, &arg3, "cc.Texture2D");
    olua_check_object(L, 5, &arg4, "cc.Texture2D");

    // void setRenderTarget(cocos2d::RenderTargetFlag flags, cocos2d::Texture2D *colorAttachment, cocos2d::Texture2D *depthAttachment, cocos2d::Texture2D *stencilAttachment)
    self->setRenderTarget(arg1, arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setScissorRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    float arg1 = 0;       /** x */
    float arg2 = 0;       /** y */
    float arg3 = 0;       /** width */
    float arg4 = 0;       /** height */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void setScissorRect(float x, float y, float width, float height)
    self->setScissorRect(arg1, arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setScissorTest(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_bool(L, 2, &arg1);

    // void setScissorTest(bool enabled)
    self->setScissorTest(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setStencilCompareFunction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::backend::CompareFunction arg1 = (cocos2d::backend::CompareFunction)0;       /** func */
    unsigned int arg2 = 0;       /** ref */
    unsigned int arg3 = 0;       /** readMask */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_enum(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // void setStencilCompareFunction(cocos2d::backend::CompareFunction func, unsigned int ref, unsigned int readMask)
    self->setStencilCompareFunction(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setStencilOperation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::backend::StencilOperation arg1 = (cocos2d::backend::StencilOperation)0;       /** stencilFailureOp */
    cocos2d::backend::StencilOperation arg2 = (cocos2d::backend::StencilOperation)0;       /** depthFailureOp */
    cocos2d::backend::StencilOperation arg3 = (cocos2d::backend::StencilOperation)0;       /** stencilDepthPassOp */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_enum(L, 2, &arg1);
    olua_check_enum(L, 3, &arg2);
    olua_check_enum(L, 4, &arg3);

    // void setStencilOperation(cocos2d::backend::StencilOperation stencilFailureOp, cocos2d::backend::StencilOperation depthFailureOp, cocos2d::backend::StencilOperation stencilDepthPassOp)
    self->setStencilOperation(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setStencilTest(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_bool(L, 2, &arg1);

    // void setStencilTest(bool value)
    self->setStencilTest(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setStencilWriteMask(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    unsigned int arg1 = 0;       /** mask */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_integer(L, 2, &arg1);

    // void setStencilWriteMask(unsigned int mask)
    self->setStencilWriteMask(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setViewPort(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    int arg1 = 0;       /** x */
    int arg2 = 0;       /** y */
    unsigned int arg3 = 0;       /** w */
    unsigned int arg4 = 0;       /** h */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_integer(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);

    // void setViewPort(int x, int y, unsigned int w, unsigned int h)
    self->setViewPort(arg1, arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Renderer_setWinding(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Renderer *self = nullptr;
    cocos2d::Winding arg1 = (cocos2d::Winding)0;       /** winding */

    olua_to_object(L, 1, &self, "cc.Renderer");
    olua_check_enum(L, 2, &arg1);

    // void setWinding(cocos2d::Winding winding)
    self->setWinding(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Renderer(lua_State *L)
{
    oluacls_class<cocos2d::Renderer>(L, "cc.Renderer");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_Renderer___gc);
    oluacls_func(L, "addCommand", _olua_fun_cocos2d_Renderer_addCommand);
    oluacls_func(L, "addDrawnBatches", _olua_fun_cocos2d_Renderer_addDrawnBatches);
    oluacls_func(L, "addDrawnVertices", _olua_fun_cocos2d_Renderer_addDrawnVertices);
    oluacls_func(L, "checkVisibility", _olua_fun_cocos2d_Renderer_checkVisibility);
    oluacls_func(L, "clean", _olua_fun_cocos2d_Renderer_clean);
    oluacls_func(L, "clear", _olua_fun_cocos2d_Renderer_clear);
    oluacls_func(L, "clearDrawStats", _olua_fun_cocos2d_Renderer_clearDrawStats);
    oluacls_func(L, "createRenderQueue", _olua_fun_cocos2d_Renderer_createRenderQueue);
    oluacls_func(L, "drawCommand", _olua_fun_cocos2d_Renderer_drawCommand);
    oluacls_func(L, "getClearColor", _olua_fun_cocos2d_Renderer_getClearColor);
    oluacls_func(L, "getClearDepth", _olua_fun_cocos2d_Renderer_getClearDepth);
    oluacls_func(L, "getClearFlag", _olua_fun_cocos2d_Renderer_getClearFlag);
    oluacls_func(L, "getClearStencil", _olua_fun_cocos2d_Renderer_getClearStencil);
    oluacls_func(L, "getColorAttachment", _olua_fun_cocos2d_Renderer_getColorAttachment);
    oluacls_func(L, "getCullMode", _olua_fun_cocos2d_Renderer_getCullMode);
    oluacls_func(L, "getDepthAttachment", _olua_fun_cocos2d_Renderer_getDepthAttachment);
    oluacls_func(L, "getDepthCompareFunction", _olua_fun_cocos2d_Renderer_getDepthCompareFunction);
    oluacls_func(L, "getDepthTest", _olua_fun_cocos2d_Renderer_getDepthTest);
    oluacls_func(L, "getDepthWrite", _olua_fun_cocos2d_Renderer_getDepthWrite);
    oluacls_func(L, "getDrawnBatches", _olua_fun_cocos2d_Renderer_getDrawnBatches);
    oluacls_func(L, "getDrawnVertices", _olua_fun_cocos2d_Renderer_getDrawnVertices);
    oluacls_func(L, "getRenderTargetFlag", _olua_fun_cocos2d_Renderer_getRenderTargetFlag);
    oluacls_func(L, "getScissorRect", _olua_fun_cocos2d_Renderer_getScissorRect);
    oluacls_func(L, "getScissorTest", _olua_fun_cocos2d_Renderer_getScissorTest);
    oluacls_func(L, "getStencilAttachment", _olua_fun_cocos2d_Renderer_getStencilAttachment);
    oluacls_func(L, "getStencilCompareFunction", _olua_fun_cocos2d_Renderer_getStencilCompareFunction);
    oluacls_func(L, "getStencilDepthPassOperation", _olua_fun_cocos2d_Renderer_getStencilDepthPassOperation);
    oluacls_func(L, "getStencilFailureOperation", _olua_fun_cocos2d_Renderer_getStencilFailureOperation);
    oluacls_func(L, "getStencilPassDepthFailureOperation", _olua_fun_cocos2d_Renderer_getStencilPassDepthFailureOperation);
    oluacls_func(L, "getStencilReadMask", _olua_fun_cocos2d_Renderer_getStencilReadMask);
    oluacls_func(L, "getStencilReferenceValue", _olua_fun_cocos2d_Renderer_getStencilReferenceValue);
    oluacls_func(L, "getStencilTest", _olua_fun_cocos2d_Renderer_getStencilTest);
    oluacls_func(L, "getStencilWriteMask", _olua_fun_cocos2d_Renderer_getStencilWriteMask);
    oluacls_func(L, "getViewport", _olua_fun_cocos2d_Renderer_getViewport);
    oluacls_func(L, "getWinding", _olua_fun_cocos2d_Renderer_getWinding);
    oluacls_func(L, "init", _olua_fun_cocos2d_Renderer_init);
    oluacls_func(L, "new", _olua_fun_cocos2d_Renderer_new);
    oluacls_func(L, "popGroup", _olua_fun_cocos2d_Renderer_popGroup);
    oluacls_func(L, "pushGroup", _olua_fun_cocos2d_Renderer_pushGroup);
    oluacls_func(L, "render", _olua_fun_cocos2d_Renderer_render);
    oluacls_func(L, "setCullMode", _olua_fun_cocos2d_Renderer_setCullMode);
    oluacls_func(L, "setDepthCompareFunction", _olua_fun_cocos2d_Renderer_setDepthCompareFunction);
    oluacls_func(L, "setDepthTest", _olua_fun_cocos2d_Renderer_setDepthTest);
    oluacls_func(L, "setDepthWrite", _olua_fun_cocos2d_Renderer_setDepthWrite);
    oluacls_func(L, "setRenderTarget", _olua_fun_cocos2d_Renderer_setRenderTarget);
    oluacls_func(L, "setScissorRect", _olua_fun_cocos2d_Renderer_setScissorRect);
    oluacls_func(L, "setScissorTest", _olua_fun_cocos2d_Renderer_setScissorTest);
    oluacls_func(L, "setStencilCompareFunction", _olua_fun_cocos2d_Renderer_setStencilCompareFunction);
    oluacls_func(L, "setStencilOperation", _olua_fun_cocos2d_Renderer_setStencilOperation);
    oluacls_func(L, "setStencilTest", _olua_fun_cocos2d_Renderer_setStencilTest);
    oluacls_func(L, "setStencilWriteMask", _olua_fun_cocos2d_Renderer_setStencilWriteMask);
    oluacls_func(L, "setViewPort", _olua_fun_cocos2d_Renderer_setViewPort);
    oluacls_func(L, "setWinding", _olua_fun_cocos2d_Renderer_setWinding);
    oluacls_prop(L, "clearColor", _olua_fun_cocos2d_Renderer_getClearColor, nullptr);
    oluacls_prop(L, "clearDepth", _olua_fun_cocos2d_Renderer_getClearDepth, nullptr);
    oluacls_prop(L, "clearFlag", _olua_fun_cocos2d_Renderer_getClearFlag, nullptr);
    oluacls_prop(L, "clearStencil", _olua_fun_cocos2d_Renderer_getClearStencil, nullptr);
    oluacls_prop(L, "colorAttachment", _olua_fun_cocos2d_Renderer_getColorAttachment, nullptr);
    oluacls_prop(L, "cullMode", _olua_fun_cocos2d_Renderer_getCullMode, _olua_fun_cocos2d_Renderer_setCullMode);
    oluacls_prop(L, "depthAttachment", _olua_fun_cocos2d_Renderer_getDepthAttachment, nullptr);
    oluacls_prop(L, "depthCompareFunction", _olua_fun_cocos2d_Renderer_getDepthCompareFunction, _olua_fun_cocos2d_Renderer_setDepthCompareFunction);
    oluacls_prop(L, "depthTest", _olua_fun_cocos2d_Renderer_getDepthTest, _olua_fun_cocos2d_Renderer_setDepthTest);
    oluacls_prop(L, "depthWrite", _olua_fun_cocos2d_Renderer_getDepthWrite, _olua_fun_cocos2d_Renderer_setDepthWrite);
    oluacls_prop(L, "drawnBatches", _olua_fun_cocos2d_Renderer_getDrawnBatches, nullptr);
    oluacls_prop(L, "drawnVertices", _olua_fun_cocos2d_Renderer_getDrawnVertices, nullptr);
    oluacls_prop(L, "renderTargetFlag", _olua_fun_cocos2d_Renderer_getRenderTargetFlag, nullptr);
    oluacls_prop(L, "scissorTest", _olua_fun_cocos2d_Renderer_getScissorTest, _olua_fun_cocos2d_Renderer_setScissorTest);
    oluacls_prop(L, "stencilAttachment", _olua_fun_cocos2d_Renderer_getStencilAttachment, nullptr);
    oluacls_prop(L, "stencilDepthPassOperation", _olua_fun_cocos2d_Renderer_getStencilDepthPassOperation, nullptr);
    oluacls_prop(L, "stencilFailureOperation", _olua_fun_cocos2d_Renderer_getStencilFailureOperation, nullptr);
    oluacls_prop(L, "stencilPassDepthFailureOperation", _olua_fun_cocos2d_Renderer_getStencilPassDepthFailureOperation, nullptr);
    oluacls_prop(L, "stencilReadMask", _olua_fun_cocos2d_Renderer_getStencilReadMask, nullptr);
    oluacls_prop(L, "stencilReferenceValue", _olua_fun_cocos2d_Renderer_getStencilReferenceValue, nullptr);
    oluacls_prop(L, "stencilTest", _olua_fun_cocos2d_Renderer_getStencilTest, _olua_fun_cocos2d_Renderer_setStencilTest);
    oluacls_prop(L, "stencilWriteMask", _olua_fun_cocos2d_Renderer_getStencilWriteMask, _olua_fun_cocos2d_Renderer_setStencilWriteMask);
    oluacls_prop(L, "winding", _olua_fun_cocos2d_Renderer_getWinding, _olua_fun_cocos2d_Renderer_setWinding);
    oluacls_const(L, "BATCH_TRIAGCOMMAND_RESERVED_SIZE", cocos2d::Renderer::BATCH_TRIAGCOMMAND_RESERVED_SIZE);
    oluacls_const(L, "INDEX_VBO_SIZE", cocos2d::Renderer::INDEX_VBO_SIZE);
    oluacls_const(L, "MATERIAL_ID_DO_NOT_BATCH", cocos2d::Renderer::MATERIAL_ID_DO_NOT_BATCH);
    oluacls_const(L, "VBO_SIZE", cocos2d::Renderer::VBO_SIZE);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Renderer(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Renderer")) {
        luaL_error(L, "class not found: cocos2d::Renderer");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_RenderCommand_Type(lua_State *L)
{
    oluacls_class<cocos2d::RenderCommand::Type>(L, "cc.RenderCommand.Type");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "CALLBACK_COMMAND", (lua_Integer)cocos2d::RenderCommand::Type::CALLBACK_COMMAND);
    oluacls_enum(L, "CAPTURE_SCREEN_COMMAND", (lua_Integer)cocos2d::RenderCommand::Type::CAPTURE_SCREEN_COMMAND);
    oluacls_enum(L, "CUSTOM_COMMAND", (lua_Integer)cocos2d::RenderCommand::Type::CUSTOM_COMMAND);
    oluacls_enum(L, "GROUP_COMMAND", (lua_Integer)cocos2d::RenderCommand::Type::GROUP_COMMAND);
    oluacls_enum(L, "MESH_COMMAND", (lua_Integer)cocos2d::RenderCommand::Type::MESH_COMMAND);
    oluacls_enum(L, "QUAD_COMMAND", (lua_Integer)cocos2d::RenderCommand::Type::QUAD_COMMAND);
    oluacls_enum(L, "TRIANGLES_COMMAND", (lua_Integer)cocos2d::RenderCommand::Type::TRIANGLES_COMMAND);
    oluacls_enum(L, "UNKNOWN_COMMAND", (lua_Integer)cocos2d::RenderCommand::Type::UNKNOWN_COMMAND);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_RenderCommand_Type(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.RenderCommand.Type")) {
        luaL_error(L, "class not found: cocos2d::RenderCommand::Type");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_CustomCommand_DrawType(lua_State *L)
{
    oluacls_class<cocos2d::CustomCommand::DrawType>(L, "cc.CustomCommand.DrawType");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "ARRAY", (lua_Integer)cocos2d::CustomCommand::DrawType::ARRAY);
    oluacls_enum(L, "ELEMENT", (lua_Integer)cocos2d::CustomCommand::DrawType::ELEMENT);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_CustomCommand_DrawType(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.CustomCommand.DrawType")) {
        luaL_error(L, "class not found: cocos2d::CustomCommand::DrawType");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_PipelineDescriptor___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::PipelineDescriptor *)olua_toobj(L, 1, "cc.PipelineDescriptor");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_PipelineDescriptor_blendDescriptor$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PipelineDescriptor *self = nullptr;

    olua_to_object(L, 1, &self, "cc.PipelineDescriptor");

    // cocos2d::backend::BlendDescriptor blendDescriptor
    cocos2d::backend::BlendDescriptor &ret = self->blendDescriptor;
    int num_ret = olua_copy_object(L, ret, "ccb.BlendDescriptor");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_PipelineDescriptor_blendDescriptor$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PipelineDescriptor *self = nullptr;
    cocos2d::backend::BlendDescriptor *arg1;       /** blendDescriptor */

    olua_to_object(L, 1, &self, "cc.PipelineDescriptor");
    olua_check_object(L, 2, &arg1, "ccb.BlendDescriptor");

    // cocos2d::backend::BlendDescriptor blendDescriptor
    self->blendDescriptor = *arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_PipelineDescriptor_blendDescriptor(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // cocos2d::backend::BlendDescriptor blendDescriptor
        return _olua_fun_cocos2d_PipelineDescriptor_blendDescriptor$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.PipelineDescriptor")) && (olua_is_object(L, 2, "ccb.BlendDescriptor"))) {
            // cocos2d::backend::BlendDescriptor blendDescriptor
            return _olua_fun_cocos2d_PipelineDescriptor_blendDescriptor$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::PipelineDescriptor::blendDescriptor' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_PipelineDescriptor_programState$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PipelineDescriptor *self = nullptr;

    olua_to_object(L, 1, &self, "cc.PipelineDescriptor");

    // cocos2d::backend::ProgramState *programState
    cocos2d::backend::ProgramState *ret = self->programState;
    int num_ret = olua_push_object(L, ret, "ccb.ProgramState");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_PipelineDescriptor_programState$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PipelineDescriptor *self = nullptr;
    cocos2d::backend::ProgramState *arg1 = nullptr;       /** programState */

    olua_to_object(L, 1, &self, "cc.PipelineDescriptor");
    olua_check_object(L, 2, &arg1, "ccb.ProgramState");

    // cocos2d::backend::ProgramState *programState
    self->programState = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_PipelineDescriptor_programState(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // cocos2d::backend::ProgramState *programState
        return _olua_fun_cocos2d_PipelineDescriptor_programState$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.PipelineDescriptor")) && (olua_is_object(L, 2, "ccb.ProgramState"))) {
            // cocos2d::backend::ProgramState *programState
            return _olua_fun_cocos2d_PipelineDescriptor_programState$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::PipelineDescriptor::programState' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_PipelineDescriptor(lua_State *L)
{
    oluacls_class<cocos2d::PipelineDescriptor>(L, "cc.PipelineDescriptor");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_PipelineDescriptor___gc);
    oluacls_prop(L, "programState", _olua_fun_cocos2d_PipelineDescriptor_programState, _olua_fun_cocos2d_PipelineDescriptor_programState);
    oluacls_prop(L, "blendDescriptor", _olua_fun_cocos2d_PipelineDescriptor_blendDescriptor, _olua_fun_cocos2d_PipelineDescriptor_blendDescriptor);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_PipelineDescriptor(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.PipelineDescriptor")) {
        luaL_error(L, "class not found: cocos2d::PipelineDescriptor");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_Technique(lua_State *L)
{
    oluacls_class<cocos2d::Technique, cocos2d::Ref>(L, "cc.Technique");

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Technique(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Technique")) {
        luaL_error(L, "class not found: cocos2d::Technique");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_Pass(lua_State *L)
{
    oluacls_class<cocos2d::Pass, cocos2d::Ref>(L, "cc.Pass");

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Pass(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Pass")) {
        luaL_error(L, "class not found: cocos2d::Pass");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_RenderState(lua_State *L)
{
    oluacls_class<cocos2d::RenderState, cocos2d::Ref>(L, "cc.RenderState");

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_RenderState(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.RenderState")) {
        luaL_error(L, "class not found: cocos2d::RenderState");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_RenderCommand_getDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderCommand");

    // float getDepth()
    float ret = self->getDepth();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderCommand_getGlobalOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderCommand");

    // float getGlobalOrder()
    float ret = self->getGlobalOrder();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderCommand_getMV(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderCommand");

    // const cocos2d::Mat4 &getMV()
    const cocos2d::Mat4 &ret = self->getMV();
    int num_ret = olua_push_object(L, ret, "cc.Mat4");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderCommand_getPipelineDescriptor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderCommand");

    // cocos2d::PipelineDescriptor &getPipelineDescriptor()
    cocos2d::PipelineDescriptor &ret = self->getPipelineDescriptor();
    int num_ret = olua_push_object(L, &ret, "cc.PipelineDescriptor");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderCommand_getType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderCommand");

    // cocos2d::RenderCommand::Type getType()
    cocos2d::RenderCommand::Type ret = self->getType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderCommand_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderCommand *self = nullptr;
    float arg1 = 0;       /** globalZOrder */
    cocos2d::Mat4 *arg2;       /** modelViewTransform */
    unsigned int arg3 = 0;       /** flags */

    olua_to_object(L, 1, &self, "cc.RenderCommand");
    olua_check_number(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Mat4");
    olua_check_integer(L, 4, &arg3);

    // void init(float globalZOrder, const cocos2d::Mat4 &modelViewTransform, unsigned int flags)
    self->init(arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderCommand_is3D(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderCommand");

    // bool is3D()
    bool ret = self->is3D();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderCommand_isSkipBatching(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderCommand");

    // bool isSkipBatching()
    bool ret = self->isSkipBatching();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderCommand_isTransparent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderCommand");

    // bool isTransparent()
    bool ret = self->isTransparent();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderCommand_set3D(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderCommand *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_object(L, 1, &self, "cc.RenderCommand");
    olua_check_bool(L, 2, &arg1);

    // void set3D(bool value)
    self->set3D(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderCommand_setSkipBatching(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderCommand *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_object(L, 1, &self, "cc.RenderCommand");
    olua_check_bool(L, 2, &arg1);

    // void setSkipBatching(bool value)
    self->setSkipBatching(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderCommand_setTransparent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderCommand *self = nullptr;
    bool arg1 = false;       /** isTransparent */

    olua_to_object(L, 1, &self, "cc.RenderCommand");
    olua_check_bool(L, 2, &arg1);

    // void setTransparent(bool isTransparent)
    self->setTransparent(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_RenderCommand(lua_State *L)
{
    oluacls_class<cocos2d::RenderCommand>(L, "cc.RenderCommand");
    oluacls_func(L, "getDepth", _olua_fun_cocos2d_RenderCommand_getDepth);
    oluacls_func(L, "getGlobalOrder", _olua_fun_cocos2d_RenderCommand_getGlobalOrder);
    oluacls_func(L, "getMV", _olua_fun_cocos2d_RenderCommand_getMV);
    oluacls_func(L, "getPipelineDescriptor", _olua_fun_cocos2d_RenderCommand_getPipelineDescriptor);
    oluacls_func(L, "getType", _olua_fun_cocos2d_RenderCommand_getType);
    oluacls_func(L, "init", _olua_fun_cocos2d_RenderCommand_init);
    oluacls_func(L, "is3D", _olua_fun_cocos2d_RenderCommand_is3D);
    oluacls_func(L, "isSkipBatching", _olua_fun_cocos2d_RenderCommand_isSkipBatching);
    oluacls_func(L, "isTransparent", _olua_fun_cocos2d_RenderCommand_isTransparent);
    oluacls_func(L, "set3D", _olua_fun_cocos2d_RenderCommand_set3D);
    oluacls_func(L, "setSkipBatching", _olua_fun_cocos2d_RenderCommand_setSkipBatching);
    oluacls_func(L, "setTransparent", _olua_fun_cocos2d_RenderCommand_setTransparent);
    oluacls_prop(L, "depth", _olua_fun_cocos2d_RenderCommand_getDepth, nullptr);
    oluacls_prop(L, "globalOrder", _olua_fun_cocos2d_RenderCommand_getGlobalOrder, nullptr);
    oluacls_prop(L, "mv", _olua_fun_cocos2d_RenderCommand_getMV, nullptr);
    oluacls_prop(L, "pipelineDescriptor", _olua_fun_cocos2d_RenderCommand_getPipelineDescriptor, nullptr);
    oluacls_prop(L, "skipBatching", _olua_fun_cocos2d_RenderCommand_isSkipBatching, _olua_fun_cocos2d_RenderCommand_setSkipBatching);
    oluacls_prop(L, "transparent", _olua_fun_cocos2d_RenderCommand_isTransparent, _olua_fun_cocos2d_RenderCommand_setTransparent);
    oluacls_prop(L, "type", _olua_fun_cocos2d_RenderCommand_getType, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_RenderCommand(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.RenderCommand")) {
        luaL_error(L, "class not found: cocos2d::RenderCommand");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_CustomCommand___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::CustomCommand *)olua_toobj(L, 1, "cc.CustomCommand");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_createIndexBuffer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    cocos2d::CustomCommand::IndexFormat arg1 = (cocos2d::CustomCommand::IndexFormat)0;       /** format */
    std::size_t arg2 = 0;       /** capacity */
    cocos2d::CustomCommand::BufferUsage arg3 = (cocos2d::CustomCommand::BufferUsage)0;       /** usage */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_enum(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);
    olua_check_enum(L, 4, &arg3);

    // void createIndexBuffer(cocos2d::CustomCommand::IndexFormat format, std::size_t capacity, cocos2d::CustomCommand::BufferUsage usage)
    self->createIndexBuffer(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_createVertexBuffer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    std::size_t arg1 = 0;       /** vertexSize */
    std::size_t arg2 = 0;       /** capacity */
    cocos2d::CustomCommand::BufferUsage arg3 = (cocos2d::CustomCommand::BufferUsage)0;       /** usage */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_integer(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);
    olua_check_enum(L, 4, &arg3);

    // void createVertexBuffer(std::size_t vertexSize, std::size_t capacity, cocos2d::CustomCommand::BufferUsage usage)
    self->createVertexBuffer(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_func$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    void *cb_store = (void *)self;
    std::string cb_tag = "func";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void ()> func
    std::function<void ()> ret = self->func;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_func$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    std::function<void ()> arg1;       /** func */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "func";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */]() {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);

                olua_callback(L, cb_store, cb_name.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void ()> func
    self->func = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_func(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void ()> func
        return _olua_fun_cocos2d_CustomCommand_func$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.CustomCommand")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void ()> func
            return _olua_fun_cocos2d_CustomCommand_func$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::CustomCommand::func' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_getAfterCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    void *cb_store = (void *)self;
    std::string cb_tag = "AfterCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // const std::function<void ()> &getAfterCallback()
    std::function<void ()> ret = self->getAfterCallback();
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getBeforeCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    void *cb_store = (void *)self;
    std::string cb_tag = "BeforeCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // const std::function<void ()> &getBeforeCallback()
    std::function<void ()> ret = self->getBeforeCallback();
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getDrawType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    // cocos2d::CustomCommand::DrawType getDrawType()
    cocos2d::CustomCommand::DrawType ret = self->getDrawType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getIndexBuffer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    // cocos2d::backend::Buffer *getIndexBuffer()
    cocos2d::backend::Buffer *ret = self->getIndexBuffer();
    int num_ret = olua_push_object(L, ret, "ccb.Buffer");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getIndexCapacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    // std::size_t getIndexCapacity()
    std::size_t ret = self->getIndexCapacity();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getIndexDrawCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    // std::size_t getIndexDrawCount()
    std::size_t ret = self->getIndexDrawCount();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getIndexDrawOffset(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    // std::size_t getIndexDrawOffset()
    std::size_t ret = self->getIndexDrawOffset();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getIndexFormat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    // cocos2d::CustomCommand::IndexFormat getIndexFormat()
    cocos2d::CustomCommand::IndexFormat ret = self->getIndexFormat();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getLineWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    // float getLineWidth()
    float ret = self->getLineWidth();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getPrimitiveType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    // cocos2d::CustomCommand::PrimitiveType getPrimitiveType()
    cocos2d::CustomCommand::PrimitiveType ret = self->getPrimitiveType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getVertexBuffer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    // cocos2d::backend::Buffer *getVertexBuffer()
    cocos2d::backend::Buffer *ret = self->getVertexBuffer();
    int num_ret = olua_push_object(L, ret, "ccb.Buffer");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getVertexCapacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    // std::size_t getVertexCapacity()
    std::size_t ret = self->getVertexCapacity();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getVertexDrawCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    // std::size_t getVertexDrawCount()
    std::size_t ret = self->getVertexDrawCount();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_getVertexDrawStart(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CustomCommand");

    // std::size_t getVertexDrawStart()
    std::size_t ret = self->getVertexDrawStart();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_init$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    float arg1 = 0;       /** globalZOrder */
    cocos2d::Mat4 *arg2;       /** modelViewTransform */
    unsigned int arg3 = 0;       /** flags */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_number(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Mat4");
    olua_check_integer(L, 4, &arg3);

    // @using void init(float globalZOrder, const cocos2d::Mat4 &modelViewTransform, unsigned int flags)
    self->init(arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_init$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    float arg1 = 0;       /** globalZOrder */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_number(L, 2, &arg1);

    // void init(float globalZOrder)
    self->init(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_init$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    float arg1 = 0;       /** globalZOrder */
    cocos2d::BlendFunc *arg2;       /** blendFunc */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_number(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.BlendFunc");

    // void init(float globalZOrder, const cocos2d::BlendFunc &blendFunc)
    self->init(arg1, *arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_init(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.CustomCommand")) && (olua_is_number(L, 2))) {
            // void init(float globalZOrder)
            return _olua_fun_cocos2d_CustomCommand_init$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.CustomCommand")) && (olua_is_number(L, 2)) && (olua_is_object(L, 3, "cc.BlendFunc"))) {
            // void init(float globalZOrder, const cocos2d::BlendFunc &blendFunc)
            return _olua_fun_cocos2d_CustomCommand_init$3(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.CustomCommand")) && (olua_is_number(L, 2)) && (olua_is_object(L, 3, "cc.Mat4")) && (olua_is_integer(L, 4))) {
            // @using void init(float globalZOrder, const cocos2d::Mat4 &modelViewTransform, unsigned int flags)
            return _olua_fun_cocos2d_CustomCommand_init$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::CustomCommand::init' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::CustomCommand()
    cocos2d::CustomCommand *ret = new cocos2d::CustomCommand();
    int num_ret = olua_push_object(L, ret, "cc.CustomCommand");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CustomCommand_setAfterCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    std::function<void ()> arg1;       /** after */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_callback(L, 2, &arg1, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "AfterCallback";
    std::string cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg1 = [cb_store, cb_name, cb_ctx /*, ML */]() {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);

            olua_callback(L, cb_store, cb_name.c_str(), 0);

            lua_settop(L, top);
        }
    };

    // void setAfterCallback(const std::function<void ()> &after)
    self->setAfterCallback(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_setBeforeCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    std::function<void ()> arg1;       /** before */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_callback(L, 2, &arg1, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "BeforeCallback";
    std::string cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg1 = [cb_store, cb_name, cb_ctx /*, ML */]() {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);

            olua_callback(L, cb_store, cb_name.c_str(), 0);

            lua_settop(L, top);
        }
    };

    // void setBeforeCallback(const std::function<void ()> &before)
    self->setBeforeCallback(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_setDrawType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    cocos2d::CustomCommand::DrawType arg1 = (cocos2d::CustomCommand::DrawType)0;       /** drawType */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_enum(L, 2, &arg1);

    // void setDrawType(cocos2d::CustomCommand::DrawType drawType)
    self->setDrawType(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_setIndexBuffer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    cocos2d::backend::Buffer *arg1 = nullptr;       /** indexBuffer */
    cocos2d::CustomCommand::IndexFormat arg2 = (cocos2d::CustomCommand::IndexFormat)0;       /** indexFormat */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_object(L, 2, &arg1, "ccb.Buffer");
    olua_check_enum(L, 3, &arg2);

    // void setIndexBuffer(cocos2d::backend::Buffer *indexBuffer, cocos2d::CustomCommand::IndexFormat indexFormat)
    self->setIndexBuffer(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_setIndexDrawInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    std::size_t arg1 = 0;       /** start */
    std::size_t arg2 = 0;       /** count */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_integer(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // void setIndexDrawInfo(std::size_t start, std::size_t count)
    self->setIndexDrawInfo(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_setLineWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    float arg1 = 0;       /** lineWidth */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_number(L, 2, &arg1);

    // void setLineWidth(float lineWidth)
    self->setLineWidth(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_setPrimitiveType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    cocos2d::CustomCommand::PrimitiveType arg1 = (cocos2d::CustomCommand::PrimitiveType)0;       /** primitiveType */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_enum(L, 2, &arg1);

    // void setPrimitiveType(cocos2d::CustomCommand::PrimitiveType primitiveType)
    self->setPrimitiveType(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_setVertexBuffer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    cocos2d::backend::Buffer *arg1 = nullptr;       /** vertexBuffer */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_object(L, 2, &arg1, "ccb.Buffer");

    // void setVertexBuffer(cocos2d::backend::Buffer *vertexBuffer)
    self->setVertexBuffer(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_setVertexDrawInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    std::size_t arg1 = 0;       /** start */
    std::size_t arg2 = 0;       /** count */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_integer(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // void setVertexDrawInfo(std::size_t start, std::size_t count)
    self->setVertexDrawInfo(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_updateIndexBuffer$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    void *arg1 = nullptr;       /** data */
    std::size_t arg2 = 0;       /** length */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_integer(L, 3, &arg2);

    // void updateIndexBuffer(void *data, std::size_t length)
    self->updateIndexBuffer(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_updateIndexBuffer$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    void *arg1 = nullptr;       /** data */
    std::size_t arg2 = 0;       /** offset */
    std::size_t arg3 = 0;       /** length */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // void updateIndexBuffer(void *data, std::size_t offset, std::size_t length)
    self->updateIndexBuffer(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_updateIndexBuffer(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.CustomCommand")) && (olua_is_object(L, 2, "void *")) && (olua_is_integer(L, 3))) {
            // void updateIndexBuffer(void *data, std::size_t length)
            return _olua_fun_cocos2d_CustomCommand_updateIndexBuffer$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.CustomCommand")) && (olua_is_object(L, 2, "void *")) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4))) {
            // void updateIndexBuffer(void *data, std::size_t offset, std::size_t length)
            return _olua_fun_cocos2d_CustomCommand_updateIndexBuffer$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::CustomCommand::updateIndexBuffer' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_updateVertexBuffer$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    void *arg1 = nullptr;       /** data */
    std::size_t arg2 = 0;       /** length */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_integer(L, 3, &arg2);

    // void updateVertexBuffer(void *data, std::size_t length)
    self->updateVertexBuffer(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_updateVertexBuffer$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CustomCommand *self = nullptr;
    void *arg1 = nullptr;       /** data */
    std::size_t arg2 = 0;       /** offset */
    std::size_t arg3 = 0;       /** length */

    olua_to_object(L, 1, &self, "cc.CustomCommand");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // void updateVertexBuffer(void *data, std::size_t offset, std::size_t length)
    self->updateVertexBuffer(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CustomCommand_updateVertexBuffer(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.CustomCommand")) && (olua_is_object(L, 2, "void *")) && (olua_is_integer(L, 3))) {
            // void updateVertexBuffer(void *data, std::size_t length)
            return _olua_fun_cocos2d_CustomCommand_updateVertexBuffer$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.CustomCommand")) && (olua_is_object(L, 2, "void *")) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4))) {
            // void updateVertexBuffer(void *data, std::size_t offset, std::size_t length)
            return _olua_fun_cocos2d_CustomCommand_updateVertexBuffer$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::CustomCommand::updateVertexBuffer' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_CustomCommand(lua_State *L)
{
    oluacls_class<cocos2d::CustomCommand, cocos2d::RenderCommand>(L, "cc.CustomCommand");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_CustomCommand___gc);
    oluacls_func(L, "createIndexBuffer", _olua_fun_cocos2d_CustomCommand_createIndexBuffer);
    oluacls_func(L, "createVertexBuffer", _olua_fun_cocos2d_CustomCommand_createVertexBuffer);
    oluacls_func(L, "getAfterCallback", _olua_fun_cocos2d_CustomCommand_getAfterCallback);
    oluacls_func(L, "getBeforeCallback", _olua_fun_cocos2d_CustomCommand_getBeforeCallback);
    oluacls_func(L, "getDrawType", _olua_fun_cocos2d_CustomCommand_getDrawType);
    oluacls_func(L, "getIndexBuffer", _olua_fun_cocos2d_CustomCommand_getIndexBuffer);
    oluacls_func(L, "getIndexCapacity", _olua_fun_cocos2d_CustomCommand_getIndexCapacity);
    oluacls_func(L, "getIndexDrawCount", _olua_fun_cocos2d_CustomCommand_getIndexDrawCount);
    oluacls_func(L, "getIndexDrawOffset", _olua_fun_cocos2d_CustomCommand_getIndexDrawOffset);
    oluacls_func(L, "getIndexFormat", _olua_fun_cocos2d_CustomCommand_getIndexFormat);
    oluacls_func(L, "getLineWidth", _olua_fun_cocos2d_CustomCommand_getLineWidth);
    oluacls_func(L, "getPrimitiveType", _olua_fun_cocos2d_CustomCommand_getPrimitiveType);
    oluacls_func(L, "getVertexBuffer", _olua_fun_cocos2d_CustomCommand_getVertexBuffer);
    oluacls_func(L, "getVertexCapacity", _olua_fun_cocos2d_CustomCommand_getVertexCapacity);
    oluacls_func(L, "getVertexDrawCount", _olua_fun_cocos2d_CustomCommand_getVertexDrawCount);
    oluacls_func(L, "getVertexDrawStart", _olua_fun_cocos2d_CustomCommand_getVertexDrawStart);
    oluacls_func(L, "init", _olua_fun_cocos2d_CustomCommand_init);
    oluacls_func(L, "new", _olua_fun_cocos2d_CustomCommand_new);
    oluacls_func(L, "setAfterCallback", _olua_fun_cocos2d_CustomCommand_setAfterCallback);
    oluacls_func(L, "setBeforeCallback", _olua_fun_cocos2d_CustomCommand_setBeforeCallback);
    oluacls_func(L, "setDrawType", _olua_fun_cocos2d_CustomCommand_setDrawType);
    oluacls_func(L, "setIndexBuffer", _olua_fun_cocos2d_CustomCommand_setIndexBuffer);
    oluacls_func(L, "setIndexDrawInfo", _olua_fun_cocos2d_CustomCommand_setIndexDrawInfo);
    oluacls_func(L, "setLineWidth", _olua_fun_cocos2d_CustomCommand_setLineWidth);
    oluacls_func(L, "setPrimitiveType", _olua_fun_cocos2d_CustomCommand_setPrimitiveType);
    oluacls_func(L, "setVertexBuffer", _olua_fun_cocos2d_CustomCommand_setVertexBuffer);
    oluacls_func(L, "setVertexDrawInfo", _olua_fun_cocos2d_CustomCommand_setVertexDrawInfo);
    oluacls_func(L, "updateIndexBuffer", _olua_fun_cocos2d_CustomCommand_updateIndexBuffer);
    oluacls_func(L, "updateVertexBuffer", _olua_fun_cocos2d_CustomCommand_updateVertexBuffer);
    oluacls_prop(L, "afterCallback", _olua_fun_cocos2d_CustomCommand_getAfterCallback, _olua_fun_cocos2d_CustomCommand_setAfterCallback);
    oluacls_prop(L, "beforeCallback", _olua_fun_cocos2d_CustomCommand_getBeforeCallback, _olua_fun_cocos2d_CustomCommand_setBeforeCallback);
    oluacls_prop(L, "drawType", _olua_fun_cocos2d_CustomCommand_getDrawType, _olua_fun_cocos2d_CustomCommand_setDrawType);
    oluacls_prop(L, "indexCapacity", _olua_fun_cocos2d_CustomCommand_getIndexCapacity, nullptr);
    oluacls_prop(L, "indexDrawCount", _olua_fun_cocos2d_CustomCommand_getIndexDrawCount, nullptr);
    oluacls_prop(L, "indexDrawOffset", _olua_fun_cocos2d_CustomCommand_getIndexDrawOffset, nullptr);
    oluacls_prop(L, "indexFormat", _olua_fun_cocos2d_CustomCommand_getIndexFormat, nullptr);
    oluacls_prop(L, "lineWidth", _olua_fun_cocos2d_CustomCommand_getLineWidth, _olua_fun_cocos2d_CustomCommand_setLineWidth);
    oluacls_prop(L, "primitiveType", _olua_fun_cocos2d_CustomCommand_getPrimitiveType, _olua_fun_cocos2d_CustomCommand_setPrimitiveType);
    oluacls_prop(L, "vertexBuffer", _olua_fun_cocos2d_CustomCommand_getVertexBuffer, _olua_fun_cocos2d_CustomCommand_setVertexBuffer);
    oluacls_prop(L, "vertexCapacity", _olua_fun_cocos2d_CustomCommand_getVertexCapacity, nullptr);
    oluacls_prop(L, "vertexDrawCount", _olua_fun_cocos2d_CustomCommand_getVertexDrawCount, nullptr);
    oluacls_prop(L, "vertexDrawStart", _olua_fun_cocos2d_CustomCommand_getVertexDrawStart, nullptr);
    oluacls_prop(L, "func", _olua_fun_cocos2d_CustomCommand_func, _olua_fun_cocos2d_CustomCommand_func);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_CustomCommand(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.CustomCommand")) {
        luaL_error(L, "class not found: cocos2d::CustomCommand");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_MeshCommand_init$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MeshCommand *self = nullptr;
    float arg1 = 0;       /** globalZOrder */

    olua_to_object(L, 1, &self, "cc.MeshCommand");
    olua_check_number(L, 2, &arg1);

    // @using void init(float globalZOrder)
    self->init(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_MeshCommand_init$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MeshCommand *self = nullptr;
    float arg1 = 0;       /** globalZOrder */
    cocos2d::Mat4 *arg2;       /** transform */

    olua_to_object(L, 1, &self, "cc.MeshCommand");
    olua_check_number(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Mat4");

    // void init(float globalZOrder, const cocos2d::Mat4 &transform)
    self->init(arg1, *arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_MeshCommand_init(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.MeshCommand")) && (olua_is_number(L, 2))) {
            // @using void init(float globalZOrder)
            return _olua_fun_cocos2d_MeshCommand_init$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.MeshCommand")) && (olua_is_number(L, 2)) && (olua_is_object(L, 3, "cc.Mat4"))) {
            // void init(float globalZOrder, const cocos2d::Mat4 &transform)
            return _olua_fun_cocos2d_MeshCommand_init$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::MeshCommand::init' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_MeshCommand_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::MeshCommand()
    cocos2d::MeshCommand *ret = new cocos2d::MeshCommand();
    int num_ret = olua_push_object(L, ret, "cc.MeshCommand");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_MeshCommand(lua_State *L)
{
    oluacls_class<cocos2d::MeshCommand, cocos2d::CustomCommand>(L, "cc.MeshCommand");
    oluacls_func(L, "init", _olua_fun_cocos2d_MeshCommand_init);
    oluacls_func(L, "new", _olua_fun_cocos2d_MeshCommand_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_MeshCommand(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.MeshCommand")) {
        luaL_error(L, "class not found: cocos2d::MeshCommand");
    }
    return 1;
}
OLUA_END_DECLS

static const std::string makeTextureCacheCallbackTag(const std::string &key)
{
    return "addImageAsync." + key;
}

static int _olua_fun_cocos2d_TextureCache_addImage$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** filepath */

    olua_to_object(L, 1, &self, "cc.TextureCache");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Texture2D *addImage(const std::string &filepath)
    cocos2d::Texture2D *ret = self->addImage(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCache_addImage$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    cocos2d::Image *arg1 = nullptr;       /** image */
    std::string arg2;       /** key */

    olua_to_object(L, 1, &self, "cc.TextureCache");
    olua_check_object(L, 2, &arg1, "cc.Image");
    olua_check_string(L, 3, &arg2);

    // cocos2d::Texture2D *addImage(cocos2d::Image *image, const std::string &key)
    cocos2d::Texture2D *ret = self->addImage(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCache_addImage(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.TextureCache")) && (olua_is_string(L, 2))) {
            // cocos2d::Texture2D *addImage(const std::string &filepath)
            return _olua_fun_cocos2d_TextureCache_addImage$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.TextureCache")) && (olua_is_object(L, 2, "cc.Image")) && (olua_is_string(L, 3))) {
            // cocos2d::Texture2D *addImage(cocos2d::Image *image, const std::string &key)
            return _olua_fun_cocos2d_TextureCache_addImage$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextureCache::addImage' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TextureCache_addImageAsync$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** filepath */
    std::function<void (cocos2d::Texture2D *)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.TextureCache");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = makeTextureCacheCallbackTag(arg1);
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Texture2D *cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_object(L, cb_arg1, "cc.Texture2D");

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void addImageAsync(const std::string &filepath, const std::function<void (cocos2d::Texture2D *)> &callback)
    self->addImageAsync(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureCache_addImageAsync$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** path */
    std::function<void (cocos2d::Texture2D *)> arg2;       /** callback */
    std::string arg3;       /** callbackKey */

    olua_to_object(L, 1, &self, "cc.TextureCache");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");
    olua_check_string(L, 4, &arg3);

    void *cb_store = (void *)self;
    std::string cb_tag = makeTextureCacheCallbackTag(arg3);
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Texture2D *cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_object(L, cb_arg1, "cc.Texture2D");

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void addImageAsync(const std::string &path, const std::function<void (cocos2d::Texture2D *)> &callback, const std::string &callbackKey)
    self->addImageAsync(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureCache_addImageAsync(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.TextureCache")) && (olua_is_string(L, 2)) && (olua_is_callback(L, 3, "std.function"))) {
            // void addImageAsync(const std::string &filepath, const std::function<void (cocos2d::Texture2D *)> &callback)
            return _olua_fun_cocos2d_TextureCache_addImageAsync$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.TextureCache")) && (olua_is_string(L, 2)) && (olua_is_callback(L, 3, "std.function")) && (olua_is_string(L, 4))) {
            // void addImageAsync(const std::string &path, const std::function<void (cocos2d::Texture2D *)> &callback, const std::string &callbackKey)
            return _olua_fun_cocos2d_TextureCache_addImageAsync$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextureCache::addImageAsync' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TextureCache_getCachedTextureInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureCache");

    // std::string getCachedTextureInfo()
    std::string ret = self->getCachedTextureInfo();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCache_getDescription(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureCache");

    // std::string getDescription()
    std::string ret = self->getDescription();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCache_getETC1AlphaFileSuffix(lua_State *L)
{
    olua_startinvoke(L);

    // static std::string getETC1AlphaFileSuffix()
    std::string ret = cocos2d::TextureCache::getETC1AlphaFileSuffix();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCache_getTextureFilePath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.TextureCache");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // std::string getTextureFilePath(cocos2d::Texture2D *texture)
    std::string ret = self->getTextureFilePath(arg1);
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCache_getTextureForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** key */

    olua_to_object(L, 1, &self, "cc.TextureCache");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Texture2D *getTextureForKey(const std::string &key)
    cocos2d::Texture2D *ret = self->getTextureForKey(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCache_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TextureCache()
    cocos2d::TextureCache *ret = new cocos2d::TextureCache();
    int num_ret = olua_push_object(L, ret, "cc.TextureCache");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCache_reloadTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** fileName */

    olua_to_object(L, 1, &self, "cc.TextureCache");
    olua_check_string(L, 2, &arg1);

    // bool reloadTexture(const std::string &fileName)
    bool ret = self->reloadTexture(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCache_removeAllTextures(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureCache");

    // void removeAllTextures()
    self->removeAllTextures();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureCache_removeTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.TextureCache");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // void removeTexture(cocos2d::Texture2D *texture)
    self->removeTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureCache_removeTextureForKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** key */

    olua_to_object(L, 1, &self, "cc.TextureCache");
    olua_check_string(L, 2, &arg1);

    // void removeTextureForKey(const std::string &key)
    self->removeTextureForKey(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureCache_removeUnusedTextures(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureCache");

    // void removeUnusedTextures()
    self->removeUnusedTextures();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureCache_renameTextureWithKey(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** srcName */
    std::string arg2;       /** dstName */

    olua_to_object(L, 1, &self, "cc.TextureCache");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // void renameTextureWithKey(const std::string &srcName, const std::string &dstName)
    self->renameTextureWithKey(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureCache_setETC1AlphaFileSuffix(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** suffix */

    olua_check_string(L, 1, &arg1);

    // static void setETC1AlphaFileSuffix(const std::string &suffix)
    cocos2d::TextureCache::setETC1AlphaFileSuffix(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureCache_unbindAllImageAsync(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureCache");

    std::string cb_tag = makeTextureCacheCallbackTag("");
    void *cb_store = (void *)self;
    olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_STARTWITH);

    // void unbindAllImageAsync()
    self->unbindAllImageAsync();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureCache_unbindImageAsync(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.TextureCache");
    olua_check_string(L, 2, &arg1);

    std::string cb_tag = makeTextureCacheCallbackTag(arg1);
    void *cb_store = (void *)self;
    olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // void unbindImageAsync(const std::string &filename)
    self->unbindImageAsync(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureCache_waitForQuit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCache *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureCache");

    // void waitForQuit()
    self->waitForQuit();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_TextureCache(lua_State *L)
{
    oluacls_class<cocos2d::TextureCache, cocos2d::Ref>(L, "cc.TextureCache");
    oluacls_func(L, "addImage", _olua_fun_cocos2d_TextureCache_addImage);
    oluacls_func(L, "addImageAsync", _olua_fun_cocos2d_TextureCache_addImageAsync);
    oluacls_func(L, "getCachedTextureInfo", _olua_fun_cocos2d_TextureCache_getCachedTextureInfo);
    oluacls_func(L, "getDescription", _olua_fun_cocos2d_TextureCache_getDescription);
    oluacls_func(L, "getETC1AlphaFileSuffix", _olua_fun_cocos2d_TextureCache_getETC1AlphaFileSuffix);
    oluacls_func(L, "getTextureFilePath", _olua_fun_cocos2d_TextureCache_getTextureFilePath);
    oluacls_func(L, "getTextureForKey", _olua_fun_cocos2d_TextureCache_getTextureForKey);
    oluacls_func(L, "new", _olua_fun_cocos2d_TextureCache_new);
    oluacls_func(L, "reloadTexture", _olua_fun_cocos2d_TextureCache_reloadTexture);
    oluacls_func(L, "removeAllTextures", _olua_fun_cocos2d_TextureCache_removeAllTextures);
    oluacls_func(L, "removeTexture", _olua_fun_cocos2d_TextureCache_removeTexture);
    oluacls_func(L, "removeTextureForKey", _olua_fun_cocos2d_TextureCache_removeTextureForKey);
    oluacls_func(L, "removeUnusedTextures", _olua_fun_cocos2d_TextureCache_removeUnusedTextures);
    oluacls_func(L, "renameTextureWithKey", _olua_fun_cocos2d_TextureCache_renameTextureWithKey);
    oluacls_func(L, "setETC1AlphaFileSuffix", _olua_fun_cocos2d_TextureCache_setETC1AlphaFileSuffix);
    oluacls_func(L, "unbindAllImageAsync", _olua_fun_cocos2d_TextureCache_unbindAllImageAsync);
    oluacls_func(L, "unbindImageAsync", _olua_fun_cocos2d_TextureCache_unbindImageAsync);
    oluacls_func(L, "waitForQuit", _olua_fun_cocos2d_TextureCache_waitForQuit);
    oluacls_prop(L, "cachedTextureInfo", _olua_fun_cocos2d_TextureCache_getCachedTextureInfo, nullptr);
    oluacls_prop(L, "description", _olua_fun_cocos2d_TextureCache_getDescription, nullptr);
    oluacls_prop(L, "etC1AlphaFileSuffix", _olua_fun_cocos2d_TextureCache_getETC1AlphaFileSuffix, _olua_fun_cocos2d_TextureCache_setETC1AlphaFileSuffix);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TextureCache(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TextureCache")) {
        luaL_error(L, "class not found: cocos2d::TextureCache");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Texture2D_drawAtPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Vec2 *arg1;       /** point */
    float arg2 = 0;       /** globalZOrder */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_number(L, 3, &arg2);

    // void drawAtPoint(const cocos2d::Vec2 &point, float globalZOrder)
    self->drawAtPoint(*arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_drawInRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Rect *arg1;       /** rect */
    float arg2 = 0;       /** globalZOrder */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "cc.Rect");
    olua_check_number(L, 3, &arg2);

    // void drawInRect(const cocos2d::Rect &rect, float globalZOrder)
    self->drawInRect(*arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_generateMipmap(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // void generateMipmap()
    self->generateMipmap();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_getAlphaTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // cocos2d::Texture2D *getAlphaTexture()
    cocos2d::Texture2D *ret = self->getAlphaTexture();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getAlphaTextureName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // bool getAlphaTextureName()
    bool ret = self->getAlphaTextureName();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getBackendTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // cocos2d::backend::TextureBackend *getBackendTexture()
    cocos2d::backend::TextureBackend *ret = self->getBackendTexture();
    int num_ret = olua_push_object(L, ret, "ccb.TextureBackend");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getBitsPerPixelForFormat$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // unsigned int getBitsPerPixelForFormat()
    unsigned int ret = self->getBitsPerPixelForFormat();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getBitsPerPixelForFormat$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::backend::PixelFormat arg1 = (cocos2d::backend::PixelFormat)0;       /** format */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_enum(L, 2, &arg1);

    // unsigned int getBitsPerPixelForFormat(cocos2d::backend::PixelFormat format)
    unsigned int ret = self->getBitsPerPixelForFormat(arg1);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getBitsPerPixelForFormat(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // unsigned int getBitsPerPixelForFormat()
        return _olua_fun_cocos2d_Texture2D_getBitsPerPixelForFormat$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_enum(L, 2))) {
            // unsigned int getBitsPerPixelForFormat(cocos2d::backend::PixelFormat format)
            return _olua_fun_cocos2d_Texture2D_getBitsPerPixelForFormat$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::getBitsPerPixelForFormat' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_getContentSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // cocos2d::Size getContentSize()
    cocos2d::Size ret = self->getContentSize();
    int num_ret = olua_copy_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getContentSizeInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // const cocos2d::Size &getContentSizeInPixels()
    const cocos2d::Size &ret = self->getContentSizeInPixels();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getDefaultAlphaPixelFormat(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::backend::PixelFormat getDefaultAlphaPixelFormat()
    cocos2d::backend::PixelFormat ret = cocos2d::Texture2D::getDefaultAlphaPixelFormat();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getMaxS(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // float getMaxS()
    float ret = self->getMaxS();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getMaxT(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // float getMaxT()
    float ret = self->getMaxT();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getPath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // std::string getPath()
    std::string ret = self->getPath();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getPixelFormat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // cocos2d::backend::PixelFormat getPixelFormat()
    cocos2d::backend::PixelFormat ret = self->getPixelFormat();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getPixelFormatInfoMap(lua_State *L)
{
    olua_startinvoke(L);

    // static const std::map<cocos2d::backend::PixelFormat, const cocos2d::Texture2D::PixelFormatInfo> &getPixelFormatInfoMap()
    const std::map<cocos2d::backend::PixelFormat, const cocos2d::Texture2D::PixelFormatInfo> &ret = cocos2d::Texture2D::getPixelFormatInfoMap();
    int num_ret = olua_push_map<cocos2d::backend::PixelFormat, const cocos2d::Texture2D::PixelFormatInfo>(L, ret, [L](cocos2d::backend::PixelFormat &arg1, const cocos2d::Texture2D::PixelFormatInfo &arg2) {
        olua_push_enum(L, arg1);
        olua_copy_object(L, arg2, "cc.Texture2D.PixelFormatInfo");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getPixelsHigh(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // int getPixelsHigh()
    int ret = self->getPixelsHigh();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getPixelsWide(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // int getPixelsWide()
    int ret = self->getPixelsWide();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_getStringForFormat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // const char *getStringForFormat()
    const char *ret = self->getStringForFormat();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_hasMipmaps(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // bool hasMipmaps()
    bool ret = self->hasMipmaps();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_hasPremultipliedAlpha(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // bool hasPremultipliedAlpha()
    bool ret = self->hasPremultipliedAlpha();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithBackendTexture$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::backend::TextureBackend *arg1 = nullptr;       /** texture */
    bool arg2 = false;       /** preMultipliedAlpha */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "ccb.TextureBackend");
    olua_check_bool(L, 3, &arg2);

    // bool initWithBackendTexture(cocos2d::backend::TextureBackend *texture, @optional bool preMultipliedAlpha)
    bool ret = self->initWithBackendTexture(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithBackendTexture$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::backend::TextureBackend *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "ccb.TextureBackend");

    // bool initWithBackendTexture(cocos2d::backend::TextureBackend *texture)
    bool ret = self->initWithBackendTexture(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithBackendTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_object(L, 2, "ccb.TextureBackend"))) {
            // bool initWithBackendTexture(cocos2d::backend::TextureBackend *texture)
            return _olua_fun_cocos2d_Texture2D_initWithBackendTexture$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_object(L, 2, "ccb.TextureBackend")) && (olua_is_bool(L, 3))) {
            // bool initWithBackendTexture(cocos2d::backend::TextureBackend *texture, @optional bool preMultipliedAlpha)
            return _olua_fun_cocos2d_Texture2D_initWithBackendTexture$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::initWithBackendTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_initWithData$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    void *arg1 = nullptr;       /** data */
    ssize_t arg2 = 0;       /** dataLen */
    cocos2d::backend::PixelFormat arg3 = (cocos2d::backend::PixelFormat)0;       /** pixelFormat */
    int arg4 = 0;       /** pixelsWide */
    int arg5 = 0;       /** pixelsHigh */
    cocos2d::Size *arg6;       /** contentSize */
    bool arg7 = false;       /** preMultipliedAlpha */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_integer(L, 3, &arg2);
    olua_check_enum(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_integer(L, 6, &arg5);
    olua_check_object(L, 7, &arg6, "cc.Size");
    olua_check_bool(L, 8, &arg7);

    // bool initWithData(const void *data, ssize_t dataLen, cocos2d::backend::PixelFormat pixelFormat, int pixelsWide, int pixelsHigh, const cocos2d::Size &contentSize, @optional bool preMultipliedAlpha)
    bool ret = self->initWithData(arg1, arg2, arg3, arg4, arg5, *arg6, arg7);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithData$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    void *arg1 = nullptr;       /** data */
    ssize_t arg2 = 0;       /** dataLen */
    cocos2d::backend::PixelFormat arg3 = (cocos2d::backend::PixelFormat)0;       /** pixelFormat */
    int arg4 = 0;       /** pixelsWide */
    int arg5 = 0;       /** pixelsHigh */
    cocos2d::Size *arg6;       /** contentSize */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_integer(L, 3, &arg2);
    olua_check_enum(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_integer(L, 6, &arg5);
    olua_check_object(L, 7, &arg6, "cc.Size");

    // bool initWithData(const void *data, ssize_t dataLen, cocos2d::backend::PixelFormat pixelFormat, int pixelsWide, int pixelsHigh, const cocos2d::Size &contentSize)
    bool ret = self->initWithData(arg1, arg2, arg3, arg4, arg5, *arg6);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithData$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    void *arg1 = nullptr;       /** data */
    ssize_t arg2 = 0;       /** dataLen */
    cocos2d::backend::PixelFormat arg3 = (cocos2d::backend::PixelFormat)0;       /** pixelFormat */
    cocos2d::backend::PixelFormat arg4 = (cocos2d::backend::PixelFormat)0;       /** renderFormat */
    int arg5 = 0;       /** pixelsWide */
    int arg6 = 0;       /** pixelsHigh */
    cocos2d::Size *arg7;       /** contentSize */
    bool arg8 = false;       /** preMultipliedAlpha */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_integer(L, 3, &arg2);
    olua_check_enum(L, 4, &arg3);
    olua_check_enum(L, 5, &arg4);
    olua_check_integer(L, 6, &arg5);
    olua_check_integer(L, 7, &arg6);
    olua_check_object(L, 8, &arg7, "cc.Size");
    olua_check_bool(L, 9, &arg8);

    // bool initWithData(const void *data, ssize_t dataLen, cocos2d::backend::PixelFormat pixelFormat, cocos2d::backend::PixelFormat renderFormat, int pixelsWide, int pixelsHigh, const cocos2d::Size &contentSize, @optional bool preMultipliedAlpha)
    bool ret = self->initWithData(arg1, arg2, arg3, arg4, arg5, arg6, *arg7, arg8);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithData$4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    void *arg1 = nullptr;       /** data */
    ssize_t arg2 = 0;       /** dataLen */
    cocos2d::backend::PixelFormat arg3 = (cocos2d::backend::PixelFormat)0;       /** pixelFormat */
    cocos2d::backend::PixelFormat arg4 = (cocos2d::backend::PixelFormat)0;       /** renderFormat */
    int arg5 = 0;       /** pixelsWide */
    int arg6 = 0;       /** pixelsHigh */
    cocos2d::Size *arg7;       /** contentSize */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_integer(L, 3, &arg2);
    olua_check_enum(L, 4, &arg3);
    olua_check_enum(L, 5, &arg4);
    olua_check_integer(L, 6, &arg5);
    olua_check_integer(L, 7, &arg6);
    olua_check_object(L, 8, &arg7, "cc.Size");

    // bool initWithData(const void *data, ssize_t dataLen, cocos2d::backend::PixelFormat pixelFormat, cocos2d::backend::PixelFormat renderFormat, int pixelsWide, int pixelsHigh, const cocos2d::Size &contentSize)
    bool ret = self->initWithData(arg1, arg2, arg3, arg4, arg5, arg6, *arg7);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithData(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 7) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_object(L, 2, "void *")) && (olua_is_integer(L, 3)) && (olua_is_enum(L, 4)) && (olua_is_integer(L, 5)) && (olua_is_integer(L, 6)) && (olua_is_object(L, 7, "cc.Size"))) {
            // bool initWithData(const void *data, ssize_t dataLen, cocos2d::backend::PixelFormat pixelFormat, int pixelsWide, int pixelsHigh, const cocos2d::Size &contentSize)
            return _olua_fun_cocos2d_Texture2D_initWithData$2(L);
        // }
    }

    if (num_args == 8) {
        if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_object(L, 2, "void *")) && (olua_is_integer(L, 3)) && (olua_is_enum(L, 4)) && (olua_is_integer(L, 5)) && (olua_is_integer(L, 6)) && (olua_is_object(L, 7, "cc.Size")) && (olua_is_bool(L, 8))) {
            // bool initWithData(const void *data, ssize_t dataLen, cocos2d::backend::PixelFormat pixelFormat, int pixelsWide, int pixelsHigh, const cocos2d::Size &contentSize, @optional bool preMultipliedAlpha)
            return _olua_fun_cocos2d_Texture2D_initWithData$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_object(L, 2, "void *")) && (olua_is_integer(L, 3)) && (olua_is_enum(L, 4)) && (olua_is_enum(L, 5)) && (olua_is_integer(L, 6)) && (olua_is_integer(L, 7)) && (olua_is_object(L, 8, "cc.Size"))) {
            // bool initWithData(const void *data, ssize_t dataLen, cocos2d::backend::PixelFormat pixelFormat, cocos2d::backend::PixelFormat renderFormat, int pixelsWide, int pixelsHigh, const cocos2d::Size &contentSize)
            return _olua_fun_cocos2d_Texture2D_initWithData$4(L);
        // }
    }

    if (num_args == 9) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_object(L, 2, "void *")) && (olua_is_integer(L, 3)) && (olua_is_enum(L, 4)) && (olua_is_enum(L, 5)) && (olua_is_integer(L, 6)) && (olua_is_integer(L, 7)) && (olua_is_object(L, 8, "cc.Size")) && (olua_is_bool(L, 9))) {
            // bool initWithData(const void *data, ssize_t dataLen, cocos2d::backend::PixelFormat pixelFormat, cocos2d::backend::PixelFormat renderFormat, int pixelsWide, int pixelsHigh, const cocos2d::Size &contentSize, @optional bool preMultipliedAlpha)
            return _olua_fun_cocos2d_Texture2D_initWithData$3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::initWithData' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_initWithImage$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Image *arg1 = nullptr;       /** image */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "cc.Image");

    // bool initWithImage(cocos2d::Image *image)
    bool ret = self->initWithImage(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithImage$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Image *arg1 = nullptr;       /** image */
    cocos2d::backend::PixelFormat arg2 = (cocos2d::backend::PixelFormat)0;       /** format */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "cc.Image");
    olua_check_enum(L, 3, &arg2);

    // bool initWithImage(cocos2d::Image *image, cocos2d::backend::PixelFormat format)
    bool ret = self->initWithImage(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithImage(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_object(L, 2, "cc.Image"))) {
            // bool initWithImage(cocos2d::Image *image)
            return _olua_fun_cocos2d_Texture2D_initWithImage$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_object(L, 2, "cc.Image")) && (olua_is_enum(L, 3))) {
            // bool initWithImage(cocos2d::Image *image, cocos2d::backend::PixelFormat format)
            return _olua_fun_cocos2d_Texture2D_initWithImage$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::initWithImage' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_initWithString$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    const char *arg1 = nullptr;       /** text */
    std::string arg2;       /** fontName */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */
    cocos2d::TextHAlignment arg5 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    cocos2d::TextVAlignment arg6 = (cocos2d::TextVAlignment)0;       /** vAlignment */
    bool arg7 = false;       /** enableWrap */
    int arg8 = 0;       /** overflow */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_object(L, 5, &arg4, "cc.Size");
    olua_check_enum(L, 6, &arg5);
    olua_check_enum(L, 7, &arg6);
    olua_check_bool(L, 8, &arg7);
    olua_check_integer(L, 9, &arg8);

    // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
    bool ret = self->initWithString(arg1, arg2, arg3, *arg4, arg5, arg6, arg7, arg8);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithString$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    const char *arg1 = nullptr;       /** text */
    std::string arg2;       /** fontName */
    float arg3 = 0;       /** fontSize */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // bool initWithString(const char *text, const std::string &fontName, float fontSize)
    bool ret = self->initWithString(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithString$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    const char *arg1 = nullptr;       /** text */
    std::string arg2;       /** fontName */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_object(L, 5, &arg4, "cc.Size");

    // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions)
    bool ret = self->initWithString(arg1, arg2, arg3, *arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithString$4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    const char *arg1 = nullptr;       /** text */
    std::string arg2;       /** fontName */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */
    cocos2d::TextHAlignment arg5 = (cocos2d::TextHAlignment)0;       /** hAlignment */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_object(L, 5, &arg4, "cc.Size");
    olua_check_enum(L, 6, &arg5);

    // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment)
    bool ret = self->initWithString(arg1, arg2, arg3, *arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithString$5(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    const char *arg1 = nullptr;       /** text */
    std::string arg2;       /** fontName */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */
    cocos2d::TextHAlignment arg5 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    cocos2d::TextVAlignment arg6 = (cocos2d::TextVAlignment)0;       /** vAlignment */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_object(L, 5, &arg4, "cc.Size");
    olua_check_enum(L, 6, &arg5);
    olua_check_enum(L, 7, &arg6);

    // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    bool ret = self->initWithString(arg1, arg2, arg3, *arg4, arg5, arg6);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithString$6(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    const char *arg1 = nullptr;       /** text */
    std::string arg2;       /** fontName */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */
    cocos2d::TextHAlignment arg5 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    cocos2d::TextVAlignment arg6 = (cocos2d::TextVAlignment)0;       /** vAlignment */
    bool arg7 = false;       /** enableWrap */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_object(L, 5, &arg4, "cc.Size");
    olua_check_enum(L, 6, &arg5);
    olua_check_enum(L, 7, &arg6);
    olua_check_bool(L, 8, &arg7);

    // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap)
    bool ret = self->initWithString(arg1, arg2, arg3, *arg4, arg5, arg6, arg7);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_initWithString(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_number(L, 4))) {
            // bool initWithString(const char *text, const std::string &fontName, float fontSize)
            return _olua_fun_cocos2d_Texture2D_initWithString$2(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_number(L, 4)) && (olua_is_object(L, 5, "cc.Size"))) {
            // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions)
            return _olua_fun_cocos2d_Texture2D_initWithString$3(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_number(L, 4)) && (olua_is_object(L, 5, "cc.Size")) && (olua_is_enum(L, 6))) {
            // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment)
            return _olua_fun_cocos2d_Texture2D_initWithString$4(L);
        // }
    }

    if (num_args == 7) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_number(L, 4)) && (olua_is_object(L, 5, "cc.Size")) && (olua_is_enum(L, 6)) && (olua_is_enum(L, 7))) {
            // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _olua_fun_cocos2d_Texture2D_initWithString$5(L);
        // }
    }

    if (num_args == 8) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_number(L, 4)) && (olua_is_object(L, 5, "cc.Size")) && (olua_is_enum(L, 6)) && (olua_is_enum(L, 7)) && (olua_is_bool(L, 8))) {
            // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap)
            return _olua_fun_cocos2d_Texture2D_initWithString$6(L);
        // }
    }

    if (num_args == 9) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_number(L, 4)) && (olua_is_object(L, 5, "cc.Size")) && (olua_is_enum(L, 6)) && (olua_is_enum(L, 7)) && (olua_is_bool(L, 8)) && (olua_is_integer(L, 9))) {
            // bool initWithString(const char *text, const std::string &fontName, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment, @optional bool enableWrap, @optional int overflow)
            return _olua_fun_cocos2d_Texture2D_initWithString$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Texture2D::initWithString' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_isRenderTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // bool isRenderTarget()
    bool ret = self->isRenderTarget();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Texture2D()
    cocos2d::Texture2D *ret = new cocos2d::Texture2D();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Texture2D_setAliasTexParameters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // void setAliasTexParameters()
    self->setAliasTexParameters();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_setAlphaTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** alphaTexture */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // void setAlphaTexture(cocos2d::Texture2D *alphaTexture)
    self->setAlphaTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_setAntiAliasTexParameters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Texture2D");

    // void setAntiAliasTexParameters()
    self->setAntiAliasTexParameters();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_setDefaultAlphaPixelFormat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::backend::PixelFormat arg1 = (cocos2d::backend::PixelFormat)0;       /** format */

    olua_check_enum(L, 1, &arg1);

    // static void setDefaultAlphaPixelFormat(cocos2d::backend::PixelFormat format)
    cocos2d::Texture2D::setDefaultAlphaPixelFormat(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_setMaxS(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    float arg1 = 0;       /** maxS */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_number(L, 2, &arg1);

    // void setMaxS(float maxS)
    self->setMaxS(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_setMaxT(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    float arg1 = 0;       /** maxT */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_number(L, 2, &arg1);

    // void setMaxT(float maxT)
    self->setMaxT(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_setRenderTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    bool arg1 = false;       /** renderTarget */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_bool(L, 2, &arg1);

    // void setRenderTarget(bool renderTarget)
    self->setRenderTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_setTexParameters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    cocos2d::Texture2D::TexParams *arg1;       /** params */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "ccb.SamplerDescriptor");

    // void setTexParameters(const cocos2d::Texture2D::TexParams &params)
    self->setTexParameters(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Texture2D_updateWithData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *self = nullptr;
    void *arg1 = nullptr;       /** data */
    int arg2 = 0;       /** offsetX */
    int arg3 = 0;       /** offsetY */
    int arg4 = 0;       /** width */
    int arg5 = 0;       /** height */

    olua_to_object(L, 1, &self, "cc.Texture2D");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_integer(L, 6, &arg5);

    // bool updateWithData(void *data, int offsetX, int offsetY, int width, int height)
    bool ret = self->updateWithData(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_Texture2D(lua_State *L)
{
    oluacls_class<cocos2d::Texture2D, cocos2d::Ref>(L, "cc.Texture2D");
    oluacls_func(L, "drawAtPoint", _olua_fun_cocos2d_Texture2D_drawAtPoint);
    oluacls_func(L, "drawInRect", _olua_fun_cocos2d_Texture2D_drawInRect);
    oluacls_func(L, "generateMipmap", _olua_fun_cocos2d_Texture2D_generateMipmap);
    oluacls_func(L, "getAlphaTexture", _olua_fun_cocos2d_Texture2D_getAlphaTexture);
    oluacls_func(L, "getAlphaTextureName", _olua_fun_cocos2d_Texture2D_getAlphaTextureName);
    oluacls_func(L, "getBackendTexture", _olua_fun_cocos2d_Texture2D_getBackendTexture);
    oluacls_func(L, "getBitsPerPixelForFormat", _olua_fun_cocos2d_Texture2D_getBitsPerPixelForFormat);
    oluacls_func(L, "getContentSize", _olua_fun_cocos2d_Texture2D_getContentSize);
    oluacls_func(L, "getContentSizeInPixels", _olua_fun_cocos2d_Texture2D_getContentSizeInPixels);
    oluacls_func(L, "getDefaultAlphaPixelFormat", _olua_fun_cocos2d_Texture2D_getDefaultAlphaPixelFormat);
    oluacls_func(L, "getMaxS", _olua_fun_cocos2d_Texture2D_getMaxS);
    oluacls_func(L, "getMaxT", _olua_fun_cocos2d_Texture2D_getMaxT);
    oluacls_func(L, "getPath", _olua_fun_cocos2d_Texture2D_getPath);
    oluacls_func(L, "getPixelFormat", _olua_fun_cocos2d_Texture2D_getPixelFormat);
    oluacls_func(L, "getPixelFormatInfoMap", _olua_fun_cocos2d_Texture2D_getPixelFormatInfoMap);
    oluacls_func(L, "getPixelsHigh", _olua_fun_cocos2d_Texture2D_getPixelsHigh);
    oluacls_func(L, "getPixelsWide", _olua_fun_cocos2d_Texture2D_getPixelsWide);
    oluacls_func(L, "getStringForFormat", _olua_fun_cocos2d_Texture2D_getStringForFormat);
    oluacls_func(L, "hasMipmaps", _olua_fun_cocos2d_Texture2D_hasMipmaps);
    oluacls_func(L, "hasPremultipliedAlpha", _olua_fun_cocos2d_Texture2D_hasPremultipliedAlpha);
    oluacls_func(L, "initWithBackendTexture", _olua_fun_cocos2d_Texture2D_initWithBackendTexture);
    oluacls_func(L, "initWithData", _olua_fun_cocos2d_Texture2D_initWithData);
    oluacls_func(L, "initWithImage", _olua_fun_cocos2d_Texture2D_initWithImage);
    oluacls_func(L, "initWithString", _olua_fun_cocos2d_Texture2D_initWithString);
    oluacls_func(L, "isRenderTarget", _olua_fun_cocos2d_Texture2D_isRenderTarget);
    oluacls_func(L, "new", _olua_fun_cocos2d_Texture2D_new);
    oluacls_func(L, "setAliasTexParameters", _olua_fun_cocos2d_Texture2D_setAliasTexParameters);
    oluacls_func(L, "setAlphaTexture", _olua_fun_cocos2d_Texture2D_setAlphaTexture);
    oluacls_func(L, "setAntiAliasTexParameters", _olua_fun_cocos2d_Texture2D_setAntiAliasTexParameters);
    oluacls_func(L, "setDefaultAlphaPixelFormat", _olua_fun_cocos2d_Texture2D_setDefaultAlphaPixelFormat);
    oluacls_func(L, "setMaxS", _olua_fun_cocos2d_Texture2D_setMaxS);
    oluacls_func(L, "setMaxT", _olua_fun_cocos2d_Texture2D_setMaxT);
    oluacls_func(L, "setRenderTarget", _olua_fun_cocos2d_Texture2D_setRenderTarget);
    oluacls_func(L, "setTexParameters", _olua_fun_cocos2d_Texture2D_setTexParameters);
    oluacls_func(L, "updateWithData", _olua_fun_cocos2d_Texture2D_updateWithData);
    oluacls_prop(L, "alphaTexture", _olua_fun_cocos2d_Texture2D_getAlphaTexture, _olua_fun_cocos2d_Texture2D_setAlphaTexture);
    oluacls_prop(L, "alphaTextureName", _olua_fun_cocos2d_Texture2D_getAlphaTextureName, nullptr);
    oluacls_prop(L, "backendTexture", _olua_fun_cocos2d_Texture2D_getBackendTexture, nullptr);
    oluacls_prop(L, "contentSize", _olua_fun_cocos2d_Texture2D_getContentSize, nullptr);
    oluacls_prop(L, "contentSizeInPixels", _olua_fun_cocos2d_Texture2D_getContentSizeInPixels, nullptr);
    oluacls_prop(L, "defaultAlphaPixelFormat", _olua_fun_cocos2d_Texture2D_getDefaultAlphaPixelFormat, _olua_fun_cocos2d_Texture2D_setDefaultAlphaPixelFormat);
    oluacls_prop(L, "maxS", _olua_fun_cocos2d_Texture2D_getMaxS, _olua_fun_cocos2d_Texture2D_setMaxS);
    oluacls_prop(L, "maxT", _olua_fun_cocos2d_Texture2D_getMaxT, _olua_fun_cocos2d_Texture2D_setMaxT);
    oluacls_prop(L, "path", _olua_fun_cocos2d_Texture2D_getPath, nullptr);
    oluacls_prop(L, "pixelFormat", _olua_fun_cocos2d_Texture2D_getPixelFormat, nullptr);
    oluacls_prop(L, "pixelFormatInfoMap", _olua_fun_cocos2d_Texture2D_getPixelFormatInfoMap, nullptr);
    oluacls_prop(L, "pixelsHigh", _olua_fun_cocos2d_Texture2D_getPixelsHigh, nullptr);
    oluacls_prop(L, "pixelsWide", _olua_fun_cocos2d_Texture2D_getPixelsWide, nullptr);
    oluacls_prop(L, "renderTarget", _olua_fun_cocos2d_Texture2D_isRenderTarget, _olua_fun_cocos2d_Texture2D_setRenderTarget);
    oluacls_prop(L, "stringForFormat", _olua_fun_cocos2d_Texture2D_getStringForFormat, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Texture2D(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Texture2D")) {
        luaL_error(L, "class not found: cocos2d::Texture2D");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TextureCube_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** positive_x */
    std::string arg2;       /** negative_x */
    std::string arg3;       /** positive_y */
    std::string arg4;       /** negative_y */
    std::string arg5;       /** positive_z */
    std::string arg6;       /** negative_z */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_string(L, 3, &arg3);
    olua_check_string(L, 4, &arg4);
    olua_check_string(L, 5, &arg5);
    olua_check_string(L, 6, &arg6);

    // static cocos2d::TextureCube *create(const std::string &positive_x, const std::string &negative_x, const std::string &positive_y, const std::string &negative_y, const std::string &positive_z, const std::string &negative_z)
    cocos2d::TextureCube *ret = cocos2d::TextureCube::create(arg1, arg2, arg3, arg4, arg5, arg6);
    int num_ret = olua_push_object(L, ret, "cc.TextureCube");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCube_getBackendTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCube *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureCube");

    // cocos2d::backend::TextureBackend *getBackendTexture()
    cocos2d::backend::TextureBackend *ret = self->getBackendTexture();
    int num_ret = olua_push_object(L, ret, "ccb.TextureBackend");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCube_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TextureCube()
    cocos2d::TextureCube *ret = new cocos2d::TextureCube();
    int num_ret = olua_push_object(L, ret, "cc.TextureCube");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCube_reloadTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCube *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureCube");

    // bool reloadTexture()
    bool ret = self->reloadTexture();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureCube_setTexParameters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureCube *self = nullptr;
    cocos2d::Texture2D::TexParams *arg1;       /** arg1 */

    olua_to_object(L, 1, &self, "cc.TextureCube");
    olua_check_object(L, 2, &arg1, "ccb.SamplerDescriptor");

    // void setTexParameters(const cocos2d::Texture2D::TexParams &arg1)
    self->setTexParameters(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_TextureCube(lua_State *L)
{
    oluacls_class<cocos2d::TextureCube, cocos2d::Ref>(L, "cc.TextureCube");
    oluacls_func(L, "create", _olua_fun_cocos2d_TextureCube_create);
    oluacls_func(L, "getBackendTexture", _olua_fun_cocos2d_TextureCube_getBackendTexture);
    oluacls_func(L, "new", _olua_fun_cocos2d_TextureCube_new);
    oluacls_func(L, "reloadTexture", _olua_fun_cocos2d_TextureCube_reloadTexture);
    oluacls_func(L, "setTexParameters", _olua_fun_cocos2d_TextureCube_setTexParameters);
    oluacls_prop(L, "backendTexture", _olua_fun_cocos2d_TextureCube_getBackendTexture, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TextureCube(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TextureCube")) {
        luaL_error(L, "class not found: cocos2d::TextureCube");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TextureAtlas_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** file */
    ssize_t arg2 = 0;       /** capacity */

    olua_check_string(L, 1, &arg1);
    olua_check_integer(L, 2, &arg2);

    // static cocos2d::TextureAtlas *create(const std::string &file, ssize_t capacity)
    cocos2d::TextureAtlas *ret = cocos2d::TextureAtlas::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TextureAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureAtlas_createWithTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    ssize_t arg2 = 0;       /** capacity */

    olua_check_object(L, 1, &arg1, "cc.Texture2D");
    olua_check_integer(L, 2, &arg2);

    // static cocos2d::TextureAtlas *createWithTexture(cocos2d::Texture2D *texture, ssize_t capacity)
    cocos2d::TextureAtlas *ret = cocos2d::TextureAtlas::createWithTexture(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TextureAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureAtlas_fillWithEmptyQuadsFromIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    ssize_t arg1 = 0;       /** index */
    ssize_t arg2 = 0;       /** amount */

    olua_to_object(L, 1, &self, "cc.TextureAtlas");
    olua_check_integer(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // void fillWithEmptyQuadsFromIndex(ssize_t index, ssize_t amount)
    self->fillWithEmptyQuadsFromIndex(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureAtlas_getCapacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureAtlas");

    // size_t getCapacity()
    size_t ret = self->getCapacity();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureAtlas_getDescription(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureAtlas");

    // std::string getDescription()
    std::string ret = self->getDescription();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureAtlas_getIndices(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureAtlas");

    // unsigned short *getIndices()
    unsigned short *ret = self->getIndices();
    int num_ret = olua_push_pointer(L, ret, "olua.ushort");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureAtlas_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureAtlas");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = self->getTexture();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureAtlas_getTotalQuads(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureAtlas");

    // size_t getTotalQuads()
    size_t ret = self->getTotalQuads();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureAtlas_increaseTotalQuadsWith(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    ssize_t arg1 = 0;       /** amount */

    olua_to_object(L, 1, &self, "cc.TextureAtlas");
    olua_check_integer(L, 2, &arg1);

    // void increaseTotalQuadsWith(ssize_t amount)
    self->increaseTotalQuadsWith(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureAtlas_initWithFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    std::string arg1;       /** file */
    ssize_t arg2 = 0;       /** capacity */

    olua_to_object(L, 1, &self, "cc.TextureAtlas");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // bool initWithFile(const std::string &file, ssize_t capacity)
    bool ret = self->initWithFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureAtlas_initWithTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    ssize_t arg2 = 0;       /** capacity */

    olua_to_object(L, 1, &self, "cc.TextureAtlas");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");
    olua_check_integer(L, 3, &arg2);

    // bool initWithTexture(cocos2d::Texture2D *texture, ssize_t capacity)
    bool ret = self->initWithTexture(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureAtlas_insertQuadFromIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    ssize_t arg1 = 0;       /** fromIndex */
    ssize_t arg2 = 0;       /** newIndex */

    olua_to_object(L, 1, &self, "cc.TextureAtlas");
    olua_check_integer(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // void insertQuadFromIndex(ssize_t fromIndex, ssize_t newIndex)
    self->insertQuadFromIndex(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureAtlas_isDirty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureAtlas");

    // bool isDirty()
    bool ret = self->isDirty();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureAtlas_moveQuadsFromIndex$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    ssize_t arg1 = 0;       /** oldIndex */
    ssize_t arg2 = 0;       /** amount */
    ssize_t arg3 = 0;       /** newIndex */

    olua_to_object(L, 1, &self, "cc.TextureAtlas");
    olua_check_integer(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // void moveQuadsFromIndex(ssize_t oldIndex, ssize_t amount, ssize_t newIndex)
    self->moveQuadsFromIndex(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureAtlas_moveQuadsFromIndex$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    ssize_t arg1 = 0;       /** index */
    ssize_t arg2 = 0;       /** newIndex */

    olua_to_object(L, 1, &self, "cc.TextureAtlas");
    olua_check_integer(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // void moveQuadsFromIndex(ssize_t index, ssize_t newIndex)
    self->moveQuadsFromIndex(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureAtlas_moveQuadsFromIndex(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.TextureAtlas")) && (olua_is_integer(L, 2)) && (olua_is_integer(L, 3))) {
            // void moveQuadsFromIndex(ssize_t index, ssize_t newIndex)
            return _olua_fun_cocos2d_TextureAtlas_moveQuadsFromIndex$2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.TextureAtlas")) && (olua_is_integer(L, 2)) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4))) {
            // void moveQuadsFromIndex(ssize_t oldIndex, ssize_t amount, ssize_t newIndex)
            return _olua_fun_cocos2d_TextureAtlas_moveQuadsFromIndex$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextureAtlas::moveQuadsFromIndex' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TextureAtlas_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TextureAtlas()
    cocos2d::TextureAtlas *ret = new cocos2d::TextureAtlas();
    int num_ret = olua_push_object(L, ret, "cc.TextureAtlas");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureAtlas_removeAllQuads(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureAtlas");

    // void removeAllQuads()
    self->removeAllQuads();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureAtlas_removeQuadAtIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    ssize_t arg1 = 0;       /** index */

    olua_to_object(L, 1, &self, "cc.TextureAtlas");
    olua_check_integer(L, 2, &arg1);

    // void removeQuadAtIndex(ssize_t index)
    self->removeQuadAtIndex(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureAtlas_removeQuadsAtIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    ssize_t arg1 = 0;       /** index */
    ssize_t arg2 = 0;       /** amount */

    olua_to_object(L, 1, &self, "cc.TextureAtlas");
    olua_check_integer(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // void removeQuadsAtIndex(ssize_t index, ssize_t amount)
    self->removeQuadsAtIndex(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureAtlas_resizeCapacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    ssize_t arg1 = 0;       /** capacity */

    olua_to_object(L, 1, &self, "cc.TextureAtlas");
    olua_check_integer(L, 2, &arg1);

    // bool resizeCapacity(ssize_t capacity)
    bool ret = self->resizeCapacity(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureAtlas_setDirty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    bool arg1 = false;       /** bDirty */

    olua_to_object(L, 1, &self, "cc.TextureAtlas");
    olua_check_bool(L, 2, &arg1);

    // void setDirty(bool bDirty)
    self->setDirty(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextureAtlas_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureAtlas *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.TextureAtlas");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_TextureAtlas(lua_State *L)
{
    oluacls_class<cocos2d::TextureAtlas, cocos2d::Ref>(L, "cc.TextureAtlas");
    oluacls_func(L, "create", _olua_fun_cocos2d_TextureAtlas_create);
    oluacls_func(L, "createWithTexture", _olua_fun_cocos2d_TextureAtlas_createWithTexture);
    oluacls_func(L, "fillWithEmptyQuadsFromIndex", _olua_fun_cocos2d_TextureAtlas_fillWithEmptyQuadsFromIndex);
    oluacls_func(L, "getCapacity", _olua_fun_cocos2d_TextureAtlas_getCapacity);
    oluacls_func(L, "getDescription", _olua_fun_cocos2d_TextureAtlas_getDescription);
    oluacls_func(L, "getIndices", _olua_fun_cocos2d_TextureAtlas_getIndices);
    oluacls_func(L, "getTexture", _olua_fun_cocos2d_TextureAtlas_getTexture);
    oluacls_func(L, "getTotalQuads", _olua_fun_cocos2d_TextureAtlas_getTotalQuads);
    oluacls_func(L, "increaseTotalQuadsWith", _olua_fun_cocos2d_TextureAtlas_increaseTotalQuadsWith);
    oluacls_func(L, "initWithFile", _olua_fun_cocos2d_TextureAtlas_initWithFile);
    oluacls_func(L, "initWithTexture", _olua_fun_cocos2d_TextureAtlas_initWithTexture);
    oluacls_func(L, "insertQuadFromIndex", _olua_fun_cocos2d_TextureAtlas_insertQuadFromIndex);
    oluacls_func(L, "isDirty", _olua_fun_cocos2d_TextureAtlas_isDirty);
    oluacls_func(L, "moveQuadsFromIndex", _olua_fun_cocos2d_TextureAtlas_moveQuadsFromIndex);
    oluacls_func(L, "new", _olua_fun_cocos2d_TextureAtlas_new);
    oluacls_func(L, "removeAllQuads", _olua_fun_cocos2d_TextureAtlas_removeAllQuads);
    oluacls_func(L, "removeQuadAtIndex", _olua_fun_cocos2d_TextureAtlas_removeQuadAtIndex);
    oluacls_func(L, "removeQuadsAtIndex", _olua_fun_cocos2d_TextureAtlas_removeQuadsAtIndex);
    oluacls_func(L, "resizeCapacity", _olua_fun_cocos2d_TextureAtlas_resizeCapacity);
    oluacls_func(L, "setDirty", _olua_fun_cocos2d_TextureAtlas_setDirty);
    oluacls_func(L, "setTexture", _olua_fun_cocos2d_TextureAtlas_setTexture);
    oluacls_prop(L, "capacity", _olua_fun_cocos2d_TextureAtlas_getCapacity, nullptr);
    oluacls_prop(L, "description", _olua_fun_cocos2d_TextureAtlas_getDescription, nullptr);
    oluacls_prop(L, "dirty", _olua_fun_cocos2d_TextureAtlas_isDirty, _olua_fun_cocos2d_TextureAtlas_setDirty);
    oluacls_prop(L, "indices", _olua_fun_cocos2d_TextureAtlas_getIndices, nullptr);
    oluacls_prop(L, "texture", _olua_fun_cocos2d_TextureAtlas_getTexture, _olua_fun_cocos2d_TextureAtlas_setTexture);
    oluacls_prop(L, "totalQuads", _olua_fun_cocos2d_TextureAtlas_getTotalQuads, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TextureAtlas(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TextureAtlas")) {
        luaL_error(L, "class not found: cocos2d::TextureAtlas");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_WebSocket_ErrorCode(lua_State *L)
{
    oluacls_class<cocos2d::network::WebSocket::ErrorCode>(L, "cc.WebSocket.ErrorCode");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "CONNECTION_FAILURE", (lua_Integer)cocos2d::network::WebSocket::ErrorCode::CONNECTION_FAILURE);
    oluacls_enum(L, "TIME_OUT", (lua_Integer)cocos2d::network::WebSocket::ErrorCode::TIME_OUT);
    oluacls_enum(L, "UNKNOWN", (lua_Integer)cocos2d::network::WebSocket::ErrorCode::UNKNOWN);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_WebSocket_ErrorCode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.WebSocket.ErrorCode")) {
        luaL_error(L, "class not found: cocos2d::network::WebSocket::ErrorCode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_WebSocket_State(lua_State *L)
{
    oluacls_class<cocos2d::network::WebSocket::State>(L, "cc.WebSocket.State");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "CLOSED", (lua_Integer)cocos2d::network::WebSocket::State::CLOSED);
    oluacls_enum(L, "CLOSING", (lua_Integer)cocos2d::network::WebSocket::State::CLOSING);
    oluacls_enum(L, "CONNECTING", (lua_Integer)cocos2d::network::WebSocket::State::CONNECTING);
    oluacls_enum(L, "OPEN", (lua_Integer)cocos2d::network::WebSocket::State::OPEN);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_WebSocket_State(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.WebSocket.State")) {
        luaL_error(L, "class not found: cocos2d::network::WebSocket::State");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_network_WebSocket_Delegate___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::network::WebSocket::Delegate *)olua_toobj(L, 1, "cc.WebSocket.Delegate");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_network_WebSocket_Delegate_onClose(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket::Delegate *self = nullptr;
    cocos2d::network::WebSocket *arg1 = nullptr;       /** ws */

    olua_to_object(L, 1, &self, "cc.WebSocket.Delegate");
    olua_check_object(L, 2, &arg1, "cc.WebSocket");

    // void onClose(cocos2d::network::WebSocket *ws)
    self->onClose(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_network_WebSocket_Delegate_onError(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket::Delegate *self = nullptr;
    cocos2d::network::WebSocket *arg1 = nullptr;       /** ws */
    cocos2d::network::WebSocket::ErrorCode arg2 = (cocos2d::network::WebSocket::ErrorCode)0;       /** error */

    olua_to_object(L, 1, &self, "cc.WebSocket.Delegate");
    olua_check_object(L, 2, &arg1, "cc.WebSocket");
    olua_check_enum(L, 3, &arg2);

    // void onError(cocos2d::network::WebSocket *ws, const cocos2d::network::WebSocket::ErrorCode &error)
    self->onError(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_network_WebSocket_Delegate_onMessage(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket::Delegate *self = nullptr;
    cocos2d::network::WebSocket *arg1 = nullptr;       /** ws */
    cocos2d::network::WebSocket::Data arg2;       /** data */

    olua_to_object(L, 1, &self, "cc.WebSocket.Delegate");
    olua_check_object(L, 2, &arg1, "cc.WebSocket");
    olua_check_cocos2d_network_WebSocket_Data(L, 3, &arg2);

    // void onMessage(cocos2d::network::WebSocket *ws, const cocos2d::network::WebSocket::Data &data)
    self->onMessage(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_network_WebSocket_Delegate_onOpen(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket::Delegate *self = nullptr;
    cocos2d::network::WebSocket *arg1 = nullptr;       /** ws */

    olua_to_object(L, 1, &self, "cc.WebSocket.Delegate");
    olua_check_object(L, 2, &arg1, "cc.WebSocket");

    // void onOpen(cocos2d::network::WebSocket *ws)
    self->onOpen(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_WebSocket_Delegate(lua_State *L)
{
    oluacls_class<cocos2d::network::WebSocket::Delegate>(L, "cc.WebSocket.Delegate");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_network_WebSocket_Delegate___gc);
    oluacls_func(L, "onClose", _olua_fun_cocos2d_network_WebSocket_Delegate_onClose);
    oluacls_func(L, "onError", _olua_fun_cocos2d_network_WebSocket_Delegate_onError);
    oluacls_func(L, "onMessage", _olua_fun_cocos2d_network_WebSocket_Delegate_onMessage);
    oluacls_func(L, "onOpen", _olua_fun_cocos2d_network_WebSocket_Delegate_onOpen);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_WebSocket_Delegate(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.WebSocket.Delegate")) {
        luaL_error(L, "class not found: cocos2d::network::WebSocket::Delegate");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_network_WebSocket___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::network::WebSocket *)olua_toobj(L, 1, "cc.WebSocket");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_network_WebSocket_close(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;

    olua_to_object(L, 1, &self, "cc.WebSocket");

    // void close()
    self->close();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_network_WebSocket_closeAllConnections(lua_State *L)
{
    olua_startinvoke(L);

    // static void closeAllConnections()
    cocos2d::network::WebSocket::closeAllConnections();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_network_WebSocket_closeAsync(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;

    olua_to_object(L, 1, &self, "cc.WebSocket");

    // void closeAsync()
    self->closeAsync();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_network_WebSocket_getProtocol(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;

    olua_to_object(L, 1, &self, "cc.WebSocket");

    // const std::string &getProtocol()
    const std::string &ret = self->getProtocol();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_network_WebSocket_getReadyState(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;

    olua_to_object(L, 1, &self, "cc.WebSocket");

    // cocos2d::network::WebSocket::State getReadyState()
    cocos2d::network::WebSocket::State ret = self->getReadyState();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_network_WebSocket_getUrl(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;

    olua_to_object(L, 1, &self, "cc.WebSocket");

    // const std::string &getUrl()
    const std::string &ret = self->getUrl();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_network_WebSocket_init(lua_State *L)
{
    olua_startinvoke(L);

    std::vector<std::string> protocols;
    auto self =  olua_toobj<cocos2d::network::WebSocket>(L, 1);
    auto delegate = olua_checkobj<cocos2d::network::WebSocket::Delegate>(L, 2);
    std::string url = olua_tostring(L, 3);
    std::string cafile = olua_optstring(L, 5, "");

    if (!lua_isnil(L, 4)) {
        luaL_checktype(L, 4, LUA_TTABLE);
        int len = (int)lua_rawlen(L, 4);
        protocols.reserve(len);
        for (int i = 1; i <= len; i++) {
            lua_rawgeti(L, 4, i);
            protocols.push_back(olua_checkstring(L, -1));
            lua_pop(L, 1);
        }
    }

    self->init(*delegate, url, protocols.size() > 0 ? &protocols : nullptr, cafile);
    olua_addref(L, 1, "delegate", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_network_WebSocket_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::network::WebSocket()
    cocos2d::network::WebSocket *ret = new cocos2d::network::WebSocket();
    int num_ret = olua_push_object(L, ret, "cc.WebSocket");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_network_WebSocket_send$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;
    std::string arg1;       /** message */

    olua_to_object(L, 1, &self, "cc.WebSocket");
    olua_check_string(L, 2, &arg1);

    // void send(const std::string &message)
    self->send(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_network_WebSocket_send$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::network::WebSocket *self = nullptr;
    const unsigned char *arg1 = nullptr;       /** binaryMsg */
    unsigned int arg2 = 0;       /** len */

    olua_to_object(L, 1, &self, "cc.WebSocket");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // void send(const unsigned char *binaryMsg, unsigned int len)
    self->send(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_network_WebSocket_send(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.WebSocket")) && (olua_is_string(L, 2))) {
            // void send(const std::string &message)
            return _olua_fun_cocos2d_network_WebSocket_send$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.WebSocket")) && (olua_is_string(L, 2)) && (olua_is_integer(L, 3))) {
            // void send(const unsigned char *binaryMsg, unsigned int len)
            return _olua_fun_cocos2d_network_WebSocket_send$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::network::WebSocket::send' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_WebSocket(lua_State *L)
{
    oluacls_class<cocos2d::network::WebSocket>(L, "cc.WebSocket");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_network_WebSocket___gc);
    oluacls_func(L, "close", _olua_fun_cocos2d_network_WebSocket_close);
    oluacls_func(L, "closeAllConnections", _olua_fun_cocos2d_network_WebSocket_closeAllConnections);
    oluacls_func(L, "closeAsync", _olua_fun_cocos2d_network_WebSocket_closeAsync);
    oluacls_func(L, "getProtocol", _olua_fun_cocos2d_network_WebSocket_getProtocol);
    oluacls_func(L, "getReadyState", _olua_fun_cocos2d_network_WebSocket_getReadyState);
    oluacls_func(L, "getUrl", _olua_fun_cocos2d_network_WebSocket_getUrl);
    oluacls_func(L, "init", _olua_fun_cocos2d_network_WebSocket_init);
    oluacls_func(L, "new", _olua_fun_cocos2d_network_WebSocket_new);
    oluacls_func(L, "send", _olua_fun_cocos2d_network_WebSocket_send);
    oluacls_prop(L, "protocol", _olua_fun_cocos2d_network_WebSocket_getProtocol, nullptr);
    oluacls_prop(L, "readyState", _olua_fun_cocos2d_network_WebSocket_getReadyState, nullptr);
    oluacls_prop(L, "url", _olua_fun_cocos2d_network_WebSocket_getUrl, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_WebSocket(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.WebSocket")) {
        luaL_error(L, "class not found: cocos2d::network::WebSocket");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_LuaWebSocketDelegate_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::LuaWebSocketDelegate()
    cocos2d::LuaWebSocketDelegate *ret = new cocos2d::LuaWebSocketDelegate();
    int num_ret = olua_push_object(L, ret, "cc.LuaWebSocketDelegate");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LuaWebSocketDelegate_onClose$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LuaWebSocketDelegate");

    void *cb_store = (void *)self;
    std::string cb_tag = "onCloseCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::network::WebSocket *)> onCloseCallback
    std::function<void (cocos2d::network::WebSocket *)> ret = self->onCloseCallback;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LuaWebSocketDelegate_onClose$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;
    std::function<void (cocos2d::network::WebSocket *)> arg1;       /** onCloseCallback */

    olua_to_object(L, 1, &self, "cc.LuaWebSocketDelegate");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onCloseCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::network::WebSocket *cb_arg1) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.WebSocket");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 1);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::network::WebSocket *)> onCloseCallback
    self->onCloseCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LuaWebSocketDelegate_onClose(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::network::WebSocket *)> onCloseCallback
        return _olua_fun_cocos2d_LuaWebSocketDelegate_onClose$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.LuaWebSocketDelegate")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::network::WebSocket *)> onCloseCallback
            return _olua_fun_cocos2d_LuaWebSocketDelegate_onClose$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LuaWebSocketDelegate::onClose' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LuaWebSocketDelegate_onError$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LuaWebSocketDelegate");

    void *cb_store = (void *)self;
    std::string cb_tag = "onErrorCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::ErrorCode &)> onErrorCallback
    std::function<void (cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::ErrorCode &)> ret = self->onErrorCallback;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LuaWebSocketDelegate_onError$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;
    std::function<void (cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::ErrorCode &)> arg1;       /** onErrorCallback */

    olua_to_object(L, 1, &self, "cc.LuaWebSocketDelegate");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onErrorCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::network::WebSocket *cb_arg1, const cocos2d::network::WebSocket::ErrorCode &cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.WebSocket");
                olua_push_enum(L, cb_arg2);
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::ErrorCode &)> onErrorCallback
    self->onErrorCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LuaWebSocketDelegate_onError(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::ErrorCode &)> onErrorCallback
        return _olua_fun_cocos2d_LuaWebSocketDelegate_onError$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.LuaWebSocketDelegate")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::ErrorCode &)> onErrorCallback
            return _olua_fun_cocos2d_LuaWebSocketDelegate_onError$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LuaWebSocketDelegate::onError' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LuaWebSocketDelegate_onMessage$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LuaWebSocketDelegate");

    void *cb_store = (void *)self;
    std::string cb_tag = "onMessageCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::Data &)> onMessageCallback
    std::function<void (cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::Data &)> ret = self->onMessageCallback;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LuaWebSocketDelegate_onMessage$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;
    std::function<void (cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::Data &)> arg1;       /** onMessageCallback */

    olua_to_object(L, 1, &self, "cc.LuaWebSocketDelegate");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onMessageCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::network::WebSocket *cb_arg1, const cocos2d::network::WebSocket::Data &cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.WebSocket");
                olua_push_cocos2d_network_WebSocket_Data(L, cb_arg2);
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::Data &)> onMessageCallback
    self->onMessageCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LuaWebSocketDelegate_onMessage(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::Data &)> onMessageCallback
        return _olua_fun_cocos2d_LuaWebSocketDelegate_onMessage$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.LuaWebSocketDelegate")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::network::WebSocket *, const cocos2d::network::WebSocket::Data &)> onMessageCallback
            return _olua_fun_cocos2d_LuaWebSocketDelegate_onMessage$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LuaWebSocketDelegate::onMessage' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LuaWebSocketDelegate_onOpen$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LuaWebSocketDelegate");

    void *cb_store = (void *)self;
    std::string cb_tag = "onOpenCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (cocos2d::network::WebSocket *)> onOpenCallback
    std::function<void (cocos2d::network::WebSocket *)> ret = self->onOpenCallback;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LuaWebSocketDelegate_onOpen$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaWebSocketDelegate *self = nullptr;
    std::function<void (cocos2d::network::WebSocket *)> arg1;       /** onOpenCallback */

    olua_to_object(L, 1, &self, "cc.LuaWebSocketDelegate");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onOpenCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::network::WebSocket *cb_arg1) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.WebSocket");
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 1);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (cocos2d::network::WebSocket *)> onOpenCallback
    self->onOpenCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LuaWebSocketDelegate_onOpen(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (cocos2d::network::WebSocket *)> onOpenCallback
        return _olua_fun_cocos2d_LuaWebSocketDelegate_onOpen$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.LuaWebSocketDelegate")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (cocos2d::network::WebSocket *)> onOpenCallback
            return _olua_fun_cocos2d_LuaWebSocketDelegate_onOpen$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LuaWebSocketDelegate::onOpen' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_LuaWebSocketDelegate(lua_State *L)
{
    oluacls_class<cocos2d::LuaWebSocketDelegate, cocos2d::network::WebSocket::Delegate>(L, "cc.LuaWebSocketDelegate");
    oluacls_func(L, "new", _olua_fun_cocos2d_LuaWebSocketDelegate_new);
    oluacls_prop(L, "onOpen", _olua_fun_cocos2d_LuaWebSocketDelegate_onOpen, _olua_fun_cocos2d_LuaWebSocketDelegate_onOpen);
    oluacls_prop(L, "onMessage", _olua_fun_cocos2d_LuaWebSocketDelegate_onMessage, _olua_fun_cocos2d_LuaWebSocketDelegate_onMessage);
    oluacls_prop(L, "onClose", _olua_fun_cocos2d_LuaWebSocketDelegate_onClose, _olua_fun_cocos2d_LuaWebSocketDelegate_onClose);
    oluacls_prop(L, "onError", _olua_fun_cocos2d_LuaWebSocketDelegate_onError, _olua_fun_cocos2d_LuaWebSocketDelegate_onError);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_LuaWebSocketDelegate(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.LuaWebSocketDelegate")) {
        luaL_error(L, "class not found: cocos2d::LuaWebSocketDelegate");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ActionManager_addAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Action *arg1 = nullptr;       /** action */
    cocos2d::Node *arg2 = nullptr;       /** target */
    bool arg3 = false;       /** paused */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_object(L, 2, &arg1, "cc.Action");
    olua_check_object(L, 3, &arg2, "cc.Node");
    olua_check_bool(L, 4, &arg3);

    // void addAction(cocos2d::Action *action, cocos2d::Node *target, bool paused)
    self->addAction(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ActionManager_getActionByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    int arg1 = 0;       /** tag */
    cocos2d::Node *arg2 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_integer(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Node");

    // cocos2d::Action *getActionByTag(int tag, const cocos2d::Node *target)
    cocos2d::Action *ret = self->getActionByTag(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.Action");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ActionManager_getNumberOfRunningActions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ActionManager");

    // ssize_t getNumberOfRunningActions()
    ssize_t ret = self->getNumberOfRunningActions();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ActionManager_getNumberOfRunningActionsInTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // ssize_t getNumberOfRunningActionsInTarget(const cocos2d::Node *target)
    ssize_t ret = self->getNumberOfRunningActionsInTarget(arg1);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ActionManager_getNumberOfRunningActionsInTargetByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */
    int arg2 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_integer(L, 3, &arg2);

    // size_t getNumberOfRunningActionsInTargetByTag(const cocos2d::Node *target, int tag)
    size_t ret = self->getNumberOfRunningActionsInTargetByTag(arg1, arg2);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ActionManager_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ActionManager()
    cocos2d::ActionManager *ret = new cocos2d::ActionManager();
    int num_ret = olua_push_object(L, ret, "cc.ActionManager");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ActionManager_pauseAllRunningActions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ActionManager");

    // cocos2d::Vector<cocos2d::Node *> pauseAllRunningActions()
    cocos2d::Vector<cocos2d::Node *> ret = self->pauseAllRunningActions();
    int num_ret = olua_push_array<cocos2d::Node *>(L, ret, [L](cocos2d::Node *arg1) {
        olua_push_object(L, arg1, "cc.Node");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ActionManager_pauseTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void pauseTarget(cocos2d::Node *target)
    self->pauseTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ActionManager_removeAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Action *arg1 = nullptr;       /** action */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_object(L, 2, &arg1, "cc.Action");

    // void removeAction(cocos2d::Action *action)
    self->removeAction(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ActionManager_removeActionByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    int arg1 = 0;       /** tag */
    cocos2d::Node *arg2 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_integer(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Node");

    // void removeActionByTag(int tag, cocos2d::Node *target)
    self->removeActionByTag(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ActionManager_removeActionsByFlags(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    unsigned int arg1 = 0;       /** flags */
    cocos2d::Node *arg2 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_integer(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Node");

    // void removeActionsByFlags(unsigned int flags, cocos2d::Node *target)
    self->removeActionsByFlags(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ActionManager_removeAllActions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ActionManager");

    // void removeAllActions()
    self->removeAllActions();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ActionManager_removeAllActionsByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    int arg1 = 0;       /** tag */
    cocos2d::Node *arg2 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_integer(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Node");

    // void removeAllActionsByTag(int tag, cocos2d::Node *target)
    self->removeAllActionsByTag(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ActionManager_removeAllActionsFromTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void removeAllActionsFromTarget(cocos2d::Node *target)
    self->removeAllActionsFromTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ActionManager_resumeTarget(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** target */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void resumeTarget(cocos2d::Node *target)
    self->resumeTarget(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ActionManager_resumeTargets(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    cocos2d::Vector<cocos2d::Node *> arg1;       /** targetsToResume */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_array<cocos2d::Node *>(L, 2, arg1, [L](cocos2d::Node **arg1) {
        olua_check_object(L, -1, arg1, "cc.Node");
    });

    // void resumeTargets(const cocos2d::Vector<cocos2d::Node *> &targetsToResume)
    self->resumeTargets(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ActionManager_update(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ActionManager *self = nullptr;
    float arg1 = 0;       /** dt */

    olua_to_object(L, 1, &self, "cc.ActionManager");
    olua_check_number(L, 2, &arg1);

    // void update(float dt)
    self->update(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_ActionManager(lua_State *L)
{
    oluacls_class<cocos2d::ActionManager, cocos2d::Ref>(L, "cc.ActionManager");
    oluacls_func(L, "addAction", _olua_fun_cocos2d_ActionManager_addAction);
    oluacls_func(L, "getActionByTag", _olua_fun_cocos2d_ActionManager_getActionByTag);
    oluacls_func(L, "getNumberOfRunningActions", _olua_fun_cocos2d_ActionManager_getNumberOfRunningActions);
    oluacls_func(L, "getNumberOfRunningActionsInTarget", _olua_fun_cocos2d_ActionManager_getNumberOfRunningActionsInTarget);
    oluacls_func(L, "getNumberOfRunningActionsInTargetByTag", _olua_fun_cocos2d_ActionManager_getNumberOfRunningActionsInTargetByTag);
    oluacls_func(L, "new", _olua_fun_cocos2d_ActionManager_new);
    oluacls_func(L, "pauseAllRunningActions", _olua_fun_cocos2d_ActionManager_pauseAllRunningActions);
    oluacls_func(L, "pauseTarget", _olua_fun_cocos2d_ActionManager_pauseTarget);
    oluacls_func(L, "removeAction", _olua_fun_cocos2d_ActionManager_removeAction);
    oluacls_func(L, "removeActionByTag", _olua_fun_cocos2d_ActionManager_removeActionByTag);
    oluacls_func(L, "removeActionsByFlags", _olua_fun_cocos2d_ActionManager_removeActionsByFlags);
    oluacls_func(L, "removeAllActions", _olua_fun_cocos2d_ActionManager_removeAllActions);
    oluacls_func(L, "removeAllActionsByTag", _olua_fun_cocos2d_ActionManager_removeAllActionsByTag);
    oluacls_func(L, "removeAllActionsFromTarget", _olua_fun_cocos2d_ActionManager_removeAllActionsFromTarget);
    oluacls_func(L, "resumeTarget", _olua_fun_cocos2d_ActionManager_resumeTarget);
    oluacls_func(L, "resumeTargets", _olua_fun_cocos2d_ActionManager_resumeTargets);
    oluacls_func(L, "update", _olua_fun_cocos2d_ActionManager_update);
    oluacls_prop(L, "numberOfRunningActions", _olua_fun_cocos2d_ActionManager_getNumberOfRunningActions, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ActionManager(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ActionManager")) {
        luaL_error(L, "class not found: cocos2d::ActionManager");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Component_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Component *create()
    cocos2d::Component *ret = cocos2d::Component::create();
    int num_ret = olua_push_object(L, ret, "cc.Component");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Component_getName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Component");

    // const std::string &getName()
    const std::string &ret = self->getName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Component_getOwner(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Component");

    // cocos2d::Node *getOwner()
    cocos2d::Node *ret = self->getOwner();
    int num_ret = olua_push_object(L, ret, "cc.Node");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Component_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Component");

    // bool init()
    bool ret = self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Component_isEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Component");

    // bool isEnabled()
    bool ret = self->isEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Component_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Component()
    cocos2d::Component *ret = new cocos2d::Component();
    int num_ret = olua_push_object(L, ret, "cc.Component");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Component_onAdd(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Component");

    // void onAdd()
    self->onAdd();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Component_onEnter(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Component");

    // void onEnter()
    self->onEnter();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Component_onExit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Component");

    // void onExit()
    self->onExit();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Component_onRemove(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Component");

    // void onRemove()
    self->onRemove();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Component_serialize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;
    void *arg1 = nullptr;       /** r */

    olua_to_object(L, 1, &self, "cc.Component");
    olua_check_object(L, 2, &arg1, "void *");

    // bool serialize(void *r)
    bool ret = self->serialize(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Component_setEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_object(L, 1, &self, "cc.Component");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool enabled)
    self->setEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Component_setName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.Component");
    olua_check_string(L, 2, &arg1);

    // void setName(const std::string &name)
    self->setName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Component_setOwner(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** owner */

    olua_to_object(L, 1, &self, "cc.Component");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void setOwner(cocos2d::Node *owner)
    self->setOwner(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Component_update(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Component *self = nullptr;
    float arg1 = 0;       /** delta */

    olua_to_object(L, 1, &self, "cc.Component");
    olua_check_number(L, 2, &arg1);

    // void update(float delta)
    self->update(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Component(lua_State *L)
{
    oluacls_class<cocos2d::Component, cocos2d::Ref>(L, "cc.Component");
    oluacls_func(L, "create", _olua_fun_cocos2d_Component_create);
    oluacls_func(L, "getName", _olua_fun_cocos2d_Component_getName);
    oluacls_func(L, "getOwner", _olua_fun_cocos2d_Component_getOwner);
    oluacls_func(L, "init", _olua_fun_cocos2d_Component_init);
    oluacls_func(L, "isEnabled", _olua_fun_cocos2d_Component_isEnabled);
    oluacls_func(L, "new", _olua_fun_cocos2d_Component_new);
    oluacls_func(L, "onAdd", _olua_fun_cocos2d_Component_onAdd);
    oluacls_func(L, "onEnter", _olua_fun_cocos2d_Component_onEnter);
    oluacls_func(L, "onExit", _olua_fun_cocos2d_Component_onExit);
    oluacls_func(L, "onRemove", _olua_fun_cocos2d_Component_onRemove);
    oluacls_func(L, "serialize", _olua_fun_cocos2d_Component_serialize);
    oluacls_func(L, "setEnabled", _olua_fun_cocos2d_Component_setEnabled);
    oluacls_func(L, "setName", _olua_fun_cocos2d_Component_setName);
    oluacls_func(L, "setOwner", _olua_fun_cocos2d_Component_setOwner);
    oluacls_func(L, "update", _olua_fun_cocos2d_Component_update);
    oluacls_prop(L, "enabled", _olua_fun_cocos2d_Component_isEnabled, _olua_fun_cocos2d_Component_setEnabled);
    oluacls_prop(L, "name", _olua_fun_cocos2d_Component_getName, _olua_fun_cocos2d_Component_setName);
    oluacls_prop(L, "owner", _olua_fun_cocos2d_Component_getOwner, _olua_fun_cocos2d_Component_setOwner);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Component(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Component")) {
        luaL_error(L, "class not found: cocos2d::Component");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_LuaComponent_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::LuaComponent *create()
    cocos2d::LuaComponent *ret = cocos2d::LuaComponent::create();
    int num_ret = olua_push_object(L, ret, "cc.LuaComponent");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LuaComponent_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::LuaComponent()
    cocos2d::LuaComponent *ret = new cocos2d::LuaComponent();
    int num_ret = olua_push_object(L, ret, "cc.LuaComponent");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LuaComponent_onAdd$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LuaComponent");

    void *cb_store = (void *)self;
    std::string cb_tag = "onAddCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void ()> onAddCallback
    std::function<void ()> ret = self->onAddCallback;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LuaComponent_onAdd$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void ()> arg1;       /** onAddCallback */

    olua_to_object(L, 1, &self, "cc.LuaComponent");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onAddCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */]() {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);

                olua_callback(L, cb_store, cb_name.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void ()> onAddCallback
    self->onAddCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LuaComponent_onAdd(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void ()> onAddCallback
        return _olua_fun_cocos2d_LuaComponent_onAdd$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.LuaComponent")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void ()> onAddCallback
            return _olua_fun_cocos2d_LuaComponent_onAdd$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LuaComponent::onAdd' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LuaComponent_onEnter$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LuaComponent");

    void *cb_store = (void *)self;
    std::string cb_tag = "onEnterCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void ()> onEnterCallback
    std::function<void ()> ret = self->onEnterCallback;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LuaComponent_onEnter$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void ()> arg1;       /** onEnterCallback */

    olua_to_object(L, 1, &self, "cc.LuaComponent");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onEnterCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */]() {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);

                olua_callback(L, cb_store, cb_name.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void ()> onEnterCallback
    self->onEnterCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LuaComponent_onEnter(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void ()> onEnterCallback
        return _olua_fun_cocos2d_LuaComponent_onEnter$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.LuaComponent")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void ()> onEnterCallback
            return _olua_fun_cocos2d_LuaComponent_onEnter$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LuaComponent::onEnter' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LuaComponent_onExit$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LuaComponent");

    void *cb_store = (void *)self;
    std::string cb_tag = "onExitCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void ()> onExitCallback
    std::function<void ()> ret = self->onExitCallback;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LuaComponent_onExit$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void ()> arg1;       /** onExitCallback */

    olua_to_object(L, 1, &self, "cc.LuaComponent");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onExitCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */]() {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);

                olua_callback(L, cb_store, cb_name.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void ()> onExitCallback
    self->onExitCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LuaComponent_onExit(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void ()> onExitCallback
        return _olua_fun_cocos2d_LuaComponent_onExit$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.LuaComponent")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void ()> onExitCallback
            return _olua_fun_cocos2d_LuaComponent_onExit$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LuaComponent::onExit' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LuaComponent_onRemove$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LuaComponent");

    void *cb_store = (void *)self;
    std::string cb_tag = "onRemoveCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void ()> onRemoveCallback
    std::function<void ()> ret = self->onRemoveCallback;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LuaComponent_onRemove$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void ()> arg1;       /** onRemoveCallback */

    olua_to_object(L, 1, &self, "cc.LuaComponent");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onRemoveCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */]() {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);

                olua_callback(L, cb_store, cb_name.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void ()> onRemoveCallback
    self->onRemoveCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LuaComponent_onRemove(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void ()> onRemoveCallback
        return _olua_fun_cocos2d_LuaComponent_onRemove$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.LuaComponent")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void ()> onRemoveCallback
            return _olua_fun_cocos2d_LuaComponent_onRemove$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LuaComponent::onRemove' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LuaComponent_onUpdate$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LuaComponent");

    void *cb_store = (void *)self;
    std::string cb_tag = "onUpdateCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // std::function<void (float)> onUpdateCallback
    std::function<void (float)> ret = self->onUpdateCallback;
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LuaComponent_onUpdate$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LuaComponent *self = nullptr;
    std::function<void (float)> arg1;       /** onUpdateCallback */

    olua_to_object(L, 1, &self, "cc.LuaComponent");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "onUpdateCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */](float cb_arg1) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                olua_push_number(L, cb_arg1);

                olua_callback(L, cb_store, cb_name.c_str(), 1);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // std::function<void (float)> onUpdateCallback
    self->onUpdateCallback = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LuaComponent_onUpdate(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // std::function<void (float)> onUpdateCallback
        return _olua_fun_cocos2d_LuaComponent_onUpdate$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.LuaComponent")) && (olua_is_callback(L, 2, "std.function") || olua_isnil(L, 2))) {
            // std::function<void (float)> onUpdateCallback
            return _olua_fun_cocos2d_LuaComponent_onUpdate$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LuaComponent::onUpdate' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_LuaComponent(lua_State *L)
{
    oluacls_class<cocos2d::LuaComponent, cocos2d::Component>(L, "cc.LuaComponent");
    oluacls_func(L, "create", _olua_fun_cocos2d_LuaComponent_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_LuaComponent_new);
    oluacls_prop(L, "onUpdate", _olua_fun_cocos2d_LuaComponent_onUpdate, _olua_fun_cocos2d_LuaComponent_onUpdate);
    oluacls_prop(L, "onEnter", _olua_fun_cocos2d_LuaComponent_onEnter, _olua_fun_cocos2d_LuaComponent_onEnter);
    oluacls_prop(L, "onExit", _olua_fun_cocos2d_LuaComponent_onExit, _olua_fun_cocos2d_LuaComponent_onExit);
    oluacls_prop(L, "onAdd", _olua_fun_cocos2d_LuaComponent_onAdd, _olua_fun_cocos2d_LuaComponent_onAdd);
    oluacls_prop(L, "onRemove", _olua_fun_cocos2d_LuaComponent_onRemove, _olua_fun_cocos2d_LuaComponent_onRemove);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_LuaComponent(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.LuaComponent")) {
        luaL_error(L, "class not found: cocos2d::LuaComponent");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Node___index(lua_State *L)
{
    olua_startinvoke(L);

    // @extend(cocos2d::NodeExtend) static olua_Return __index(lua_State *L)
    olua_Return ret = cocos2d::NodeExtend::__index(L);

    olua_endinvoke(L);

    return (int)ret;
}

static int _olua_fun_cocos2d_Node_addChild$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void addChild(@addref(children |) cocos2d::Node *child)
    self->addChild(arg1);

    // insert code after call
    olua_addref(L, 1, "children", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_addChild$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    int arg2 = 0;       /** localZOrder */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_integer(L, 3, &arg2);

    // void addChild(@addref(children |) cocos2d::Node *child, int localZOrder)
    self->addChild(arg1, arg2);

    // insert code after call
    olua_addref(L, 1, "children", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_addChild$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    int arg2 = 0;       /** localZOrder */
    int arg3 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // void addChild(@addref(children |) cocos2d::Node *child, int localZOrder, int tag)
    self->addChild(arg1, arg2, arg3);

    // insert code after call
    olua_addref(L, 1, "children", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_addChild$4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    int arg2 = 0;       /** localZOrder */
    std::string arg3;       /** name */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_integer(L, 3, &arg2);
    olua_check_string(L, 4, &arg3);

    // void addChild(@addref(children |) cocos2d::Node *child, int localZOrder, const std::string &name)
    self->addChild(arg1, arg2, arg3);

    // insert code after call
    olua_addref(L, 1, "children", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_addChild(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Node"))) {
            // void addChild(@addref(children |) cocos2d::Node *child)
            return _olua_fun_cocos2d_Node_addChild$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_integer(L, 3))) {
            // void addChild(@addref(children |) cocos2d::Node *child, int localZOrder)
            return _olua_fun_cocos2d_Node_addChild$2(L);
        // }
    }

    if (num_args == 4) {
        if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4))) {
            // void addChild(@addref(children |) cocos2d::Node *child, int localZOrder, int tag)
            return _olua_fun_cocos2d_Node_addChild$3(L);
        }

        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_integer(L, 3)) && (olua_is_string(L, 4))) {
            // void addChild(@addref(children |) cocos2d::Node *child, int localZOrder, const std::string &name)
            return _olua_fun_cocos2d_Node_addChild$4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::addChild' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_addComponent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Component *arg1 = nullptr;       /** component */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Component");

    // bool addComponent(@addref(components |) cocos2d::Component *component)
    bool ret = self->addComponent(arg1);
    int num_ret = olua_push_bool(L, ret);

    // insert code after call
    olua_addref(L, 1, "components", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_cleanup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void cleanup()
    self->cleanup();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_convertToNodeSpace$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 *arg1;       /** worldPoint */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // cocos2d::Vec2 convertToNodeSpace(const cocos2d::Vec2 &worldPoint)
    cocos2d::Vec2 ret = self->convertToNodeSpace(*arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_convertToNodeSpace$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** worldPoint */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_pack_object(L, 2, &arg1);

    // @unpack cocos2d::Vec2 convertToNodeSpace(@pack const cocos2d::Vec2 &worldPoint)
    cocos2d::Vec2 ret = self->convertToNodeSpace(arg1);
    int num_ret = olua_unpack_object(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_convertToNodeSpace(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Vec2"))) {
            // cocos2d::Vec2 convertToNodeSpace(const cocos2d::Vec2 &worldPoint)
            return _olua_fun_cocos2d_Node_convertToNodeSpace$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_canpack_object(L, 2, (cocos2d::Vec2 *)nullptr))) {
            // @unpack cocos2d::Vec2 convertToNodeSpace(@pack const cocos2d::Vec2 &worldPoint)
            return _olua_fun_cocos2d_Node_convertToNodeSpace$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::convertToNodeSpace' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_convertToNodeSpaceAR$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 *arg1;       /** worldPoint */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // cocos2d::Vec2 convertToNodeSpaceAR(const cocos2d::Vec2 &worldPoint)
    cocos2d::Vec2 ret = self->convertToNodeSpaceAR(*arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_convertToNodeSpaceAR$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** worldPoint */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_pack_object(L, 2, &arg1);

    // @unpack cocos2d::Vec2 convertToNodeSpaceAR(@pack const cocos2d::Vec2 &worldPoint)
    cocos2d::Vec2 ret = self->convertToNodeSpaceAR(arg1);
    int num_ret = olua_unpack_object(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_convertToNodeSpaceAR(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Vec2"))) {
            // cocos2d::Vec2 convertToNodeSpaceAR(const cocos2d::Vec2 &worldPoint)
            return _olua_fun_cocos2d_Node_convertToNodeSpaceAR$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_canpack_object(L, 2, (cocos2d::Vec2 *)nullptr))) {
            // @unpack cocos2d::Vec2 convertToNodeSpaceAR(@pack const cocos2d::Vec2 &worldPoint)
            return _olua_fun_cocos2d_Node_convertToNodeSpaceAR$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::convertToNodeSpaceAR' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_convertToWorldSpace$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 *arg1;       /** nodePoint */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // cocos2d::Vec2 convertToWorldSpace(const cocos2d::Vec2 &nodePoint)
    cocos2d::Vec2 ret = self->convertToWorldSpace(*arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_convertToWorldSpace$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** nodePoint */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_pack_object(L, 2, &arg1);

    // @unpack cocos2d::Vec2 convertToWorldSpace(@pack const cocos2d::Vec2 &nodePoint)
    cocos2d::Vec2 ret = self->convertToWorldSpace(arg1);
    int num_ret = olua_unpack_object(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_convertToWorldSpace(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Vec2"))) {
            // cocos2d::Vec2 convertToWorldSpace(const cocos2d::Vec2 &nodePoint)
            return _olua_fun_cocos2d_Node_convertToWorldSpace$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_canpack_object(L, 2, (cocos2d::Vec2 *)nullptr))) {
            // @unpack cocos2d::Vec2 convertToWorldSpace(@pack const cocos2d::Vec2 &nodePoint)
            return _olua_fun_cocos2d_Node_convertToWorldSpace$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::convertToWorldSpace' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_convertToWorldSpaceAR$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 *arg1;       /** nodePoint */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // cocos2d::Vec2 convertToWorldSpaceAR(const cocos2d::Vec2 &nodePoint)
    cocos2d::Vec2 ret = self->convertToWorldSpaceAR(*arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_convertToWorldSpaceAR$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 arg1;       /** nodePoint */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_pack_object(L, 2, &arg1);

    // @unpack cocos2d::Vec2 convertToWorldSpaceAR(@pack const cocos2d::Vec2 &nodePoint)
    cocos2d::Vec2 ret = self->convertToWorldSpaceAR(arg1);
    int num_ret = olua_unpack_object(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_convertToWorldSpaceAR(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Vec2"))) {
            // cocos2d::Vec2 convertToWorldSpaceAR(const cocos2d::Vec2 &nodePoint)
            return _olua_fun_cocos2d_Node_convertToWorldSpaceAR$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_canpack_object(L, 2, (cocos2d::Vec2 *)nullptr))) {
            // @unpack cocos2d::Vec2 convertToWorldSpaceAR(@pack const cocos2d::Vec2 &nodePoint)
            return _olua_fun_cocos2d_Node_convertToWorldSpaceAR$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::convertToWorldSpaceAR' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_convertTouchToNodeSpace(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;       /** touch */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Touch");

    // cocos2d::Vec2 convertTouchToNodeSpace(cocos2d::Touch *touch)
    cocos2d::Vec2 ret = self->convertTouchToNodeSpace(arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_convertTouchToNodeSpaceAR(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;       /** touch */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Touch");

    // cocos2d::Vec2 convertTouchToNodeSpaceAR(cocos2d::Touch *touch)
    cocos2d::Vec2 ret = self->convertTouchToNodeSpaceAR(arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Node *create()
    cocos2d::Node *ret = cocos2d::Node::create();
    int num_ret = olua_push_object(L, ret, "cc.Node");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_draw$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Renderer *arg1 = nullptr;       /** renderer */
    cocos2d::Mat4 *arg2;       /** transform */
    uint32_t arg3 = 0;       /** flags */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Renderer");
    olua_check_object(L, 3, &arg2, "cc.Mat4");
    olua_check_integer(L, 4, &arg3);

    // void draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)
    self->draw(arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_draw$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void draw()
    self->draw();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_draw(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // void draw()
        return _olua_fun_cocos2d_Node_draw$2(L);
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Renderer")) && (olua_is_object(L, 3, "cc.Mat4")) && (olua_is_integer(L, 4))) {
            // void draw(cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)
            return _olua_fun_cocos2d_Node_draw$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::draw' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_enumerateChildren(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */
    std::function<bool (cocos2d::Node *)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_string(L, 2, &arg1);
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "enumerateChildren";
    std::string cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg2 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Node *cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();
        bool ret = false;       /** ret */
        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            size_t last = olua_push_objpool(L);
            olua_enable_objpool(L);
            olua_push_object(L, cb_arg1, "cc.Node");
            olua_disable_objpool(L);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            if (olua_is_bool(L, -1)) {
                olua_check_bool(L, -1, &ret);
            }

            //pop stack value
            olua_pop_objpool(L, last);
            lua_settop(L, top);
        }
        return ret;
    };

    // void enumerateChildren(const std::string &name, std::function<bool (cocos2d::Node *)> callback)
    self->enumerateChildren(arg1, arg2);

    olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_getActionByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    int arg1 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // @addref(actions |) cocos2d::Action *getActionByTag(int tag)
    cocos2d::Action *ret = self->getActionByTag(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Action");

    // insert code after call
    olua_addref(L, 1, "actions", -1, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getActionManager(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // @addref(^) cocos2d::ActionManager *getActionManager()
    cocos2d::ActionManager *ret = self->getActionManager();
    int num_ret = olua_push_object(L, ret, "cc.ActionManager");

    // insert code after call
    olua_addref(L, 1, "actionmanager", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getAlpha(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** obj */

    olua_check_object(L, 1, &arg1, "cc.Node");

    // @extend(cocos2d::NodeExtend) static float getAlpha(cocos2d::Node *obj)
    float ret = cocos2d::NodeExtend::getAlpha(arg1);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getAnchorPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // const cocos2d::Vec2 &getAnchorPoint()
    const cocos2d::Vec2 &ret = self->getAnchorPoint();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getAnchorPointInPoints(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // const cocos2d::Vec2 &getAnchorPointInPoints()
    const cocos2d::Vec2 &ret = self->getAnchorPointInPoints();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getAnchorX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** obj */

    olua_check_object(L, 1, &arg1, "cc.Node");

    // @extend(cocos2d::NodeExtend) static float getAnchorX(cocos2d::Node *obj)
    float ret = cocos2d::NodeExtend::getAnchorX(arg1);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getAnchorY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** obj */

    olua_check_object(L, 1, &arg1, "cc.Node");

    // @extend(cocos2d::NodeExtend) static float getAnchorY(cocos2d::Node *obj)
    float ret = cocos2d::NodeExtend::getAnchorY(arg1);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getAttachedNodeCount(lua_State *L)
{
    olua_startinvoke(L);

    // static int getAttachedNodeCount()
    int ret = cocos2d::Node::getAttachedNodeCount();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getBoundingBox(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::Rect getBoundingBox()
    cocos2d::Rect ret = self->getBoundingBox();
    int num_ret = olua_copy_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getBounds(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** obj */
    cocos2d::Node *arg2 = nullptr;       /** target */
    float arg3 = 0;       /** left */
    float arg4 = 0;       /** right */
    float arg5 = 0;       /** top */
    float arg6 = 0;       /** bottom */

    olua_check_object(L, 1, &arg1, "cc.Node");
    olua_check_object(L, 2, &arg2, "cc.Node");
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);
    olua_check_number(L, 6, &arg6);

    // @unpack @extend(cocos2d::NodeExtend) static cocos2d::Bounds getBounds(cocos2d::Node *obj, cocos2d::Node *target, float left, float right, float top, float bottom)
    cocos2d::Bounds ret = cocos2d::NodeExtend::getBounds(arg1, arg2, arg3, arg4, arg5, arg6);
    int num_ret = olua_unpack_object(L, &ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getCameraMask(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // unsigned short getCameraMask()
    unsigned short ret = self->getCameraMask();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getChildByName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_string(L, 2, &arg1);

    // @addref(children |) cocos2d::Node *getChildByName(const std::string &name)
    cocos2d::Node *ret = self->getChildByName(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Node");

    // insert code after call
    olua_addref(L, 1, "children", -1, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getChildByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    int arg1 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // @addref(children |) cocos2d::Node *getChildByTag(int tag)
    cocos2d::Node *ret = self->getChildByTag(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Node");

    // insert code after call
    olua_addref(L, 1, "children", -1, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getChildren(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // @addref(children |) cocos2d::Vector<cocos2d::Node *> &getChildren()
    cocos2d::Vector<cocos2d::Node *> &ret = self->getChildren();
    int num_ret = olua_push_array<cocos2d::Node *>(L, ret, [L](cocos2d::Node *arg1) {
        olua_push_object(L, arg1, "cc.Node");
    });

    // insert code after call
    olua_addref(L, 1, "children", -1, OLUA_REF_MULTI | OLUA_REF_TABLE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getChildrenCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // ssize_t getChildrenCount()
    ssize_t ret = self->getChildrenCount();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // const cocos2d::Color3B &getColor()
    const cocos2d::Color3B &ret = self->getColor();
    int num_ret = olua_push_cocos2d_Color3B(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getComponent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_string(L, 2, &arg1);

    // @addref(components |) cocos2d::Component *getComponent(const std::string &name)
    cocos2d::Component *ret = self->getComponent(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Component");

    // insert code after call
    olua_addref(L, 1, "components", -1, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getContentSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // const cocos2d::Size &getContentSize()
    const cocos2d::Size &ret = self->getContentSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getDescription(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // std::string getDescription()
    std::string ret = self->getDescription();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getDisplayedColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // const cocos2d::Color3B &getDisplayedColor()
    const cocos2d::Color3B &ret = self->getDisplayedColor();
    int num_ret = olua_push_cocos2d_Color3B(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getDisplayedOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // uint8_t getDisplayedOpacity()
    uint8_t ret = self->getDisplayedOpacity();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getEventDispatcher(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // @addref(^) cocos2d::EventDispatcher *getEventDispatcher()
    cocos2d::EventDispatcher *ret = self->getEventDispatcher();
    int num_ret = olua_push_object(L, ret, "cc.EventDispatcher");

    // insert code after call
    olua_addref(L, 1, "eventdispatcher", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getGlobalZOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getGlobalZOrder()
    float ret = self->getGlobalZOrder();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** obj */

    olua_check_object(L, 1, &arg1, "cc.Node");

    // @extend(cocos2d::NodeExtend) static float getHeight(cocos2d::Node *obj)
    float ret = cocos2d::NodeExtend::getHeight(arg1);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getLocalZOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // std::int32_t getLocalZOrder()
    std::int32_t ret = self->getLocalZOrder();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // const std::string &getName()
    const std::string &ret = self->getName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getNodeToParentAffineTransform$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::AffineTransform getNodeToParentAffineTransform()
    cocos2d::AffineTransform ret = self->getNodeToParentAffineTransform();
    int num_ret = olua_copy_object(L, ret, "cc.AffineTransform");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getNodeToParentAffineTransform$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** ancestor */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // cocos2d::AffineTransform getNodeToParentAffineTransform(cocos2d::Node *ancestor)
    cocos2d::AffineTransform ret = self->getNodeToParentAffineTransform(arg1);
    int num_ret = olua_copy_object(L, ret, "cc.AffineTransform");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getNodeToParentAffineTransform(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // cocos2d::AffineTransform getNodeToParentAffineTransform()
        return _olua_fun_cocos2d_Node_getNodeToParentAffineTransform$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Node"))) {
            // cocos2d::AffineTransform getNodeToParentAffineTransform(cocos2d::Node *ancestor)
            return _olua_fun_cocos2d_Node_getNodeToParentAffineTransform$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::getNodeToParentAffineTransform' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_getNodeToParentTransform$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // const cocos2d::Mat4 &getNodeToParentTransform()
    const cocos2d::Mat4 &ret = self->getNodeToParentTransform();
    int num_ret = olua_push_object(L, ret, "cc.Mat4");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getNodeToParentTransform$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** ancestor */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // cocos2d::Mat4 getNodeToParentTransform(cocos2d::Node *ancestor)
    cocos2d::Mat4 ret = self->getNodeToParentTransform(arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Mat4");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getNodeToParentTransform(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // const cocos2d::Mat4 &getNodeToParentTransform()
        return _olua_fun_cocos2d_Node_getNodeToParentTransform$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Node"))) {
            // cocos2d::Mat4 getNodeToParentTransform(cocos2d::Node *ancestor)
            return _olua_fun_cocos2d_Node_getNodeToParentTransform$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::getNodeToParentTransform' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_getNodeToWorldAffineTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::AffineTransform getNodeToWorldAffineTransform()
    cocos2d::AffineTransform ret = self->getNodeToWorldAffineTransform();
    int num_ret = olua_copy_object(L, ret, "cc.AffineTransform");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getNodeToWorldTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::Mat4 getNodeToWorldTransform()
    cocos2d::Mat4 ret = self->getNodeToWorldTransform();
    int num_ret = olua_copy_object(L, ret, "cc.Mat4");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getNormalizedPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // const cocos2d::Vec2 &getNormalizedPosition()
    const cocos2d::Vec2 &ret = self->getNormalizedPosition();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getNumberOfRunningActions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // ssize_t getNumberOfRunningActions()
    ssize_t ret = self->getNumberOfRunningActions();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getNumberOfRunningActionsByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    int arg1 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // ssize_t getNumberOfRunningActionsByTag(int tag)
    ssize_t ret = self->getNumberOfRunningActionsByTag(arg1);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getOnEnterCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    void *cb_store = (void *)self;
    std::string cb_tag = "OnEnterCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // @nullable const std::function<void ()> &getOnEnterCallback()
    std::function<void ()> ret = self->getOnEnterCallback();
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getOnEnterTransitionDidFinishCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    void *cb_store = (void *)self;
    std::string cb_tag = "OnEnterTransitionDidFinishCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // @nullable const std::function<void ()> &getOnEnterTransitionDidFinishCallback()
    std::function<void ()> ret = self->getOnEnterTransitionDidFinishCallback();
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getOnExitCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    void *cb_store = (void *)self;
    std::string cb_tag = "OnExitCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // @nullable const std::function<void ()> &getOnExitCallback()
    std::function<void ()> ret = self->getOnExitCallback();
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getOnExitTransitionDidStartCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    void *cb_store = (void *)self;
    std::string cb_tag = "OnExitTransitionDidStartCallback";
    olua_getcallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // @nullable const std::function<void ()> &getOnExitTransitionDidStartCallback()
    std::function<void ()> ret = self->getOnExitTransitionDidStartCallback();
    int num_ret = olua_push_callback(L, &ret, "std.function");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // uint8_t getOpacity()
    uint8_t ret = self->getOpacity();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getParent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::Node *getParent()
    cocos2d::Node *ret = self->getParent();
    int num_ret = olua_push_object(L, ret, "cc.Node");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getParentToNodeAffineTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::AffineTransform getParentToNodeAffineTransform()
    cocos2d::AffineTransform ret = self->getParentToNodeAffineTransform();
    int num_ret = olua_copy_object(L, ret, "cc.AffineTransform");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getParentToNodeTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // const cocos2d::Mat4 &getParentToNodeTransform()
    const cocos2d::Mat4 &ret = self->getParentToNodeTransform();
    int num_ret = olua_push_object(L, ret, "cc.Mat4");

    olua_endinvoke(L);

    return num_ret;
}

#if CC_USE_PHYSICS
static int _olua_fun_cocos2d_Node_getPhysicsBody(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // @addref(^) cocos2d::PhysicsBody *getPhysicsBody()
    cocos2d::PhysicsBody *ret = self->getPhysicsBody();
    int num_ret = olua_push_object(L, ret, "cc.PhysicsBody");

    // insert code after call
    olua_addref(L, 1, "physicsbody", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}
#endif

static int _olua_fun_cocos2d_Node_getPosition$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // const cocos2d::Vec2 &getPosition()
    const cocos2d::Vec2 &ret = self->getPosition();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getPosition$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float *arg1 = nullptr;       /** x */
    float *arg2 = nullptr;       /** y */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_pointer(L, 2, &arg1, "olua.float");
    olua_check_pointer(L, 3, &arg2, "olua.float");

    // void getPosition(float *x, float *y)
    self->getPosition(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_getPosition(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // const cocos2d::Vec2 &getPosition()
        return _olua_fun_cocos2d_Node_getPosition$1(L);
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_pointer(L, 2, "olua.float")) && (olua_is_pointer(L, 3, "olua.float"))) {
            // void getPosition(float *x, float *y)
            return _olua_fun_cocos2d_Node_getPosition$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::getPosition' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_getPosition3D(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::Vec3 getPosition3D()
    cocos2d::Vec3 ret = self->getPosition3D();
    int num_ret = olua_copy_object(L, ret, "cc.Vec3");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getPositionNormalized(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // const cocos2d::Vec2 &getPositionNormalized()
    const cocos2d::Vec2 &ret = self->getPositionNormalized();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getPositionX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getPositionX()
    float ret = self->getPositionX();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getPositionY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getPositionY()
    float ret = self->getPositionY();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getPositionZ(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getPositionZ()
    float ret = self->getPositionZ();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getProgramState(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // @addref(^) cocos2d::backend::ProgramState *getProgramState()
    cocos2d::backend::ProgramState *ret = self->getProgramState();
    int num_ret = olua_push_object(L, ret, "ccb.ProgramState");

    // insert code after call
    olua_addref(L, 1, "programstate", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getRotation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getRotation()
    float ret = self->getRotation();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getRotation3D(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::Vec3 getRotation3D()
    cocos2d::Vec3 ret = self->getRotation3D();
    int num_ret = olua_copy_object(L, ret, "cc.Vec3");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getRotationQuat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::Quaternion getRotationQuat()
    cocos2d::Quaternion ret = self->getRotationQuat();
    int num_ret = olua_copy_object(L, ret, "cc.Quaternion");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getRotationSkewX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getRotationSkewX()
    float ret = self->getRotationSkewX();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getRotationSkewY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getRotationSkewY()
    float ret = self->getRotationSkewY();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getScale(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getScale()
    float ret = self->getScale();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getScaleX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getScaleX()
    float ret = self->getScaleX();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getScaleY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getScaleY()
    float ret = self->getScaleY();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getScaleZ(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getScaleZ()
    float ret = self->getScaleZ();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::Scene *getScene()
    cocos2d::Scene *ret = self->getScene();
    int num_ret = olua_push_object(L, ret, "cc.Scene");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getScheduler(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // @addref(^) cocos2d::Scheduler *getScheduler()
    cocos2d::Scheduler *ret = self->getScheduler();
    int num_ret = olua_push_object(L, ret, "cc.Scheduler");

    // insert code after call
    olua_addref(L, 1, "scheduler", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getSkewX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getSkewX()
    float ret = self->getSkewX();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getSkewY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // float getSkewY()
    float ret = self->getSkewY();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // int getTag()
    int ret = self->getTag();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getUserData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void *getUserData()
    void *ret = self->getUserData();
    int num_ret = olua_push_object(L, ret, "void *");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getUserObject(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::Ref *getUserObject()
    cocos2d::Ref *ret = self->getUserObject();
    int num_ret = olua_push_object(L, ret, "cc.Ref");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** obj */

    olua_check_object(L, 1, &arg1, "cc.Node");

    // @extend(cocos2d::NodeExtend) static float getWidth(cocos2d::Node *obj)
    float ret = cocos2d::NodeExtend::getWidth(arg1);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getWorldToNodeAffineTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::AffineTransform getWorldToNodeAffineTransform()
    cocos2d::AffineTransform ret = self->getWorldToNodeAffineTransform();
    int num_ret = olua_copy_object(L, ret, "cc.AffineTransform");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_getWorldToNodeTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // cocos2d::Mat4 getWorldToNodeTransform()
    cocos2d::Mat4 ret = self->getWorldToNodeTransform();
    int num_ret = olua_copy_object(L, ret, "cc.Mat4");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // bool init()
    bool ret = self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_isCascadeColorEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // bool isCascadeColorEnabled()
    bool ret = self->isCascadeColorEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_isCascadeOpacityEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // bool isCascadeOpacityEnabled()
    bool ret = self->isCascadeOpacityEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_isIgnoreAnchorPointForPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // bool isIgnoreAnchorPointForPosition()
    bool ret = self->isIgnoreAnchorPointForPosition();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_isOpacityModifyRGB(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // bool isOpacityModifyRGB()
    bool ret = self->isOpacityModifyRGB();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_isRunning(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // bool isRunning()
    bool ret = self->isRunning();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_isScheduled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** key */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_string(L, 2, &arg1);

    // bool isScheduled(const std::string &key)
    bool ret = self->isScheduled(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_isVisible(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // bool isVisible()
    bool ret = self->isVisible();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Node()
    cocos2d::Node *ret = new cocos2d::Node();
    int num_ret = olua_push_object(L, ret, "cc.Node");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_onEnter(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // insert code before call
    if (!self->getParent()) {
        luaL_error(L, "parent is nullptr");
    }

    // void onEnter()
    self->onEnter();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_onEnterTransitionDidFinish(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void onEnterTransitionDidFinish()
    self->onEnterTransitionDidFinish();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_onExit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // insert code before call
    if (!self->getParent()) {
        luaL_error(L, "parent is nullptr");
    }

    // void onExit()
    self->onExit();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_onExitTransitionDidStart(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void onExitTransitionDidStart()
    self->onExitTransitionDidStart();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_pause(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void pause()
    self->pause();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeAllChildren(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // @delref(children *) void removeAllChildren()
    self->removeAllChildren();

    // insert code after call
    olua_delallrefs(L, 1, "children");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeAllChildrenWithCleanup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** cleanup */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // @delref(children *) void removeAllChildrenWithCleanup(bool cleanup)
    self->removeAllChildrenWithCleanup(arg1);

    // insert code after call
    olua_delallrefs(L, 1, "children");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeAllComponents(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // @delref(components *) void removeAllComponents()
    self->removeAllComponents();

    // insert code after call
    olua_delallrefs(L, 1, "components");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeChild$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    bool arg2 = false;       /** cleanup */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_bool(L, 3, &arg2);

    // void removeChild(@delref(children |) cocos2d::Node *child, @optional bool cleanup)
    self->removeChild(arg1, arg2);

    // insert code after call
    olua_delref(L, 1, "children", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeChild$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void removeChild(@delref(children |) cocos2d::Node *child)
    self->removeChild(arg1);

    // insert code after call
    olua_delref(L, 1, "children", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeChild(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Node"))) {
            // void removeChild(@delref(children |) cocos2d::Node *child)
            return _olua_fun_cocos2d_Node_removeChild$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_bool(L, 3))) {
            // void removeChild(@delref(children |) cocos2d::Node *child, @optional bool cleanup)
            return _olua_fun_cocos2d_Node_removeChild$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::removeChild' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeChildByName$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */
    bool arg2 = false;       /** cleanup */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // insert code before call
    olua_startcmpref(L, 1, "children");

    // @delref(children ~) void removeChildByName(const std::string &name, @optional bool cleanup)
    self->removeChildByName(arg1, arg2);

    // insert code after call
    olua_endcmpref(L, 1, "children");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeChildByName$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_string(L, 2, &arg1);

    // insert code before call
    olua_startcmpref(L, 1, "children");

    // @delref(children ~) void removeChildByName(const std::string &name)
    self->removeChildByName(arg1);

    // insert code after call
    olua_endcmpref(L, 1, "children");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeChildByName(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_string(L, 2))) {
            // @delref(children ~) void removeChildByName(const std::string &name)
            return _olua_fun_cocos2d_Node_removeChildByName$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_string(L, 2)) && (olua_is_bool(L, 3))) {
            // @delref(children ~) void removeChildByName(const std::string &name, @optional bool cleanup)
            return _olua_fun_cocos2d_Node_removeChildByName$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::removeChildByName' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeChildByTag$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    int arg1 = 0;       /** tag */
    bool arg2 = false;       /** cleanup */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // insert code before call
    olua_startcmpref(L, 1, "children");

    // @delref(children ~) void removeChildByTag(int tag, @optional bool cleanup)
    self->removeChildByTag(arg1, arg2);

    // insert code after call
    olua_endcmpref(L, 1, "children");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeChildByTag$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    int arg1 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // insert code before call
    olua_startcmpref(L, 1, "children");

    // @delref(children ~) void removeChildByTag(int tag)
    self->removeChildByTag(arg1);

    // insert code after call
    olua_endcmpref(L, 1, "children");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeChildByTag(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_integer(L, 2))) {
            // @delref(children ~) void removeChildByTag(int tag)
            return _olua_fun_cocos2d_Node_removeChildByTag$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_integer(L, 2)) && (olua_is_bool(L, 3))) {
            // @delref(children ~) void removeChildByTag(int tag, @optional bool cleanup)
            return _olua_fun_cocos2d_Node_removeChildByTag$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::removeChildByTag' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeComponent$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_string(L, 2, &arg1);

    // insert code before call
    olua_startcmpref(L, 1, "components");

    // @delref(components ~) bool removeComponent(const std::string &name)
    bool ret = self->removeComponent(arg1);
    int num_ret = olua_push_bool(L, ret);

    // insert code after call
    olua_endcmpref(L, 1, "components");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_removeComponent$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Component *arg1 = nullptr;       /** component */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Component");

    // insert code before call
    olua_startcmpref(L, 1, "components");

    // @delref(components ~) bool removeComponent(cocos2d::Component *component)
    bool ret = self->removeComponent(arg1);
    int num_ret = olua_push_bool(L, ret);

    // insert code after call
    olua_endcmpref(L, 1, "components");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_removeComponent(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_string(L, 2))) {
            // @delref(components ~) bool removeComponent(const std::string &name)
            return _olua_fun_cocos2d_Node_removeComponent$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Component"))) {
            // @delref(components ~) bool removeComponent(cocos2d::Component *component)
            return _olua_fun_cocos2d_Node_removeComponent$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::removeComponent' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeFromParent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // insert code before call
    if (!self->getParent()) {
        return 0;
    }
    olua_pushobj<cocos2d::Node>(L, self->getParent());
    int parent = lua_gettop(L);

    // @delref(children | parent) void removeFromParent()
    self->removeFromParent();

    // insert code after call
    olua_delref(L, parent, "children", 1, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_removeFromParentAndCleanup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** cleanup */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // insert code before call
    if (!self->getParent()) {
        return 0;
    }
    olua_pushobj<cocos2d::Node>(L, self->getParent());
    int parent = lua_gettop(L);

    // @delref(children | parent) void removeFromParentAndCleanup(bool cleanup)
    self->removeFromParentAndCleanup(arg1);

    // insert code after call
    olua_delref(L, parent, "children", 1, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_reorderChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    int arg2 = 0;       /** localZOrder */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_integer(L, 3, &arg2);

    // void reorderChild(cocos2d::Node *child, int localZOrder)
    self->reorderChild(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_resume(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void resume()
    self->resume();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_runAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Action *arg1 = nullptr;       /** action */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Action");

    // insert code before call
    olua_startcmpref(L, 1, "actions");

    // @delref(actions ~) cocos2d::Action *runAction(@addref(actions |) cocos2d::Action *action)
    cocos2d::Action *ret = self->runAction(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Action");

    // insert code after call
    olua_addref(L, 1, "actions", 2, OLUA_REF_MULTI);
    olua_endcmpref(L, 1, "actions");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Node_schedule$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void (float)> arg1;       /** callback */
    std::string arg2;       /** key */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_callback(L, 2, &arg1, "std.function");
    olua_check_string(L, 3, &arg2);

    void *cb_store = (void *)self;
    std::string cb_tag = makeScheduleCallbackTag(arg2);
    std::string cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg1 = [cb_store, cb_name, cb_ctx /*, ML */](float cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_number(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            lua_settop(L, top);
        }
    };

    // void schedule(const std::function<void (float)> &callback, const std::string &key)
    self->schedule(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_schedule$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void (float)> arg1;       /** callback */
    float arg2 = 0;       /** interval */
    std::string arg3;       /** key */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_callback(L, 2, &arg1, "std.function");
    olua_check_number(L, 3, &arg2);
    olua_check_string(L, 4, &arg3);

    void *cb_store = (void *)self;
    std::string cb_tag = makeScheduleCallbackTag(arg3);
    std::string cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg1 = [cb_store, cb_name, cb_ctx /*, ML */](float cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_number(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            lua_settop(L, top);
        }
    };

    // void schedule(const std::function<void (float)> &callback, float interval, const std::string &key)
    self->schedule(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_schedule$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void (float)> arg1;       /** callback */
    float arg2 = 0;       /** interval */
    unsigned int arg3 = 0;       /** repeat_ */
    float arg4 = 0;       /** delay */
    std::string arg5;       /** key */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_callback(L, 2, &arg1, "std.function");
    olua_check_number(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_string(L, 6, &arg5);

    void *cb_store = (void *)self;
    std::string cb_tag = makeScheduleCallbackTag(arg5);
    std::string cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg1 = [cb_store, cb_name, cb_ctx /*, ML */](float cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_number(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            lua_settop(L, top);
        }
    };

    // void schedule(const std::function<void (float)> &callback, float interval, unsigned int repeat_, float delay, const std::string &key)
    self->schedule(arg1, arg2, arg3, arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_schedule(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_callback(L, 2, "std.function")) && (olua_is_string(L, 3))) {
            // void schedule(const std::function<void (float)> &callback, const std::string &key)
            return _olua_fun_cocos2d_Node_schedule$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_callback(L, 2, "std.function")) && (olua_is_number(L, 3)) && (olua_is_string(L, 4))) {
            // void schedule(const std::function<void (float)> &callback, float interval, const std::string &key)
            return _olua_fun_cocos2d_Node_schedule$2(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_callback(L, 2, "std.function")) && (olua_is_number(L, 3)) && (olua_is_integer(L, 4)) && (olua_is_number(L, 5)) && (olua_is_string(L, 6))) {
            // void schedule(const std::function<void (float)> &callback, float interval, unsigned int repeat_, float delay, const std::string &key)
            return _olua_fun_cocos2d_Node_schedule$3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::schedule' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_scheduleOnce(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void (float)> arg1;       /** callback */
    float arg2 = 0;       /** delay */
    std::string arg3;       /** key */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_callback(L, 2, &arg1, "std.function");
    olua_check_number(L, 3, &arg2);
    olua_check_string(L, 4, &arg3);

    void *cb_store = (void *)self;
    std::string cb_tag = makeScheduleCallbackTag(arg3);
    std::string cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg1 = [cb_store, cb_name, cb_ctx /*, ML */](float cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_number(L, cb_arg1);

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void scheduleOnce(const std::function<void (float)> &callback, float delay, const std::string &key)
    self->scheduleOnce(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_scheduleUpdate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void scheduleUpdate()
    self->scheduleUpdate();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_scheduleUpdateWithPriority(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    int arg1 = 0;       /** priority */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // void scheduleUpdateWithPriority(int priority)
    self->scheduleUpdateWithPriority(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setActionManager(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::ActionManager *arg1 = nullptr;       /** actionManager */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.ActionManager");

    // void setActionManager(@addref(^) cocos2d::ActionManager *actionManager)
    self->setActionManager(arg1);

    // insert code after call
    olua_addref(L, 1, "actionmanager", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setAdditionalTransform$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Mat4 *arg1 = nullptr;       /** additionalTransform */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Mat4");

    // void setAdditionalTransform(const cocos2d::Mat4 *additionalTransform)
    self->setAdditionalTransform(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setAdditionalTransform$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Mat4 *arg1;       /** additionalTransform */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Mat4");

    // void setAdditionalTransform(const cocos2d::Mat4 &additionalTransform)
    self->setAdditionalTransform(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setAdditionalTransform$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::AffineTransform *arg1;       /** additionalTransform */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.AffineTransform");

    // void setAdditionalTransform(const cocos2d::AffineTransform &additionalTransform)
    self->setAdditionalTransform(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setAdditionalTransform(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Mat4"))) {
            // void setAdditionalTransform(const cocos2d::Mat4 *additionalTransform)
            return _olua_fun_cocos2d_Node_setAdditionalTransform$1(L);
        }

        if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Mat4"))) {
            // void setAdditionalTransform(const cocos2d::Mat4 &additionalTransform)
            return _olua_fun_cocos2d_Node_setAdditionalTransform$2(L);
        }

        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.AffineTransform"))) {
            // void setAdditionalTransform(const cocos2d::AffineTransform &additionalTransform)
            return _olua_fun_cocos2d_Node_setAdditionalTransform$3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::setAdditionalTransform' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_setAlpha(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** obj */
    float arg2 = 0;       /** value */

    olua_check_object(L, 1, &arg1, "cc.Node");
    olua_check_number(L, 2, &arg2);

    // @extend(cocos2d::NodeExtend) static void setAlpha(cocos2d::Node *obj, float value)
    cocos2d::NodeExtend::setAlpha(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setAnchorPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 *arg1;       /** anchorPoint */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setAnchorPoint(const cocos2d::Vec2 &anchorPoint)
    self->setAnchorPoint(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setAnchorX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** obj */
    float arg2 = 0;       /** value */

    olua_check_object(L, 1, &arg1, "cc.Node");
    olua_check_number(L, 2, &arg2);

    // @extend(cocos2d::NodeExtend) static void setAnchorX(cocos2d::Node *obj, float value)
    cocos2d::NodeExtend::setAnchorX(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setAnchorY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** obj */
    float arg2 = 0;       /** value */

    olua_check_object(L, 1, &arg1, "cc.Node");
    olua_check_number(L, 2, &arg2);

    // @extend(cocos2d::NodeExtend) static void setAnchorY(cocos2d::Node *obj, float value)
    cocos2d::NodeExtend::setAnchorY(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setCameraMask$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    unsigned short arg1 = 0;       /** mask */
    bool arg2 = false;       /** applyChildren */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void setCameraMask(unsigned short mask, @optional bool applyChildren)
    self->setCameraMask(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setCameraMask$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    unsigned short arg1 = 0;       /** mask */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // void setCameraMask(unsigned short mask)
    self->setCameraMask(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setCameraMask(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_integer(L, 2))) {
            // void setCameraMask(unsigned short mask)
            return _olua_fun_cocos2d_Node_setCameraMask$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_integer(L, 2)) && (olua_is_bool(L, 3))) {
            // void setCameraMask(unsigned short mask, @optional bool applyChildren)
            return _olua_fun_cocos2d_Node_setCameraMask$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::setCameraMask' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_setCascadeColorEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** cascadeColorEnabled */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setCascadeColorEnabled(bool cascadeColorEnabled)
    self->setCascadeColorEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setCascadeOpacityEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** cascadeOpacityEnabled */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setCascadeOpacityEnabled(bool cascadeOpacityEnabled)
    self->setCascadeOpacityEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Color3B arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void setColor(const cocos2d::Color3B &color)
    self->setColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setContentSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Size *arg1;       /** contentSize */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setContentSize(const cocos2d::Size &contentSize)
    self->setContentSize(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setEventDispatcher(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::EventDispatcher *arg1 = nullptr;       /** dispatcher */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.EventDispatcher");

    // void setEventDispatcher(@addref(^) cocos2d::EventDispatcher *dispatcher)
    self->setEventDispatcher(arg1);

    // insert code after call
    olua_addref(L, 1, "eventdispatcher", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setGlobalZOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** globalZOrder */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setGlobalZOrder(float globalZOrder)
    self->setGlobalZOrder(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** obj */
    float arg2 = 0;       /** value */

    olua_check_object(L, 1, &arg1, "cc.Node");
    olua_check_number(L, 2, &arg2);

    // @extend(cocos2d::NodeExtend) static void setHeight(cocos2d::Node *obj, float value)
    cocos2d::NodeExtend::setHeight(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setIgnoreAnchorPointForPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** ignore */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setIgnoreAnchorPointForPosition(bool ignore)
    self->setIgnoreAnchorPointForPosition(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setLocalZOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::int32_t arg1 = 0;       /** localZOrder */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // void setLocalZOrder(std::int32_t localZOrder)
    self->setLocalZOrder(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_string(L, 2, &arg1);

    // void setName(const std::string &name)
    self->setName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setNodeToParentTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Mat4 *arg1;       /** transform */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Mat4");

    // void setNodeToParentTransform(const cocos2d::Mat4 &transform)
    self->setNodeToParentTransform(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setNormalizedPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 *arg1;       /** position */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setNormalizedPosition(const cocos2d::Vec2 &position)
    self->setNormalizedPosition(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setOnEnterCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void ()> arg1;       /** callback */

    olua_to_object(L, 1, &self, "cc.Node");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "OnEnterCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */]() {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);

                olua_callback(L, cb_store, cb_name.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // void setOnEnterCallback(@nullable const std::function<void ()> &callback)
    self->setOnEnterCallback(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setOnEnterTransitionDidFinishCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void ()> arg1;       /** callback */

    olua_to_object(L, 1, &self, "cc.Node");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "OnEnterTransitionDidFinishCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */]() {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);

                olua_callback(L, cb_store, cb_name.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // void setOnEnterTransitionDidFinishCallback(@nullable const std::function<void ()> &callback)
    self->setOnEnterTransitionDidFinishCallback(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setOnExitCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void ()> arg1;       /** callback */

    olua_to_object(L, 1, &self, "cc.Node");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "OnExitCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */]() {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);

                olua_callback(L, cb_store, cb_name.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // void setOnExitCallback(@nullable const std::function<void ()> &callback)
    self->setOnExitCallback(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setOnExitTransitionDidStartCallback(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::function<void ()> arg1;       /** callback */

    olua_to_object(L, 1, &self, "cc.Node");
    if (!olua_isnoneornil(L, 2)) {
        olua_check_callback(L, 2, &arg1, "std.function");
    }

    void *cb_store = (void *)self;
    std::string cb_tag = "OnExitTransitionDidStartCallback";
    std::string cb_name;
    if (olua_isfunction(L, 2)) {
        cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg1 = [cb_store, cb_name, cb_ctx /*, ML */]() {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);

                olua_callback(L, cb_store, cb_name.c_str(), 0);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg1 = nullptr;
    }

    // void setOnExitTransitionDidStartCallback(@nullable const std::function<void ()> &callback)
    self->setOnExitTransitionDidStartCallback(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    uint8_t arg1 = 0;       /** opacity */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // void setOpacity(uint8_t opacity)
    self->setOpacity(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setOpacityModifyRGB(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setOpacityModifyRGB(bool value)
    self->setOpacityModifyRGB(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setParent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** parent */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void setParent(cocos2d::Node *parent)
    self->setParent(arg1);

    olua_endinvoke(L);

    return 0;
}

#if CC_USE_PHYSICS
static int _olua_fun_cocos2d_Node_setPhysicsBody(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::PhysicsBody *arg1 = nullptr;       /** physicsBody */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.PhysicsBody");

    // void setPhysicsBody(@addref(^) cocos2d::PhysicsBody *physicsBody)
    self->setPhysicsBody(arg1);

    // insert code after call
    olua_addref(L, 1, "physicsbody", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return 0;
}
#endif

static int _olua_fun_cocos2d_Node_setPosition$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 *arg1;       /** position */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setPosition(const cocos2d::Vec2 &position)
    self->setPosition(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setPosition$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** x */
    float arg2 = 0;       /** y */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setPosition(float x, float y)
    self->setPosition(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setPosition(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Vec2"))) {
            // void setPosition(const cocos2d::Vec2 &position)
            return _olua_fun_cocos2d_Node_setPosition$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_number(L, 2)) && (olua_is_number(L, 3))) {
            // void setPosition(float x, float y)
            return _olua_fun_cocos2d_Node_setPosition$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::setPosition' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_setPosition3D(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec3 *arg1;       /** position */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Vec3");

    // void setPosition3D(const cocos2d::Vec3 &position)
    self->setPosition3D(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setPositionNormalized(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec2 *arg1;       /** position */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setPositionNormalized(const cocos2d::Vec2 &position)
    self->setPositionNormalized(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setPositionX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** x */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setPositionX(float x)
    self->setPositionX(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setPositionY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** y */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setPositionY(float y)
    self->setPositionY(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setPositionZ(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** positionZ */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setPositionZ(float positionZ)
    self->setPositionZ(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setProgramState(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::backend::ProgramState *arg1 = nullptr;       /** programState */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "ccb.ProgramState");

    // void setProgramState(@addref(^) cocos2d::backend::ProgramState *programState)
    self->setProgramState(arg1);

    // insert code after call
    olua_addref(L, 1, "programstate", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setRotation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** rotation */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setRotation(float rotation)
    self->setRotation(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setRotation3D(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Vec3 *arg1;       /** rotation */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Vec3");

    // void setRotation3D(const cocos2d::Vec3 &rotation)
    self->setRotation3D(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setRotationQuat(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Quaternion *arg1;       /** quat */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Quaternion");

    // void setRotationQuat(const cocos2d::Quaternion &quat)
    self->setRotationQuat(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setRotationSkewX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** rotationX */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setRotationSkewX(float rotationX)
    self->setRotationSkewX(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setRotationSkewY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** rotationY */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setRotationSkewY(float rotationY)
    self->setRotationSkewY(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setScale$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** scale */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setScale(float scale)
    self->setScale(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setScale$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** scaleX */
    float arg2 = 0;       /** scaleY */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setScale(float scaleX, float scaleY)
    self->setScale(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setScale(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_number(L, 2))) {
            // void setScale(float scale)
            return _olua_fun_cocos2d_Node_setScale$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_number(L, 2)) && (olua_is_number(L, 3))) {
            // void setScale(float scaleX, float scaleY)
            return _olua_fun_cocos2d_Node_setScale$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::setScale' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Node_setScaleX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** scaleX */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setScaleX(float scaleX)
    self->setScaleX(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setScaleY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** scaleY */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setScaleY(float scaleY)
    self->setScaleY(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setScaleZ(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** scaleZ */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setScaleZ(float scaleZ)
    self->setScaleZ(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setScheduler(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Scheduler *arg1 = nullptr;       /** scheduler */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Scheduler");

    // void setScheduler(@addref(^) cocos2d::Scheduler *scheduler)
    self->setScheduler(arg1);

    // insert code after call
    olua_addref(L, 1, "scheduler", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setSkewX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** skewX */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setSkewX(float skewX)
    self->setSkewX(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setSkewY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** skewY */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void setSkewY(float skewY)
    self->setSkewY(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    int arg1 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // void setTag(int tag)
    self->setTag(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setUserData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    void *arg1 = nullptr;       /** userData */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "void *");

    // void setUserData(void *userData)
    self->setUserData(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setUserObject(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Ref *arg1 = nullptr;       /** userObject */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Ref");

    // void setUserObject(cocos2d::Ref *userObject)
    self->setUserObject(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setVisible(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    bool arg1 = false;       /** visible */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_bool(L, 2, &arg1);

    // void setVisible(bool visible)
    self->setVisible(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_setWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** obj */
    float arg2 = 0;       /** value */

    olua_check_object(L, 1, &arg1, "cc.Node");
    olua_check_number(L, 2, &arg2);

    // @extend(cocos2d::NodeExtend) static void setWidth(cocos2d::Node *obj, float value)
    cocos2d::NodeExtend::setWidth(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_sortAllChildren(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void sortAllChildren()
    self->sortAllChildren();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_stopAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Action *arg1 = nullptr;       /** action */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Action");

    // insert code before call
    olua_startcmpref(L, 1, "actions");

    // @delref(actions ~) void stopAction(cocos2d::Action *action)
    self->stopAction(arg1);

    // insert code after call
    olua_endcmpref(L, 1, "actions");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_stopActionByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    int arg1 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // insert code before call
    olua_startcmpref(L, 1, "actions");

    // @delref(actions ~) void stopActionByTag(int tag)
    self->stopActionByTag(arg1);

    // insert code after call
    olua_endcmpref(L, 1, "actions");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_stopActionsByFlags(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    unsigned int arg1 = 0;       /** flags */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // insert code before call
    olua_startcmpref(L, 1, "actions");

    // @delref(actions ~) void stopActionsByFlags(unsigned int flags)
    self->stopActionsByFlags(arg1);

    // insert code after call
    olua_endcmpref(L, 1, "actions");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_stopAllActions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // insert code before call
    olua_startcmpref(L, 1, "actions");

    // @delref(actions ~) void stopAllActions()
    self->stopAllActions();

    // insert code after call
    olua_endcmpref(L, 1, "actions");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_stopAllActionsByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    int arg1 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // insert code before call
    olua_startcmpref(L, 1, "actions");

    // @delref(actions ~) void stopAllActionsByTag(int tag)
    self->stopAllActionsByTag(arg1);

    // insert code after call
    olua_endcmpref(L, 1, "actions");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_unschedule(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    std::string arg1;       /** key */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_string(L, 2, &arg1);

    std::string cb_tag = makeScheduleCallbackTag(arg1);
    void *cb_store = (void *)self;
    olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);

    // void unschedule(const std::string &key)
    self->unschedule(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_unscheduleAllCallbacks(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    std::string cb_tag = makeScheduleCallbackTag("");
    void *cb_store = (void *)self;
    olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_STARTWITH);

    // void unscheduleAllCallbacks()
    self->unscheduleAllCallbacks();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_unscheduleUpdate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void unscheduleUpdate()
    self->unscheduleUpdate();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_update(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    float arg1 = 0;       /** delta */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_number(L, 2, &arg1);

    // void update(float delta)
    self->update(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_updateDisplayedColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Color3B arg1;       /** parentColor */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void updateDisplayedColor(const cocos2d::Color3B &parentColor)
    self->updateDisplayedColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_updateDisplayedOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    uint8_t arg1 = 0;       /** parentOpacity */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_integer(L, 2, &arg1);

    // void updateDisplayedOpacity(uint8_t parentOpacity)
    self->updateDisplayedOpacity(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_updateOrderOfArrival(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void updateOrderOfArrival()
    self->updateOrderOfArrival();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_updateTransform(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void updateTransform()
    self->updateTransform();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_visit$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;
    cocos2d::Renderer *arg1 = nullptr;       /** renderer */
    cocos2d::Mat4 *arg2;       /** parentTransform */
    uint32_t arg3 = 0;       /** parentFlags */

    olua_to_object(L, 1, &self, "cc.Node");
    olua_check_object(L, 2, &arg1, "cc.Renderer");
    olua_check_object(L, 3, &arg2, "cc.Mat4");
    olua_check_integer(L, 4, &arg3);

    // void visit(cocos2d::Renderer *renderer, const cocos2d::Mat4 &parentTransform, uint32_t parentFlags)
    self->visit(arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_visit$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Node");

    // void visit()
    self->visit();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Node_visit(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // void visit()
        return _olua_fun_cocos2d_Node_visit$2(L);
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Node")) && (olua_is_object(L, 2, "cc.Renderer")) && (olua_is_object(L, 3, "cc.Mat4")) && (olua_is_integer(L, 4))) {
            // void visit(cocos2d::Renderer *renderer, const cocos2d::Mat4 &parentTransform, uint32_t parentFlags)
            return _olua_fun_cocos2d_Node_visit$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Node::visit' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_Node(lua_State *L)
{
    oluacls_class<cocos2d::Node, cocos2d::Ref>(L, "cc.Node");
    oluacls_func(L, "__index", _olua_fun_cocos2d_Node___index);
    oluacls_func(L, "addChild", _olua_fun_cocos2d_Node_addChild);
    oluacls_func(L, "addComponent", _olua_fun_cocos2d_Node_addComponent);
    oluacls_func(L, "cleanup", _olua_fun_cocos2d_Node_cleanup);
    oluacls_func(L, "convertToNodeSpace", _olua_fun_cocos2d_Node_convertToNodeSpace);
    oluacls_func(L, "convertToNodeSpaceAR", _olua_fun_cocos2d_Node_convertToNodeSpaceAR);
    oluacls_func(L, "convertToWorldSpace", _olua_fun_cocos2d_Node_convertToWorldSpace);
    oluacls_func(L, "convertToWorldSpaceAR", _olua_fun_cocos2d_Node_convertToWorldSpaceAR);
    oluacls_func(L, "convertTouchToNodeSpace", _olua_fun_cocos2d_Node_convertTouchToNodeSpace);
    oluacls_func(L, "convertTouchToNodeSpaceAR", _olua_fun_cocos2d_Node_convertTouchToNodeSpaceAR);
    oluacls_func(L, "create", _olua_fun_cocos2d_Node_create);
    oluacls_func(L, "draw", _olua_fun_cocos2d_Node_draw);
    oluacls_func(L, "enumerateChildren", _olua_fun_cocos2d_Node_enumerateChildren);
    oluacls_func(L, "getActionByTag", _olua_fun_cocos2d_Node_getActionByTag);
    oluacls_func(L, "getActionManager", _olua_fun_cocos2d_Node_getActionManager);
    oluacls_func(L, "getAlpha", _olua_fun_cocos2d_Node_getAlpha);
    oluacls_func(L, "getAnchorPoint", _olua_fun_cocos2d_Node_getAnchorPoint);
    oluacls_func(L, "getAnchorPointInPoints", _olua_fun_cocos2d_Node_getAnchorPointInPoints);
    oluacls_func(L, "getAnchorX", _olua_fun_cocos2d_Node_getAnchorX);
    oluacls_func(L, "getAnchorY", _olua_fun_cocos2d_Node_getAnchorY);
    oluacls_func(L, "getAttachedNodeCount", _olua_fun_cocos2d_Node_getAttachedNodeCount);
    oluacls_func(L, "getBoundingBox", _olua_fun_cocos2d_Node_getBoundingBox);
    oluacls_func(L, "getBounds", _olua_fun_cocos2d_Node_getBounds);
    oluacls_func(L, "getCameraMask", _olua_fun_cocos2d_Node_getCameraMask);
    oluacls_func(L, "getChildByName", _olua_fun_cocos2d_Node_getChildByName);
    oluacls_func(L, "getChildByTag", _olua_fun_cocos2d_Node_getChildByTag);
    oluacls_func(L, "getChildren", _olua_fun_cocos2d_Node_getChildren);
    oluacls_func(L, "getChildrenCount", _olua_fun_cocos2d_Node_getChildrenCount);
    oluacls_func(L, "getColor", _olua_fun_cocos2d_Node_getColor);
    oluacls_func(L, "getComponent", _olua_fun_cocos2d_Node_getComponent);
    oluacls_func(L, "getContentSize", _olua_fun_cocos2d_Node_getContentSize);
    oluacls_func(L, "getDescription", _olua_fun_cocos2d_Node_getDescription);
    oluacls_func(L, "getDisplayedColor", _olua_fun_cocos2d_Node_getDisplayedColor);
    oluacls_func(L, "getDisplayedOpacity", _olua_fun_cocos2d_Node_getDisplayedOpacity);
    oluacls_func(L, "getEventDispatcher", _olua_fun_cocos2d_Node_getEventDispatcher);
    oluacls_func(L, "getGlobalZOrder", _olua_fun_cocos2d_Node_getGlobalZOrder);
    oluacls_func(L, "getHeight", _olua_fun_cocos2d_Node_getHeight);
    oluacls_func(L, "getLocalZOrder", _olua_fun_cocos2d_Node_getLocalZOrder);
    oluacls_func(L, "getName", _olua_fun_cocos2d_Node_getName);
    oluacls_func(L, "getNodeToParentAffineTransform", _olua_fun_cocos2d_Node_getNodeToParentAffineTransform);
    oluacls_func(L, "getNodeToParentTransform", _olua_fun_cocos2d_Node_getNodeToParentTransform);
    oluacls_func(L, "getNodeToWorldAffineTransform", _olua_fun_cocos2d_Node_getNodeToWorldAffineTransform);
    oluacls_func(L, "getNodeToWorldTransform", _olua_fun_cocos2d_Node_getNodeToWorldTransform);
    oluacls_func(L, "getNormalizedPosition", _olua_fun_cocos2d_Node_getNormalizedPosition);
    oluacls_func(L, "getNumberOfRunningActions", _olua_fun_cocos2d_Node_getNumberOfRunningActions);
    oluacls_func(L, "getNumberOfRunningActionsByTag", _olua_fun_cocos2d_Node_getNumberOfRunningActionsByTag);
    oluacls_func(L, "getOnEnterCallback", _olua_fun_cocos2d_Node_getOnEnterCallback);
    oluacls_func(L, "getOnEnterTransitionDidFinishCallback", _olua_fun_cocos2d_Node_getOnEnterTransitionDidFinishCallback);
    oluacls_func(L, "getOnExitCallback", _olua_fun_cocos2d_Node_getOnExitCallback);
    oluacls_func(L, "getOnExitTransitionDidStartCallback", _olua_fun_cocos2d_Node_getOnExitTransitionDidStartCallback);
    oluacls_func(L, "getOpacity", _olua_fun_cocos2d_Node_getOpacity);
    oluacls_func(L, "getParent", _olua_fun_cocos2d_Node_getParent);
    oluacls_func(L, "getParentToNodeAffineTransform", _olua_fun_cocos2d_Node_getParentToNodeAffineTransform);
    oluacls_func(L, "getParentToNodeTransform", _olua_fun_cocos2d_Node_getParentToNodeTransform);
#if CC_USE_PHYSICS
    oluacls_func(L, "getPhysicsBody", _olua_fun_cocos2d_Node_getPhysicsBody);
#endif
    oluacls_func(L, "getPosition", _olua_fun_cocos2d_Node_getPosition);
    oluacls_func(L, "getPosition3D", _olua_fun_cocos2d_Node_getPosition3D);
    oluacls_func(L, "getPositionNormalized", _olua_fun_cocos2d_Node_getPositionNormalized);
    oluacls_func(L, "getPositionX", _olua_fun_cocos2d_Node_getPositionX);
    oluacls_func(L, "getPositionY", _olua_fun_cocos2d_Node_getPositionY);
    oluacls_func(L, "getPositionZ", _olua_fun_cocos2d_Node_getPositionZ);
    oluacls_func(L, "getProgramState", _olua_fun_cocos2d_Node_getProgramState);
    oluacls_func(L, "getRotation", _olua_fun_cocos2d_Node_getRotation);
    oluacls_func(L, "getRotation3D", _olua_fun_cocos2d_Node_getRotation3D);
    oluacls_func(L, "getRotationQuat", _olua_fun_cocos2d_Node_getRotationQuat);
    oluacls_func(L, "getRotationSkewX", _olua_fun_cocos2d_Node_getRotationSkewX);
    oluacls_func(L, "getRotationSkewY", _olua_fun_cocos2d_Node_getRotationSkewY);
    oluacls_func(L, "getScale", _olua_fun_cocos2d_Node_getScale);
    oluacls_func(L, "getScaleX", _olua_fun_cocos2d_Node_getScaleX);
    oluacls_func(L, "getScaleY", _olua_fun_cocos2d_Node_getScaleY);
    oluacls_func(L, "getScaleZ", _olua_fun_cocos2d_Node_getScaleZ);
    oluacls_func(L, "getScene", _olua_fun_cocos2d_Node_getScene);
    oluacls_func(L, "getScheduler", _olua_fun_cocos2d_Node_getScheduler);
    oluacls_func(L, "getSkewX", _olua_fun_cocos2d_Node_getSkewX);
    oluacls_func(L, "getSkewY", _olua_fun_cocos2d_Node_getSkewY);
    oluacls_func(L, "getTag", _olua_fun_cocos2d_Node_getTag);
    oluacls_func(L, "getUserData", _olua_fun_cocos2d_Node_getUserData);
    oluacls_func(L, "getUserObject", _olua_fun_cocos2d_Node_getUserObject);
    oluacls_func(L, "getWidth", _olua_fun_cocos2d_Node_getWidth);
    oluacls_func(L, "getWorldToNodeAffineTransform", _olua_fun_cocos2d_Node_getWorldToNodeAffineTransform);
    oluacls_func(L, "getWorldToNodeTransform", _olua_fun_cocos2d_Node_getWorldToNodeTransform);
    oluacls_func(L, "init", _olua_fun_cocos2d_Node_init);
    oluacls_func(L, "isCascadeColorEnabled", _olua_fun_cocos2d_Node_isCascadeColorEnabled);
    oluacls_func(L, "isCascadeOpacityEnabled", _olua_fun_cocos2d_Node_isCascadeOpacityEnabled);
    oluacls_func(L, "isIgnoreAnchorPointForPosition", _olua_fun_cocos2d_Node_isIgnoreAnchorPointForPosition);
    oluacls_func(L, "isOpacityModifyRGB", _olua_fun_cocos2d_Node_isOpacityModifyRGB);
    oluacls_func(L, "isRunning", _olua_fun_cocos2d_Node_isRunning);
    oluacls_func(L, "isScheduled", _olua_fun_cocos2d_Node_isScheduled);
    oluacls_func(L, "isVisible", _olua_fun_cocos2d_Node_isVisible);
    oluacls_func(L, "new", _olua_fun_cocos2d_Node_new);
    oluacls_func(L, "onEnter", _olua_fun_cocos2d_Node_onEnter);
    oluacls_func(L, "onEnterTransitionDidFinish", _olua_fun_cocos2d_Node_onEnterTransitionDidFinish);
    oluacls_func(L, "onExit", _olua_fun_cocos2d_Node_onExit);
    oluacls_func(L, "onExitTransitionDidStart", _olua_fun_cocos2d_Node_onExitTransitionDidStart);
    oluacls_func(L, "pause", _olua_fun_cocos2d_Node_pause);
    oluacls_func(L, "removeAllChildren", _olua_fun_cocos2d_Node_removeAllChildren);
    oluacls_func(L, "removeAllChildrenWithCleanup", _olua_fun_cocos2d_Node_removeAllChildrenWithCleanup);
    oluacls_func(L, "removeAllComponents", _olua_fun_cocos2d_Node_removeAllComponents);
    oluacls_func(L, "removeChild", _olua_fun_cocos2d_Node_removeChild);
    oluacls_func(L, "removeChildByName", _olua_fun_cocos2d_Node_removeChildByName);
    oluacls_func(L, "removeChildByTag", _olua_fun_cocos2d_Node_removeChildByTag);
    oluacls_func(L, "removeComponent", _olua_fun_cocos2d_Node_removeComponent);
    oluacls_func(L, "removeFromParent", _olua_fun_cocos2d_Node_removeFromParent);
    oluacls_func(L, "removeFromParentAndCleanup", _olua_fun_cocos2d_Node_removeFromParentAndCleanup);
    oluacls_func(L, "reorderChild", _olua_fun_cocos2d_Node_reorderChild);
    oluacls_func(L, "resume", _olua_fun_cocos2d_Node_resume);
    oluacls_func(L, "runAction", _olua_fun_cocos2d_Node_runAction);
    oluacls_func(L, "schedule", _olua_fun_cocos2d_Node_schedule);
    oluacls_func(L, "scheduleOnce", _olua_fun_cocos2d_Node_scheduleOnce);
    oluacls_func(L, "scheduleUpdate", _olua_fun_cocos2d_Node_scheduleUpdate);
    oluacls_func(L, "scheduleUpdateWithPriority", _olua_fun_cocos2d_Node_scheduleUpdateWithPriority);
    oluacls_func(L, "setActionManager", _olua_fun_cocos2d_Node_setActionManager);
    oluacls_func(L, "setAdditionalTransform", _olua_fun_cocos2d_Node_setAdditionalTransform);
    oluacls_func(L, "setAlpha", _olua_fun_cocos2d_Node_setAlpha);
    oluacls_func(L, "setAnchorPoint", _olua_fun_cocos2d_Node_setAnchorPoint);
    oluacls_func(L, "setAnchorX", _olua_fun_cocos2d_Node_setAnchorX);
    oluacls_func(L, "setAnchorY", _olua_fun_cocos2d_Node_setAnchorY);
    oluacls_func(L, "setCameraMask", _olua_fun_cocos2d_Node_setCameraMask);
    oluacls_func(L, "setCascadeColorEnabled", _olua_fun_cocos2d_Node_setCascadeColorEnabled);
    oluacls_func(L, "setCascadeOpacityEnabled", _olua_fun_cocos2d_Node_setCascadeOpacityEnabled);
    oluacls_func(L, "setColor", _olua_fun_cocos2d_Node_setColor);
    oluacls_func(L, "setContentSize", _olua_fun_cocos2d_Node_setContentSize);
    oluacls_func(L, "setEventDispatcher", _olua_fun_cocos2d_Node_setEventDispatcher);
    oluacls_func(L, "setGlobalZOrder", _olua_fun_cocos2d_Node_setGlobalZOrder);
    oluacls_func(L, "setHeight", _olua_fun_cocos2d_Node_setHeight);
    oluacls_func(L, "setIgnoreAnchorPointForPosition", _olua_fun_cocos2d_Node_setIgnoreAnchorPointForPosition);
    oluacls_func(L, "setLocalZOrder", _olua_fun_cocos2d_Node_setLocalZOrder);
    oluacls_func(L, "setName", _olua_fun_cocos2d_Node_setName);
    oluacls_func(L, "setNodeToParentTransform", _olua_fun_cocos2d_Node_setNodeToParentTransform);
    oluacls_func(L, "setNormalizedPosition", _olua_fun_cocos2d_Node_setNormalizedPosition);
    oluacls_func(L, "setOnEnterCallback", _olua_fun_cocos2d_Node_setOnEnterCallback);
    oluacls_func(L, "setOnEnterTransitionDidFinishCallback", _olua_fun_cocos2d_Node_setOnEnterTransitionDidFinishCallback);
    oluacls_func(L, "setOnExitCallback", _olua_fun_cocos2d_Node_setOnExitCallback);
    oluacls_func(L, "setOnExitTransitionDidStartCallback", _olua_fun_cocos2d_Node_setOnExitTransitionDidStartCallback);
    oluacls_func(L, "setOpacity", _olua_fun_cocos2d_Node_setOpacity);
    oluacls_func(L, "setOpacityModifyRGB", _olua_fun_cocos2d_Node_setOpacityModifyRGB);
    oluacls_func(L, "setParent", _olua_fun_cocos2d_Node_setParent);
#if CC_USE_PHYSICS
    oluacls_func(L, "setPhysicsBody", _olua_fun_cocos2d_Node_setPhysicsBody);
#endif
    oluacls_func(L, "setPosition", _olua_fun_cocos2d_Node_setPosition);
    oluacls_func(L, "setPosition3D", _olua_fun_cocos2d_Node_setPosition3D);
    oluacls_func(L, "setPositionNormalized", _olua_fun_cocos2d_Node_setPositionNormalized);
    oluacls_func(L, "setPositionX", _olua_fun_cocos2d_Node_setPositionX);
    oluacls_func(L, "setPositionY", _olua_fun_cocos2d_Node_setPositionY);
    oluacls_func(L, "setPositionZ", _olua_fun_cocos2d_Node_setPositionZ);
    oluacls_func(L, "setProgramState", _olua_fun_cocos2d_Node_setProgramState);
    oluacls_func(L, "setRotation", _olua_fun_cocos2d_Node_setRotation);
    oluacls_func(L, "setRotation3D", _olua_fun_cocos2d_Node_setRotation3D);
    oluacls_func(L, "setRotationQuat", _olua_fun_cocos2d_Node_setRotationQuat);
    oluacls_func(L, "setRotationSkewX", _olua_fun_cocos2d_Node_setRotationSkewX);
    oluacls_func(L, "setRotationSkewY", _olua_fun_cocos2d_Node_setRotationSkewY);
    oluacls_func(L, "setScale", _olua_fun_cocos2d_Node_setScale);
    oluacls_func(L, "setScaleX", _olua_fun_cocos2d_Node_setScaleX);
    oluacls_func(L, "setScaleY", _olua_fun_cocos2d_Node_setScaleY);
    oluacls_func(L, "setScaleZ", _olua_fun_cocos2d_Node_setScaleZ);
    oluacls_func(L, "setScheduler", _olua_fun_cocos2d_Node_setScheduler);
    oluacls_func(L, "setSkewX", _olua_fun_cocos2d_Node_setSkewX);
    oluacls_func(L, "setSkewY", _olua_fun_cocos2d_Node_setSkewY);
    oluacls_func(L, "setTag", _olua_fun_cocos2d_Node_setTag);
    oluacls_func(L, "setUserData", _olua_fun_cocos2d_Node_setUserData);
    oluacls_func(L, "setUserObject", _olua_fun_cocos2d_Node_setUserObject);
    oluacls_func(L, "setVisible", _olua_fun_cocos2d_Node_setVisible);
    oluacls_func(L, "setWidth", _olua_fun_cocos2d_Node_setWidth);
    oluacls_func(L, "sortAllChildren", _olua_fun_cocos2d_Node_sortAllChildren);
    oluacls_func(L, "stopAction", _olua_fun_cocos2d_Node_stopAction);
    oluacls_func(L, "stopActionByTag", _olua_fun_cocos2d_Node_stopActionByTag);
    oluacls_func(L, "stopActionsByFlags", _olua_fun_cocos2d_Node_stopActionsByFlags);
    oluacls_func(L, "stopAllActions", _olua_fun_cocos2d_Node_stopAllActions);
    oluacls_func(L, "stopAllActionsByTag", _olua_fun_cocos2d_Node_stopAllActionsByTag);
    oluacls_func(L, "unschedule", _olua_fun_cocos2d_Node_unschedule);
    oluacls_func(L, "unscheduleAllCallbacks", _olua_fun_cocos2d_Node_unscheduleAllCallbacks);
    oluacls_func(L, "unscheduleUpdate", _olua_fun_cocos2d_Node_unscheduleUpdate);
    oluacls_func(L, "update", _olua_fun_cocos2d_Node_update);
    oluacls_func(L, "updateDisplayedColor", _olua_fun_cocos2d_Node_updateDisplayedColor);
    oluacls_func(L, "updateDisplayedOpacity", _olua_fun_cocos2d_Node_updateDisplayedOpacity);
    oluacls_func(L, "updateOrderOfArrival", _olua_fun_cocos2d_Node_updateOrderOfArrival);
    oluacls_func(L, "updateTransform", _olua_fun_cocos2d_Node_updateTransform);
    oluacls_func(L, "visit", _olua_fun_cocos2d_Node_visit);
    oluacls_prop(L, "actionManager", _olua_fun_cocos2d_Node_getActionManager, _olua_fun_cocos2d_Node_setActionManager);
    oluacls_prop(L, "alpha", _olua_fun_cocos2d_Node_getAlpha, _olua_fun_cocos2d_Node_setAlpha);
    oluacls_prop(L, "anchorPoint", _olua_fun_cocos2d_Node_getAnchorPoint, _olua_fun_cocos2d_Node_setAnchorPoint);
    oluacls_prop(L, "anchorPointInPoints", _olua_fun_cocos2d_Node_getAnchorPointInPoints, nullptr);
    oluacls_prop(L, "anchorX", _olua_fun_cocos2d_Node_getAnchorX, _olua_fun_cocos2d_Node_setAnchorX);
    oluacls_prop(L, "anchorY", _olua_fun_cocos2d_Node_getAnchorY, _olua_fun_cocos2d_Node_setAnchorY);
    oluacls_prop(L, "attachedNodeCount", _olua_fun_cocos2d_Node_getAttachedNodeCount, nullptr);
    oluacls_prop(L, "boundingBox", _olua_fun_cocos2d_Node_getBoundingBox, nullptr);
    oluacls_prop(L, "cameraMask", _olua_fun_cocos2d_Node_getCameraMask, nullptr);
    oluacls_prop(L, "cascadeColorEnabled", _olua_fun_cocos2d_Node_isCascadeColorEnabled, _olua_fun_cocos2d_Node_setCascadeColorEnabled);
    oluacls_prop(L, "cascadeOpacityEnabled", _olua_fun_cocos2d_Node_isCascadeOpacityEnabled, _olua_fun_cocos2d_Node_setCascadeOpacityEnabled);
    oluacls_prop(L, "children", _olua_fun_cocos2d_Node_getChildren, nullptr);
    oluacls_prop(L, "childrenCount", _olua_fun_cocos2d_Node_getChildrenCount, nullptr);
    oluacls_prop(L, "color", _olua_fun_cocos2d_Node_getColor, _olua_fun_cocos2d_Node_setColor);
    oluacls_prop(L, "contentSize", _olua_fun_cocos2d_Node_getContentSize, _olua_fun_cocos2d_Node_setContentSize);
    oluacls_prop(L, "description", _olua_fun_cocos2d_Node_getDescription, nullptr);
    oluacls_prop(L, "displayedColor", _olua_fun_cocos2d_Node_getDisplayedColor, nullptr);
    oluacls_prop(L, "displayedOpacity", _olua_fun_cocos2d_Node_getDisplayedOpacity, nullptr);
    oluacls_prop(L, "eventDispatcher", _olua_fun_cocos2d_Node_getEventDispatcher, _olua_fun_cocos2d_Node_setEventDispatcher);
    oluacls_prop(L, "globalZOrder", _olua_fun_cocos2d_Node_getGlobalZOrder, _olua_fun_cocos2d_Node_setGlobalZOrder);
    oluacls_prop(L, "height", _olua_fun_cocos2d_Node_getHeight, _olua_fun_cocos2d_Node_setHeight);
    oluacls_prop(L, "ignoreAnchorPointForPosition", _olua_fun_cocos2d_Node_isIgnoreAnchorPointForPosition, _olua_fun_cocos2d_Node_setIgnoreAnchorPointForPosition);
    oluacls_prop(L, "localZOrder", _olua_fun_cocos2d_Node_getLocalZOrder, _olua_fun_cocos2d_Node_setLocalZOrder);
    oluacls_prop(L, "name", _olua_fun_cocos2d_Node_getName, _olua_fun_cocos2d_Node_setName);
    oluacls_prop(L, "nodeToWorldAffineTransform", _olua_fun_cocos2d_Node_getNodeToWorldAffineTransform, nullptr);
    oluacls_prop(L, "nodeToWorldTransform", _olua_fun_cocos2d_Node_getNodeToWorldTransform, nullptr);
    oluacls_prop(L, "normalizedPosition", _olua_fun_cocos2d_Node_getNormalizedPosition, _olua_fun_cocos2d_Node_setNormalizedPosition);
    oluacls_prop(L, "numberOfRunningActions", _olua_fun_cocos2d_Node_getNumberOfRunningActions, nullptr);
    oluacls_prop(L, "onEnterCallback", _olua_fun_cocos2d_Node_getOnEnterCallback, _olua_fun_cocos2d_Node_setOnEnterCallback);
    oluacls_prop(L, "onEnterTransitionDidFinishCallback", _olua_fun_cocos2d_Node_getOnEnterTransitionDidFinishCallback, _olua_fun_cocos2d_Node_setOnEnterTransitionDidFinishCallback);
    oluacls_prop(L, "onExitCallback", _olua_fun_cocos2d_Node_getOnExitCallback, _olua_fun_cocos2d_Node_setOnExitCallback);
    oluacls_prop(L, "onExitTransitionDidStartCallback", _olua_fun_cocos2d_Node_getOnExitTransitionDidStartCallback, _olua_fun_cocos2d_Node_setOnExitTransitionDidStartCallback);
    oluacls_prop(L, "opacity", _olua_fun_cocos2d_Node_getOpacity, _olua_fun_cocos2d_Node_setOpacity);
    oluacls_prop(L, "opacityModifyRGB", _olua_fun_cocos2d_Node_isOpacityModifyRGB, _olua_fun_cocos2d_Node_setOpacityModifyRGB);
    oluacls_prop(L, "parent", _olua_fun_cocos2d_Node_getParent, _olua_fun_cocos2d_Node_setParent);
    oluacls_prop(L, "parentToNodeAffineTransform", _olua_fun_cocos2d_Node_getParentToNodeAffineTransform, nullptr);
    oluacls_prop(L, "parentToNodeTransform", _olua_fun_cocos2d_Node_getParentToNodeTransform, nullptr);
#if CC_USE_PHYSICS
    oluacls_prop(L, "physicsBody", _olua_fun_cocos2d_Node_getPhysicsBody, _olua_fun_cocos2d_Node_setPhysicsBody);
#endif
    oluacls_prop(L, "position3D", _olua_fun_cocos2d_Node_getPosition3D, _olua_fun_cocos2d_Node_setPosition3D);
    oluacls_prop(L, "positionNormalized", _olua_fun_cocos2d_Node_getPositionNormalized, _olua_fun_cocos2d_Node_setPositionNormalized);
    oluacls_prop(L, "positionX", _olua_fun_cocos2d_Node_getPositionX, _olua_fun_cocos2d_Node_setPositionX);
    oluacls_prop(L, "positionY", _olua_fun_cocos2d_Node_getPositionY, _olua_fun_cocos2d_Node_setPositionY);
    oluacls_prop(L, "positionZ", _olua_fun_cocos2d_Node_getPositionZ, _olua_fun_cocos2d_Node_setPositionZ);
    oluacls_prop(L, "programState", _olua_fun_cocos2d_Node_getProgramState, _olua_fun_cocos2d_Node_setProgramState);
    oluacls_prop(L, "rotation", _olua_fun_cocos2d_Node_getRotation, _olua_fun_cocos2d_Node_setRotation);
    oluacls_prop(L, "rotation3D", _olua_fun_cocos2d_Node_getRotation3D, _olua_fun_cocos2d_Node_setRotation3D);
    oluacls_prop(L, "rotationQuat", _olua_fun_cocos2d_Node_getRotationQuat, _olua_fun_cocos2d_Node_setRotationQuat);
    oluacls_prop(L, "rotationSkewX", _olua_fun_cocos2d_Node_getRotationSkewX, _olua_fun_cocos2d_Node_setRotationSkewX);
    oluacls_prop(L, "rotationSkewY", _olua_fun_cocos2d_Node_getRotationSkewY, _olua_fun_cocos2d_Node_setRotationSkewY);
    oluacls_prop(L, "running", _olua_fun_cocos2d_Node_isRunning, nullptr);
    oluacls_prop(L, "scale", _olua_fun_cocos2d_Node_getScale, nullptr);
    oluacls_prop(L, "scaleX", _olua_fun_cocos2d_Node_getScaleX, _olua_fun_cocos2d_Node_setScaleX);
    oluacls_prop(L, "scaleY", _olua_fun_cocos2d_Node_getScaleY, _olua_fun_cocos2d_Node_setScaleY);
    oluacls_prop(L, "scaleZ", _olua_fun_cocos2d_Node_getScaleZ, _olua_fun_cocos2d_Node_setScaleZ);
    oluacls_prop(L, "scene", _olua_fun_cocos2d_Node_getScene, nullptr);
    oluacls_prop(L, "scheduler", _olua_fun_cocos2d_Node_getScheduler, _olua_fun_cocos2d_Node_setScheduler);
    oluacls_prop(L, "skewX", _olua_fun_cocos2d_Node_getSkewX, _olua_fun_cocos2d_Node_setSkewX);
    oluacls_prop(L, "skewY", _olua_fun_cocos2d_Node_getSkewY, _olua_fun_cocos2d_Node_setSkewY);
    oluacls_prop(L, "tag", _olua_fun_cocos2d_Node_getTag, _olua_fun_cocos2d_Node_setTag);
    oluacls_prop(L, "userData", _olua_fun_cocos2d_Node_getUserData, _olua_fun_cocos2d_Node_setUserData);
    oluacls_prop(L, "userObject", _olua_fun_cocos2d_Node_getUserObject, _olua_fun_cocos2d_Node_setUserObject);
    oluacls_prop(L, "visible", _olua_fun_cocos2d_Node_isVisible, _olua_fun_cocos2d_Node_setVisible);
    oluacls_prop(L, "width", _olua_fun_cocos2d_Node_getWidth, _olua_fun_cocos2d_Node_setWidth);
    oluacls_prop(L, "worldToNodeAffineTransform", _olua_fun_cocos2d_Node_getWorldToNodeAffineTransform, nullptr);
    oluacls_prop(L, "worldToNodeTransform", _olua_fun_cocos2d_Node_getWorldToNodeTransform, nullptr);
    oluacls_prop(L, "x", _olua_fun_cocos2d_Node_getPositionX, _olua_fun_cocos2d_Node_setPositionX);
    oluacls_prop(L, "y", _olua_fun_cocos2d_Node_getPositionY, _olua_fun_cocos2d_Node_setPositionY);
    oluacls_prop(L, "z", _olua_fun_cocos2d_Node_getPositionZ, _olua_fun_cocos2d_Node_setPositionZ);
    oluacls_const(L, "INVALID_TAG", cocos2d::Node::INVALID_TAG);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Node(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Node")) {
        luaL_error(L, "class not found: cocos2d::Node");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_BlendProtocol___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::BlendProtocol *)olua_toobj(L, 1, "cc.BlendProtocol");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_BlendProtocol_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BlendProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.BlendProtocol");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = self->getBlendFunc();
    int num_ret = olua_push_object(L, ret, "cc.BlendFunc");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_BlendProtocol_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BlendProtocol *self = nullptr;
    cocos2d::BlendFunc *arg1;       /** blendFunc */

    olua_to_object(L, 1, &self, "cc.BlendProtocol");
    olua_check_object(L, 2, &arg1, "cc.BlendFunc");

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_BlendProtocol(lua_State *L)
{
    oluacls_class<cocos2d::BlendProtocol>(L, "cc.BlendProtocol");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_BlendProtocol___gc);
    oluacls_func(L, "getBlendFunc", _olua_fun_cocos2d_BlendProtocol_getBlendFunc);
    oluacls_func(L, "setBlendFunc", _olua_fun_cocos2d_BlendProtocol_setBlendFunc);
    oluacls_prop(L, "blendFunc", _olua_fun_cocos2d_BlendProtocol_getBlendFunc, _olua_fun_cocos2d_BlendProtocol_setBlendFunc);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_BlendProtocol(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.BlendProtocol")) {
        luaL_error(L, "class not found: cocos2d::BlendProtocol");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TextureProtocol_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextureProtocol");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = self->getTexture();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextureProtocol_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextureProtocol *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.TextureProtocol");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_TextureProtocol(lua_State *L)
{
    oluacls_class<cocos2d::TextureProtocol, cocos2d::BlendProtocol>(L, "cc.TextureProtocol");
    oluacls_func(L, "getTexture", _olua_fun_cocos2d_TextureProtocol_getTexture);
    oluacls_func(L, "setTexture", _olua_fun_cocos2d_TextureProtocol_setTexture);
    oluacls_prop(L, "texture", _olua_fun_cocos2d_TextureProtocol_getTexture, _olua_fun_cocos2d_TextureProtocol_setTexture);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TextureProtocol(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TextureProtocol")) {
        luaL_error(L, "class not found: cocos2d::TextureProtocol");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_AtlasNode_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.AtlasNode");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.BlendProtocol")) {
            olua_pushobj_as<cocos2d::BlendProtocol>(L, 1, self, "as.cc.BlendProtocol");
            break;
        }
        if (olua_strequal(arg1, "cc.TextureProtocol")) {
            olua_pushobj_as<cocos2d::TextureProtocol>(L, 1, self, "as.cc.TextureProtocol");
            break;
        }

        luaL_error(L, "'cocos2d::AtlasNode' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_AtlasNode_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filename */
    int arg2 = 0;       /** tileWidth */
    int arg3 = 0;       /** tileHeight */
    int arg4 = 0;       /** itemsToRender */

    olua_check_string(L, 1, &arg1);
    olua_check_integer(L, 2, &arg2);
    olua_check_integer(L, 3, &arg3);
    olua_check_integer(L, 4, &arg4);

    // static cocos2d::AtlasNode *create(const std::string &filename, int tileWidth, int tileHeight, int itemsToRender)
    cocos2d::AtlasNode *ret = cocos2d::AtlasNode::create(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_object(L, ret, "cc.AtlasNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AtlasNode_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AtlasNode");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = self->getBlendFunc();
    int num_ret = olua_push_object(L, ret, "cc.BlendFunc");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AtlasNode_getQuadsToDraw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AtlasNode");

    // size_t getQuadsToDraw()
    size_t ret = self->getQuadsToDraw();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AtlasNode_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AtlasNode");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = self->getTexture();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AtlasNode_getTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AtlasNode");

    // cocos2d::TextureAtlas *getTextureAtlas()
    cocos2d::TextureAtlas *ret = self->getTextureAtlas();
    int num_ret = olua_push_object(L, ret, "cc.TextureAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AtlasNode_initWithTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    int arg2 = 0;       /** tileWidth */
    int arg3 = 0;       /** tileHeight */
    int arg4 = 0;       /** itemsToRender */

    olua_to_object(L, 1, &self, "cc.AtlasNode");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);

    // bool initWithTexture(cocos2d::Texture2D *texture, int tileWidth, int tileHeight, int itemsToRender)
    bool ret = self->initWithTexture(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AtlasNode_initWithTileFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    std::string arg1;       /** tile */
    int arg2 = 0;       /** tileWidth */
    int arg3 = 0;       /** tileHeight */
    int arg4 = 0;       /** itemsToRender */

    olua_to_object(L, 1, &self, "cc.AtlasNode");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);

    // bool initWithTileFile(const std::string &tile, int tileWidth, int tileHeight, int itemsToRender)
    bool ret = self->initWithTileFile(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AtlasNode_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::AtlasNode()
    cocos2d::AtlasNode *ret = new cocos2d::AtlasNode();
    int num_ret = olua_push_object(L, ret, "cc.AtlasNode");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AtlasNode_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    cocos2d::BlendFunc *arg1;       /** blendFunc */

    olua_to_object(L, 1, &self, "cc.AtlasNode");
    olua_check_object(L, 2, &arg1, "cc.BlendFunc");

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AtlasNode_setQuadsToDraw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    ssize_t arg1 = 0;       /** quadsToDraw */

    olua_to_object(L, 1, &self, "cc.AtlasNode");
    olua_check_integer(L, 2, &arg1);

    // void setQuadsToDraw(ssize_t quadsToDraw)
    self->setQuadsToDraw(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AtlasNode_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.AtlasNode");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AtlasNode_setTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;
    cocos2d::TextureAtlas *arg1 = nullptr;       /** textureAtlas */

    olua_to_object(L, 1, &self, "cc.AtlasNode");
    olua_check_object(L, 2, &arg1, "cc.TextureAtlas");

    // void setTextureAtlas(cocos2d::TextureAtlas *textureAtlas)
    self->setTextureAtlas(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AtlasNode_updateAtlasValues(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AtlasNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AtlasNode");

    // void updateAtlasValues()
    self->updateAtlasValues();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_AtlasNode(lua_State *L)
{
    oluacls_class<cocos2d::AtlasNode, cocos2d::Node>(L, "cc.AtlasNode");
    oluacls_func(L, "as", _olua_fun_cocos2d_AtlasNode_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_AtlasNode_create);
    oluacls_func(L, "getBlendFunc", _olua_fun_cocos2d_AtlasNode_getBlendFunc);
    oluacls_func(L, "getQuadsToDraw", _olua_fun_cocos2d_AtlasNode_getQuadsToDraw);
    oluacls_func(L, "getTexture", _olua_fun_cocos2d_AtlasNode_getTexture);
    oluacls_func(L, "getTextureAtlas", _olua_fun_cocos2d_AtlasNode_getTextureAtlas);
    oluacls_func(L, "initWithTexture", _olua_fun_cocos2d_AtlasNode_initWithTexture);
    oluacls_func(L, "initWithTileFile", _olua_fun_cocos2d_AtlasNode_initWithTileFile);
    oluacls_func(L, "new", _olua_fun_cocos2d_AtlasNode_new);
    oluacls_func(L, "setBlendFunc", _olua_fun_cocos2d_AtlasNode_setBlendFunc);
    oluacls_func(L, "setQuadsToDraw", _olua_fun_cocos2d_AtlasNode_setQuadsToDraw);
    oluacls_func(L, "setTexture", _olua_fun_cocos2d_AtlasNode_setTexture);
    oluacls_func(L, "setTextureAtlas", _olua_fun_cocos2d_AtlasNode_setTextureAtlas);
    oluacls_func(L, "updateAtlasValues", _olua_fun_cocos2d_AtlasNode_updateAtlasValues);
    oluacls_prop(L, "blendFunc", _olua_fun_cocos2d_AtlasNode_getBlendFunc, _olua_fun_cocos2d_AtlasNode_setBlendFunc);
    oluacls_prop(L, "quadsToDraw", _olua_fun_cocos2d_AtlasNode_getQuadsToDraw, _olua_fun_cocos2d_AtlasNode_setQuadsToDraw);
    oluacls_prop(L, "texture", _olua_fun_cocos2d_AtlasNode_getTexture, _olua_fun_cocos2d_AtlasNode_setTexture);
    oluacls_prop(L, "textureAtlas", _olua_fun_cocos2d_AtlasNode_getTextureAtlas, _olua_fun_cocos2d_AtlasNode_setTextureAtlas);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_AtlasNode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.AtlasNode")) {
        luaL_error(L, "class not found: cocos2d::AtlasNode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_sImageTGA___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::sImageTGA *)olua_toobj(L, 1, "cc.sImageTGA");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_flipped$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;

    olua_to_object(L, 1, &self, "cc.sImageTGA");

    // int flipped
    int ret = self->flipped;
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_sImageTGA_flipped$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;
    int arg1 = 0;       /** flipped */

    olua_to_object(L, 1, &self, "cc.sImageTGA");
    olua_check_integer(L, 2, &arg1);

    // int flipped
    self->flipped = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_flipped(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // int flipped
        return _olua_fun_cocos2d_sImageTGA_flipped$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.sImageTGA")) && (olua_is_integer(L, 2))) {
            // int flipped
            return _olua_fun_cocos2d_sImageTGA_flipped$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::sImageTGA::flipped' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_height$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;

    olua_to_object(L, 1, &self, "cc.sImageTGA");

    // short height
    short ret = self->height;
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_sImageTGA_height$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;
    short arg1 = 0;       /** height */

    olua_to_object(L, 1, &self, "cc.sImageTGA");
    olua_check_integer(L, 2, &arg1);

    // short height
    self->height = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_height(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // short height
        return _olua_fun_cocos2d_sImageTGA_height$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.sImageTGA")) && (olua_is_integer(L, 2))) {
            // short height
            return _olua_fun_cocos2d_sImageTGA_height$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::sImageTGA::height' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_imageData$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;

    olua_to_object(L, 1, &self, "cc.sImageTGA");

    // unsigned char *imageData
    unsigned char *ret = self->imageData;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_sImageTGA_imageData$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;
    unsigned char *arg1 = nullptr;       /** imageData */

    olua_to_object(L, 1, &self, "cc.sImageTGA");
    olua_check_string(L, 2, &arg1);

    // unsigned char *imageData
    self->imageData = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_imageData(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // unsigned char *imageData
        return _olua_fun_cocos2d_sImageTGA_imageData$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.sImageTGA")) && (olua_is_string(L, 2))) {
            // unsigned char *imageData
            return _olua_fun_cocos2d_sImageTGA_imageData$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::sImageTGA::imageData' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_pixelDepth$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;

    olua_to_object(L, 1, &self, "cc.sImageTGA");

    // unsigned char pixelDepth
    unsigned char ret = self->pixelDepth;
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_sImageTGA_pixelDepth$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;
    unsigned char arg1 = 0;       /** pixelDepth */

    olua_to_object(L, 1, &self, "cc.sImageTGA");
    olua_check_integer(L, 2, &arg1);

    // unsigned char pixelDepth
    self->pixelDepth = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_pixelDepth(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // unsigned char pixelDepth
        return _olua_fun_cocos2d_sImageTGA_pixelDepth$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.sImageTGA")) && (olua_is_integer(L, 2))) {
            // unsigned char pixelDepth
            return _olua_fun_cocos2d_sImageTGA_pixelDepth$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::sImageTGA::pixelDepth' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_status$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;

    olua_to_object(L, 1, &self, "cc.sImageTGA");

    // int status
    int ret = self->status;
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_sImageTGA_status$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;
    int arg1 = 0;       /** status */

    olua_to_object(L, 1, &self, "cc.sImageTGA");
    olua_check_integer(L, 2, &arg1);

    // int status
    self->status = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_status(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // int status
        return _olua_fun_cocos2d_sImageTGA_status$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.sImageTGA")) && (olua_is_integer(L, 2))) {
            // int status
            return _olua_fun_cocos2d_sImageTGA_status$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::sImageTGA::status' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_type$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;

    olua_to_object(L, 1, &self, "cc.sImageTGA");

    // unsigned char type
    unsigned char ret = self->type;
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_sImageTGA_type$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;
    unsigned char arg1 = 0;       /** type */

    olua_to_object(L, 1, &self, "cc.sImageTGA");
    olua_check_integer(L, 2, &arg1);

    // unsigned char type
    self->type = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_type(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // unsigned char type
        return _olua_fun_cocos2d_sImageTGA_type$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.sImageTGA")) && (olua_is_integer(L, 2))) {
            // unsigned char type
            return _olua_fun_cocos2d_sImageTGA_type$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::sImageTGA::type' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_width$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;

    olua_to_object(L, 1, &self, "cc.sImageTGA");

    // short width
    short ret = self->width;
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_sImageTGA_width$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::sImageTGA *self = nullptr;
    short arg1 = 0;       /** width */

    olua_to_object(L, 1, &self, "cc.sImageTGA");
    olua_check_integer(L, 2, &arg1);

    // short width
    self->width = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_sImageTGA_width(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // short width
        return _olua_fun_cocos2d_sImageTGA_width$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.sImageTGA")) && (olua_is_integer(L, 2))) {
            // short width
            return _olua_fun_cocos2d_sImageTGA_width$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::sImageTGA::width' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_sImageTGA(lua_State *L)
{
    oluacls_class<cocos2d::sImageTGA>(L, "cc.sImageTGA");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_sImageTGA___gc);
    oluacls_prop(L, "status", _olua_fun_cocos2d_sImageTGA_status, _olua_fun_cocos2d_sImageTGA_status);
    oluacls_prop(L, "type", _olua_fun_cocos2d_sImageTGA_type, _olua_fun_cocos2d_sImageTGA_type);
    oluacls_prop(L, "pixelDepth", _olua_fun_cocos2d_sImageTGA_pixelDepth, _olua_fun_cocos2d_sImageTGA_pixelDepth);
    oluacls_prop(L, "width", _olua_fun_cocos2d_sImageTGA_width, _olua_fun_cocos2d_sImageTGA_width);
    oluacls_prop(L, "height", _olua_fun_cocos2d_sImageTGA_height, _olua_fun_cocos2d_sImageTGA_height);
    oluacls_prop(L, "imageData", _olua_fun_cocos2d_sImageTGA_imageData, _olua_fun_cocos2d_sImageTGA_imageData);
    oluacls_prop(L, "flipped", _olua_fun_cocos2d_sImageTGA_flipped, _olua_fun_cocos2d_sImageTGA_flipped);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_sImageTGA(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.sImageTGA")) {
        luaL_error(L, "class not found: cocos2d::sImageTGA");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TileMapAtlas_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** tile */
    std::string arg2;       /** mapFile */
    int arg3 = 0;       /** tileWidth */
    int arg4 = 0;       /** tileHeight */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_integer(L, 3, &arg3);
    olua_check_integer(L, 4, &arg4);

    // static cocos2d::TileMapAtlas *create(const std::string &tile, const std::string &mapFile, int tileWidth, int tileHeight)
    cocos2d::TileMapAtlas *ret = cocos2d::TileMapAtlas::create(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_object(L, ret, "cc.TileMapAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TileMapAtlas_getTGAInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TileMapAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TileMapAtlas");

    // struct cocos2d::sImageTGA *getTGAInfo()
    struct cocos2d::sImageTGA *ret = self->getTGAInfo();
    int num_ret = olua_push_object(L, ret, "cc.sImageTGA");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TileMapAtlas_getTileAt(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TileMapAtlas *self = nullptr;
    cocos2d::Vec2 *arg1;       /** position */

    olua_to_object(L, 1, &self, "cc.TileMapAtlas");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // cocos2d::Color3B getTileAt(const cocos2d::Vec2 &position)
    cocos2d::Color3B ret = self->getTileAt(*arg1);
    int num_ret = olua_push_cocos2d_Color3B(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TileMapAtlas_initWithTileFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TileMapAtlas *self = nullptr;
    std::string arg1;       /** tile */
    std::string arg2;       /** mapFile */
    int arg3 = 0;       /** tileWidth */
    int arg4 = 0;       /** tileHeight */

    olua_to_object(L, 1, &self, "cc.TileMapAtlas");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);

    // bool initWithTileFile(const std::string &tile, const std::string &mapFile, int tileWidth, int tileHeight)
    bool ret = self->initWithTileFile(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TileMapAtlas_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TileMapAtlas()
    cocos2d::TileMapAtlas *ret = new cocos2d::TileMapAtlas();
    int num_ret = olua_push_object(L, ret, "cc.TileMapAtlas");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TileMapAtlas_releaseMap(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TileMapAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TileMapAtlas");

    // void releaseMap()
    self->releaseMap();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TileMapAtlas_setTGAInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TileMapAtlas *self = nullptr;
    struct cocos2d::sImageTGA *arg1 = nullptr;       /** TGAInfo */

    olua_to_object(L, 1, &self, "cc.TileMapAtlas");
    olua_check_object(L, 2, &arg1, "cc.sImageTGA");

    // void setTGAInfo(struct cocos2d::sImageTGA *TGAInfo)
    self->setTGAInfo(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TileMapAtlas_setTile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TileMapAtlas *self = nullptr;
    cocos2d::Color3B arg1;       /** tile */
    cocos2d::Vec2 *arg2;       /** position */

    olua_to_object(L, 1, &self, "cc.TileMapAtlas");
    olua_check_cocos2d_Color3B(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Vec2");

    // void setTile(const cocos2d::Color3B &tile, const cocos2d::Vec2 &position)
    self->setTile(arg1, *arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_TileMapAtlas(lua_State *L)
{
    oluacls_class<cocos2d::TileMapAtlas, cocos2d::AtlasNode>(L, "cc.TileMapAtlas");
    oluacls_func(L, "create", _olua_fun_cocos2d_TileMapAtlas_create);
    oluacls_func(L, "getTGAInfo", _olua_fun_cocos2d_TileMapAtlas_getTGAInfo);
    oluacls_func(L, "getTileAt", _olua_fun_cocos2d_TileMapAtlas_getTileAt);
    oluacls_func(L, "initWithTileFile", _olua_fun_cocos2d_TileMapAtlas_initWithTileFile);
    oluacls_func(L, "new", _olua_fun_cocos2d_TileMapAtlas_new);
    oluacls_func(L, "releaseMap", _olua_fun_cocos2d_TileMapAtlas_releaseMap);
    oluacls_func(L, "setTGAInfo", _olua_fun_cocos2d_TileMapAtlas_setTGAInfo);
    oluacls_func(L, "setTile", _olua_fun_cocos2d_TileMapAtlas_setTile);
    oluacls_prop(L, "tgaInfo", _olua_fun_cocos2d_TileMapAtlas_getTGAInfo, _olua_fun_cocos2d_TileMapAtlas_setTGAInfo);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TileMapAtlas(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TileMapAtlas")) {
        luaL_error(L, "class not found: cocos2d::TileMapAtlas");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ClippingNode_create$1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ClippingNode *create()
    cocos2d::ClippingNode *ret = cocos2d::ClippingNode::create();
    int num_ret = olua_push_object(L, ret, "cc.ClippingNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingNode_create$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Node *arg1 = nullptr;       /** stencil */

    olua_check_object(L, 1, &arg1, "cc.Node");

    // static cocos2d::ClippingNode *create(cocos2d::Node *stencil)
    cocos2d::ClippingNode *ret = cocos2d::ClippingNode::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ClippingNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingNode_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::ClippingNode *create()
        return _olua_fun_cocos2d_ClippingNode_create$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_object(L, 1, "cc.Node"))) {
            // static cocos2d::ClippingNode *create(cocos2d::Node *stencil)
            return _olua_fun_cocos2d_ClippingNode_create$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ClippingNode::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_ClippingNode_getAlphaThreshold(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ClippingNode");

    // float getAlphaThreshold()
    float ret = self->getAlphaThreshold();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingNode_getStencil(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ClippingNode");

    // cocos2d::Node *getStencil()
    cocos2d::Node *ret = self->getStencil();
    int num_ret = olua_push_object(L, ret, "cc.Node");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingNode_hasContent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ClippingNode");

    // bool hasContent()
    bool ret = self->hasContent();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingNode_init$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ClippingNode");

    // @using bool init()
    bool ret = self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingNode_init$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** stencil */

    olua_to_object(L, 1, &self, "cc.ClippingNode");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // bool init(cocos2d::Node *stencil)
    bool ret = self->init(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingNode_init(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // @using bool init()
        return _olua_fun_cocos2d_ClippingNode_init$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.ClippingNode")) && (olua_is_object(L, 2, "cc.Node"))) {
            // bool init(cocos2d::Node *stencil)
            return _olua_fun_cocos2d_ClippingNode_init$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ClippingNode::init' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_ClippingNode_isInverted(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ClippingNode");

    // bool isInverted()
    bool ret = self->isInverted();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingNode_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ClippingNode()
    cocos2d::ClippingNode *ret = new cocos2d::ClippingNode();
    int num_ret = olua_push_object(L, ret, "cc.ClippingNode");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingNode_setAlphaThreshold(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingNode *self = nullptr;
    float arg1 = 0;       /** alphaThreshold */

    olua_to_object(L, 1, &self, "cc.ClippingNode");
    olua_check_number(L, 2, &arg1);

    // void setAlphaThreshold(float alphaThreshold)
    self->setAlphaThreshold(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ClippingNode_setInverted(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingNode *self = nullptr;
    bool arg1 = false;       /** inverted */

    olua_to_object(L, 1, &self, "cc.ClippingNode");
    olua_check_bool(L, 2, &arg1);

    // void setInverted(bool inverted)
    self->setInverted(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ClippingNode_setStencil(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** stencil */

    olua_to_object(L, 1, &self, "cc.ClippingNode");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void setStencil(cocos2d::Node *stencil)
    self->setStencil(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_ClippingNode(lua_State *L)
{
    oluacls_class<cocos2d::ClippingNode, cocos2d::Node>(L, "cc.ClippingNode");
    oluacls_func(L, "create", _olua_fun_cocos2d_ClippingNode_create);
    oluacls_func(L, "getAlphaThreshold", _olua_fun_cocos2d_ClippingNode_getAlphaThreshold);
    oluacls_func(L, "getStencil", _olua_fun_cocos2d_ClippingNode_getStencil);
    oluacls_func(L, "hasContent", _olua_fun_cocos2d_ClippingNode_hasContent);
    oluacls_func(L, "init", _olua_fun_cocos2d_ClippingNode_init);
    oluacls_func(L, "isInverted", _olua_fun_cocos2d_ClippingNode_isInverted);
    oluacls_func(L, "new", _olua_fun_cocos2d_ClippingNode_new);
    oluacls_func(L, "setAlphaThreshold", _olua_fun_cocos2d_ClippingNode_setAlphaThreshold);
    oluacls_func(L, "setInverted", _olua_fun_cocos2d_ClippingNode_setInverted);
    oluacls_func(L, "setStencil", _olua_fun_cocos2d_ClippingNode_setStencil);
    oluacls_prop(L, "alphaThreshold", _olua_fun_cocos2d_ClippingNode_getAlphaThreshold, _olua_fun_cocos2d_ClippingNode_setAlphaThreshold);
    oluacls_prop(L, "inverted", _olua_fun_cocos2d_ClippingNode_isInverted, _olua_fun_cocos2d_ClippingNode_setInverted);
    oluacls_prop(L, "stencil", _olua_fun_cocos2d_ClippingNode_getStencil, _olua_fun_cocos2d_ClippingNode_setStencil);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ClippingNode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ClippingNode")) {
        luaL_error(L, "class not found: cocos2d::ClippingNode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_MotionStreak_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.MotionStreak");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.BlendProtocol")) {
            olua_pushobj_as<cocos2d::BlendProtocol>(L, 1, self, "as.cc.BlendProtocol");
            break;
        }
        if (olua_strequal(arg1, "cc.TextureProtocol")) {
            olua_pushobj_as<cocos2d::TextureProtocol>(L, 1, self, "as.cc.TextureProtocol");
            break;
        }

        luaL_error(L, "'cocos2d::MotionStreak' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_MotionStreak_create$1(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** timeToFade */
    float arg2 = 0;       /** minSeg */
    float arg3 = 0;       /** strokeWidth */
    cocos2d::Color3B arg4;       /** strokeColor */
    std::string arg5;       /** imagePath */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_cocos2d_Color3B(L, 4, &arg4);
    olua_check_string(L, 5, &arg5);

    // static cocos2d::MotionStreak *create(float timeToFade, float minSeg, float strokeWidth, const cocos2d::Color3B &strokeColor, const std::string &imagePath)
    cocos2d::MotionStreak *ret = cocos2d::MotionStreak::create(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_object(L, ret, "cc.MotionStreak");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_MotionStreak_create$2(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** timeToFade */
    float arg2 = 0;       /** minSeg */
    float arg3 = 0;       /** strokeWidth */
    cocos2d::Color3B arg4;       /** strokeColor */
    cocos2d::Texture2D *arg5 = nullptr;       /** texture */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_cocos2d_Color3B(L, 4, &arg4);
    olua_check_object(L, 5, &arg5, "cc.Texture2D");

    // static cocos2d::MotionStreak *create(float timeToFade, float minSeg, float strokeWidth, const cocos2d::Color3B &strokeColor, cocos2d::Texture2D *texture)
    cocos2d::MotionStreak *ret = cocos2d::MotionStreak::create(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_object(L, ret, "cc.MotionStreak");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_MotionStreak_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 5) {
        if ((olua_is_number(L, 1)) && (olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_cocos2d_Color3B(L, 4)) && (olua_is_string(L, 5))) {
            // static cocos2d::MotionStreak *create(float timeToFade, float minSeg, float strokeWidth, const cocos2d::Color3B &strokeColor, const std::string &imagePath)
            return _olua_fun_cocos2d_MotionStreak_create$1(L);
        }

        // if ((olua_is_number(L, 1)) && (olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_cocos2d_Color3B(L, 4)) && (olua_is_object(L, 5, "cc.Texture2D"))) {
            // static cocos2d::MotionStreak *create(float timeToFade, float minSeg, float strokeWidth, const cocos2d::Color3B &strokeColor, cocos2d::Texture2D *texture)
            return _olua_fun_cocos2d_MotionStreak_create$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::MotionStreak::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_MotionStreak_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;

    olua_to_object(L, 1, &self, "cc.MotionStreak");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = self->getBlendFunc();
    int num_ret = olua_push_object(L, ret, "cc.BlendFunc");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_MotionStreak_getStroke(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;

    olua_to_object(L, 1, &self, "cc.MotionStreak");

    // float getStroke()
    float ret = self->getStroke();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_MotionStreak_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;

    olua_to_object(L, 1, &self, "cc.MotionStreak");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = self->getTexture();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_MotionStreak_initWithFade$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;
    float arg1 = 0;       /** fade */
    float arg2 = 0;       /** minSeg */
    float arg3 = 0;       /** stroke */
    cocos2d::Color3B arg4;       /** color */
    std::string arg5;       /** path */

    olua_to_object(L, 1, &self, "cc.MotionStreak");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_cocos2d_Color3B(L, 5, &arg4);
    olua_check_string(L, 6, &arg5);

    // bool initWithFade(float fade, float minSeg, float stroke, const cocos2d::Color3B &color, const std::string &path)
    bool ret = self->initWithFade(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_MotionStreak_initWithFade$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;
    float arg1 = 0;       /** fade */
    float arg2 = 0;       /** minSeg */
    float arg3 = 0;       /** stroke */
    cocos2d::Color3B arg4;       /** color */
    cocos2d::Texture2D *arg5 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.MotionStreak");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_cocos2d_Color3B(L, 5, &arg4);
    olua_check_object(L, 6, &arg5, "cc.Texture2D");

    // bool initWithFade(float fade, float minSeg, float stroke, const cocos2d::Color3B &color, cocos2d::Texture2D *texture)
    bool ret = self->initWithFade(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_MotionStreak_initWithFade(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 6) {
        if ((olua_is_object(L, 1, "cc.MotionStreak")) && (olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_cocos2d_Color3B(L, 5)) && (olua_is_string(L, 6))) {
            // bool initWithFade(float fade, float minSeg, float stroke, const cocos2d::Color3B &color, const std::string &path)
            return _olua_fun_cocos2d_MotionStreak_initWithFade$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.MotionStreak")) && (olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_cocos2d_Color3B(L, 5)) && (olua_is_object(L, 6, "cc.Texture2D"))) {
            // bool initWithFade(float fade, float minSeg, float stroke, const cocos2d::Color3B &color, cocos2d::Texture2D *texture)
            return _olua_fun_cocos2d_MotionStreak_initWithFade$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::MotionStreak::initWithFade' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_MotionStreak_isFastMode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;

    olua_to_object(L, 1, &self, "cc.MotionStreak");

    // bool isFastMode()
    bool ret = self->isFastMode();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_MotionStreak_isStartingPositionInitialized(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;

    olua_to_object(L, 1, &self, "cc.MotionStreak");

    // bool isStartingPositionInitialized()
    bool ret = self->isStartingPositionInitialized();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_MotionStreak_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::MotionStreak()
    cocos2d::MotionStreak *ret = new cocos2d::MotionStreak();
    int num_ret = olua_push_object(L, ret, "cc.MotionStreak");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_MotionStreak_reset(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;

    olua_to_object(L, 1, &self, "cc.MotionStreak");

    // void reset()
    self->reset();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_MotionStreak_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;
    cocos2d::BlendFunc *arg1;       /** blendFunc */

    olua_to_object(L, 1, &self, "cc.MotionStreak");
    olua_check_object(L, 2, &arg1, "cc.BlendFunc");

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_MotionStreak_setFastMode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;
    bool arg1 = false;       /** bFastMode */

    olua_to_object(L, 1, &self, "cc.MotionStreak");
    olua_check_bool(L, 2, &arg1);

    // void setFastMode(bool bFastMode)
    self->setFastMode(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_MotionStreak_setStartingPositionInitialized(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;
    bool arg1 = false;       /** bStartingPositionInitialized */

    olua_to_object(L, 1, &self, "cc.MotionStreak");
    olua_check_bool(L, 2, &arg1);

    // void setStartingPositionInitialized(bool bStartingPositionInitialized)
    self->setStartingPositionInitialized(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_MotionStreak_setStroke(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;
    float arg1 = 0;       /** stroke */

    olua_to_object(L, 1, &self, "cc.MotionStreak");
    olua_check_number(L, 2, &arg1);

    // void setStroke(float stroke)
    self->setStroke(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_MotionStreak_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.MotionStreak");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_MotionStreak_tintWithColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::MotionStreak *self = nullptr;
    cocos2d::Color3B arg1;       /** colors */

    olua_to_object(L, 1, &self, "cc.MotionStreak");
    olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void tintWithColor(const cocos2d::Color3B &colors)
    self->tintWithColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_MotionStreak(lua_State *L)
{
    oluacls_class<cocos2d::MotionStreak, cocos2d::Node>(L, "cc.MotionStreak");
    oluacls_func(L, "as", _olua_fun_cocos2d_MotionStreak_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_MotionStreak_create);
    oluacls_func(L, "getBlendFunc", _olua_fun_cocos2d_MotionStreak_getBlendFunc);
    oluacls_func(L, "getStroke", _olua_fun_cocos2d_MotionStreak_getStroke);
    oluacls_func(L, "getTexture", _olua_fun_cocos2d_MotionStreak_getTexture);
    oluacls_func(L, "initWithFade", _olua_fun_cocos2d_MotionStreak_initWithFade);
    oluacls_func(L, "isFastMode", _olua_fun_cocos2d_MotionStreak_isFastMode);
    oluacls_func(L, "isStartingPositionInitialized", _olua_fun_cocos2d_MotionStreak_isStartingPositionInitialized);
    oluacls_func(L, "new", _olua_fun_cocos2d_MotionStreak_new);
    oluacls_func(L, "reset", _olua_fun_cocos2d_MotionStreak_reset);
    oluacls_func(L, "setBlendFunc", _olua_fun_cocos2d_MotionStreak_setBlendFunc);
    oluacls_func(L, "setFastMode", _olua_fun_cocos2d_MotionStreak_setFastMode);
    oluacls_func(L, "setStartingPositionInitialized", _olua_fun_cocos2d_MotionStreak_setStartingPositionInitialized);
    oluacls_func(L, "setStroke", _olua_fun_cocos2d_MotionStreak_setStroke);
    oluacls_func(L, "setTexture", _olua_fun_cocos2d_MotionStreak_setTexture);
    oluacls_func(L, "tintWithColor", _olua_fun_cocos2d_MotionStreak_tintWithColor);
    oluacls_prop(L, "blendFunc", _olua_fun_cocos2d_MotionStreak_getBlendFunc, _olua_fun_cocos2d_MotionStreak_setBlendFunc);
    oluacls_prop(L, "fastMode", _olua_fun_cocos2d_MotionStreak_isFastMode, _olua_fun_cocos2d_MotionStreak_setFastMode);
    oluacls_prop(L, "startingPositionInitialized", _olua_fun_cocos2d_MotionStreak_isStartingPositionInitialized, _olua_fun_cocos2d_MotionStreak_setStartingPositionInitialized);
    oluacls_prop(L, "stroke", _olua_fun_cocos2d_MotionStreak_getStroke, _olua_fun_cocos2d_MotionStreak_setStroke);
    oluacls_prop(L, "texture", _olua_fun_cocos2d_MotionStreak_getTexture, _olua_fun_cocos2d_MotionStreak_setTexture);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_MotionStreak(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.MotionStreak")) {
        luaL_error(L, "class not found: cocos2d::MotionStreak");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ProtectedNode_addProtectedChild$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */

    olua_to_object(L, 1, &self, "cc.ProtectedNode");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void addProtectedChild(@addref(protectedChildren |) cocos2d::Node *child)
    self->addProtectedChild(arg1);

    // insert code after call
    olua_addref(L, 1, "protectedChildren", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_addProtectedChild$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    int arg2 = 0;       /** localZOrder */

    olua_to_object(L, 1, &self, "cc.ProtectedNode");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_integer(L, 3, &arg2);

    // void addProtectedChild(@addref(protectedChildren |) cocos2d::Node *child, int localZOrder)
    self->addProtectedChild(arg1, arg2);

    // insert code after call
    olua_addref(L, 1, "protectedChildren", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_addProtectedChild$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    int arg2 = 0;       /** localZOrder */
    int arg3 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.ProtectedNode");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // void addProtectedChild(@addref(protectedChildren |) cocos2d::Node *child, int localZOrder, int tag)
    self->addProtectedChild(arg1, arg2, arg3);

    // insert code after call
    olua_addref(L, 1, "protectedChildren", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_addProtectedChild(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.ProtectedNode")) && (olua_is_object(L, 2, "cc.Node"))) {
            // void addProtectedChild(@addref(protectedChildren |) cocos2d::Node *child)
            return _olua_fun_cocos2d_ProtectedNode_addProtectedChild$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.ProtectedNode")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_integer(L, 3))) {
            // void addProtectedChild(@addref(protectedChildren |) cocos2d::Node *child, int localZOrder)
            return _olua_fun_cocos2d_ProtectedNode_addProtectedChild$2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.ProtectedNode")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4))) {
            // void addProtectedChild(@addref(protectedChildren |) cocos2d::Node *child, int localZOrder, int tag)
            return _olua_fun_cocos2d_ProtectedNode_addProtectedChild$3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ProtectedNode::addProtectedChild' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ProtectedNode *create()
    cocos2d::ProtectedNode *ret = cocos2d::ProtectedNode::create();
    int num_ret = olua_push_object(L, ret, "cc.ProtectedNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ProtectedNode_disableCascadeColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ProtectedNode");

    // void disableCascadeColor()
    self->disableCascadeColor();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_disableCascadeOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ProtectedNode");

    // void disableCascadeOpacity()
    self->disableCascadeOpacity();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_getProtectedChildByTag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    int arg1 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.ProtectedNode");
    olua_check_integer(L, 2, &arg1);

    // @addref(protectedChildren |) cocos2d::Node *getProtectedChildByTag(int tag)
    cocos2d::Node *ret = self->getProtectedChildByTag(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Node");

    // insert code after call
    olua_addref(L, 1, "protectedChildren", -1, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ProtectedNode_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ProtectedNode()
    cocos2d::ProtectedNode *ret = new cocos2d::ProtectedNode();
    int num_ret = olua_push_object(L, ret, "cc.ProtectedNode");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ProtectedNode_removeAllProtectedChildren(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ProtectedNode");

    // @delref(protectedChildren *) void removeAllProtectedChildren()
    self->removeAllProtectedChildren();

    // insert code after call
    olua_delallrefs(L, 1, "protectedChildren");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_removeAllProtectedChildrenWithCleanup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    bool arg1 = false;       /** cleanup */

    olua_to_object(L, 1, &self, "cc.ProtectedNode");
    olua_check_bool(L, 2, &arg1);

    // @delref(protectedChildren *) void removeAllProtectedChildrenWithCleanup(bool cleanup)
    self->removeAllProtectedChildrenWithCleanup(arg1);

    // insert code after call
    olua_delallrefs(L, 1, "protectedChildren");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_removeProtectedChild$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    bool arg2 = false;       /** cleanup */

    olua_to_object(L, 1, &self, "cc.ProtectedNode");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_bool(L, 3, &arg2);

    // void removeProtectedChild(@delref(protectedChildren |) cocos2d::Node *child, @optional bool cleanup)
    self->removeProtectedChild(arg1, arg2);

    // insert code after call
    olua_delref(L, 1, "protectedChildren", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_removeProtectedChild$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */

    olua_to_object(L, 1, &self, "cc.ProtectedNode");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // void removeProtectedChild(@delref(protectedChildren |) cocos2d::Node *child)
    self->removeProtectedChild(arg1);

    // insert code after call
    olua_delref(L, 1, "protectedChildren", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_removeProtectedChild(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.ProtectedNode")) && (olua_is_object(L, 2, "cc.Node"))) {
            // void removeProtectedChild(@delref(protectedChildren |) cocos2d::Node *child)
            return _olua_fun_cocos2d_ProtectedNode_removeProtectedChild$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.ProtectedNode")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_bool(L, 3))) {
            // void removeProtectedChild(@delref(protectedChildren |) cocos2d::Node *child, @optional bool cleanup)
            return _olua_fun_cocos2d_ProtectedNode_removeProtectedChild$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ProtectedNode::removeProtectedChild' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_removeProtectedChildByTag$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    int arg1 = 0;       /** tag */
    bool arg2 = false;       /** cleanup */

    olua_to_object(L, 1, &self, "cc.ProtectedNode");
    olua_check_integer(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // insert code before call
    olua_startcmpref(L, 1, "protectedChildren");

    // @delref(protectedChildren ~) void removeProtectedChildByTag(int tag, @optional bool cleanup)
    self->removeProtectedChildByTag(arg1, arg2);

    // insert code after call
    olua_endcmpref(L, 1, "protectedChildren");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_removeProtectedChildByTag$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    int arg1 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.ProtectedNode");
    olua_check_integer(L, 2, &arg1);

    // insert code before call
    olua_startcmpref(L, 1, "protectedChildren");

    // @delref(protectedChildren ~) void removeProtectedChildByTag(int tag)
    self->removeProtectedChildByTag(arg1);

    // insert code after call
    olua_endcmpref(L, 1, "protectedChildren");

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_removeProtectedChildByTag(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.ProtectedNode")) && (olua_is_integer(L, 2))) {
            // @delref(protectedChildren ~) void removeProtectedChildByTag(int tag)
            return _olua_fun_cocos2d_ProtectedNode_removeProtectedChildByTag$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.ProtectedNode")) && (olua_is_integer(L, 2)) && (olua_is_bool(L, 3))) {
            // @delref(protectedChildren ~) void removeProtectedChildByTag(int tag, @optional bool cleanup)
            return _olua_fun_cocos2d_ProtectedNode_removeProtectedChildByTag$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ProtectedNode::removeProtectedChildByTag' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_reorderProtectedChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    int arg2 = 0;       /** localZOrder */

    olua_to_object(L, 1, &self, "cc.ProtectedNode");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_integer(L, 3, &arg2);

    // void reorderProtectedChild(cocos2d::Node *child, int localZOrder)
    self->reorderProtectedChild(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProtectedNode_sortAllProtectedChildren(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProtectedNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ProtectedNode");

    // void sortAllProtectedChildren()
    self->sortAllProtectedChildren();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_ProtectedNode(lua_State *L)
{
    oluacls_class<cocos2d::ProtectedNode, cocos2d::Node>(L, "cc.ProtectedNode");
    oluacls_func(L, "addProtectedChild", _olua_fun_cocos2d_ProtectedNode_addProtectedChild);
    oluacls_func(L, "create", _olua_fun_cocos2d_ProtectedNode_create);
    oluacls_func(L, "disableCascadeColor", _olua_fun_cocos2d_ProtectedNode_disableCascadeColor);
    oluacls_func(L, "disableCascadeOpacity", _olua_fun_cocos2d_ProtectedNode_disableCascadeOpacity);
    oluacls_func(L, "getProtectedChildByTag", _olua_fun_cocos2d_ProtectedNode_getProtectedChildByTag);
    oluacls_func(L, "new", _olua_fun_cocos2d_ProtectedNode_new);
    oluacls_func(L, "removeAllProtectedChildren", _olua_fun_cocos2d_ProtectedNode_removeAllProtectedChildren);
    oluacls_func(L, "removeAllProtectedChildrenWithCleanup", _olua_fun_cocos2d_ProtectedNode_removeAllProtectedChildrenWithCleanup);
    oluacls_func(L, "removeProtectedChild", _olua_fun_cocos2d_ProtectedNode_removeProtectedChild);
    oluacls_func(L, "removeProtectedChildByTag", _olua_fun_cocos2d_ProtectedNode_removeProtectedChildByTag);
    oluacls_func(L, "reorderProtectedChild", _olua_fun_cocos2d_ProtectedNode_reorderProtectedChild);
    oluacls_func(L, "sortAllProtectedChildren", _olua_fun_cocos2d_ProtectedNode_sortAllProtectedChildren);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ProtectedNode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ProtectedNode")) {
        luaL_error(L, "class not found: cocos2d::ProtectedNode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_DrawNode_clear(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.DrawNode");

    // void clear()
    self->clear();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_create$1(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** defaultLineWidth */

    olua_check_number(L, 1, &arg1);

    // static cocos2d::DrawNode *create(@optional float defaultLineWidth)
    cocos2d::DrawNode *ret = cocos2d::DrawNode::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.DrawNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_DrawNode_create$2(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::DrawNode *create()
    cocos2d::DrawNode *ret = cocos2d::DrawNode::create();
    int num_ret = olua_push_object(L, ret, "cc.DrawNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_DrawNode_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::DrawNode *create()
        return _olua_fun_cocos2d_DrawNode_create$2(L);
    }

    if (num_args == 1) {
        // if ((olua_is_number(L, 1))) {
            // static cocos2d::DrawNode *create(@optional float defaultLineWidth)
            return _olua_fun_cocos2d_DrawNode_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::DrawNode::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawCardinalSpline(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::PointArray *arg1 = nullptr;       /** config */
    float arg2 = 0;       /** tension */
    unsigned int arg3 = 0;       /** segments */
    cocos2d::Color4F arg4;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.PointArray");
    olua_check_number(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);
    olua_check_cocos2d_Color4F(L, 5, &arg4);

    // void drawCardinalSpline(cocos2d::PointArray *config, float tension, unsigned int segments, const cocos2d::Color4F &color)
    self->drawCardinalSpline(arg1, arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawCatmullRom(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::PointArray *arg1 = nullptr;       /** points */
    unsigned int arg2 = 0;       /** segments */
    cocos2d::Color4F arg3;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.PointArray");
    olua_check_integer(L, 3, &arg2);
    olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawCatmullRom(cocos2d::PointArray *points, unsigned int segments, const cocos2d::Color4F &color)
    self->drawCatmullRom(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawCircle$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** center */
    float arg2 = 0;       /** radius */
    float arg3 = 0;       /** angle */
    unsigned int arg4 = 0;       /** segments */
    bool arg5 = false;       /** drawLineToCenter */
    float arg6 = 0;       /** scaleX */
    float arg7 = 0;       /** scaleY */
    cocos2d::Color4F arg8;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_bool(L, 6, &arg5);
    olua_check_number(L, 7, &arg6);
    olua_check_number(L, 8, &arg7);
    olua_check_cocos2d_Color4F(L, 9, &arg8);

    // void drawCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY, const cocos2d::Color4F &color)
    self->drawCircle(*arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawCircle$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** center */
    float arg2 = 0;       /** radius */
    float arg3 = 0;       /** angle */
    unsigned int arg4 = 0;       /** segments */
    bool arg5 = false;       /** drawLineToCenter */
    cocos2d::Color4F arg6;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_bool(L, 6, &arg5);
    olua_check_cocos2d_Color4F(L, 7, &arg6);

    // void drawCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, bool drawLineToCenter, const cocos2d::Color4F &color)
    self->drawCircle(*arg1, arg2, arg3, arg4, arg5, arg6);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawCircle(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 7) {
        // if ((olua_is_object(L, 1, "cc.DrawNode")) && (olua_is_object(L, 2, "cc.Vec2")) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_integer(L, 5)) && (olua_is_bool(L, 6)) && (olua_is_cocos2d_Color4F(L, 7))) {
            // void drawCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, bool drawLineToCenter, const cocos2d::Color4F &color)
            return _olua_fun_cocos2d_DrawNode_drawCircle$2(L);
        // }
    }

    if (num_args == 9) {
        // if ((olua_is_object(L, 1, "cc.DrawNode")) && (olua_is_object(L, 2, "cc.Vec2")) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_integer(L, 5)) && (olua_is_bool(L, 6)) && (olua_is_number(L, 7)) && (olua_is_number(L, 8)) && (olua_is_cocos2d_Color4F(L, 9))) {
            // void drawCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY, const cocos2d::Color4F &color)
            return _olua_fun_cocos2d_DrawNode_drawCircle$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::DrawNode::drawCircle' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawCubicBezier(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** origin */
    cocos2d::Vec2 *arg2;       /** control1 */
    cocos2d::Vec2 *arg3;       /** control2 */
    cocos2d::Vec2 *arg4;       /** destination */
    unsigned int arg5 = 0;       /** segments */
    cocos2d::Color4F arg6;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_object(L, 3, &arg2, "cc.Vec2");
    olua_check_object(L, 4, &arg3, "cc.Vec2");
    olua_check_object(L, 5, &arg4, "cc.Vec2");
    olua_check_integer(L, 6, &arg5);
    olua_check_cocos2d_Color4F(L, 7, &arg6);

    // void drawCubicBezier(const cocos2d::Vec2 &origin, const cocos2d::Vec2 &control1, const cocos2d::Vec2 &control2, const cocos2d::Vec2 &destination, unsigned int segments, const cocos2d::Color4F &color)
    self->drawCubicBezier(*arg1, *arg2, *arg3, *arg4, arg5, arg6);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawDot(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** pos */
    float arg2 = 0;       /** radius */
    cocos2d::Color4F arg3;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_number(L, 3, &arg2);
    olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawDot(const cocos2d::Vec2 &pos, float radius, const cocos2d::Color4F &color)
    self->drawDot(*arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawLine(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** origin */
    cocos2d::Vec2 *arg2;       /** destination */
    cocos2d::Color4F arg3;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_object(L, 3, &arg2, "cc.Vec2");
    olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawLine(const cocos2d::Vec2 &origin, const cocos2d::Vec2 &destination, const cocos2d::Color4F &color)
    self->drawLine(*arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** point */
    float arg2 = 0;       /** pointSize */
    cocos2d::Color4F arg3;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_number(L, 3, &arg2);
    olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawPoint(const cocos2d::Vec2 &point, const float pointSize, const cocos2d::Color4F &color)
    self->drawPoint(*arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawPoints$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1 = nullptr;       /** position */
    unsigned int arg2 = 0;       /** numberOfPoints */
    cocos2d::Color4F arg3;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_integer(L, 3, &arg2);
    olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawPoints(const cocos2d::Vec2 *position, unsigned int numberOfPoints, const cocos2d::Color4F &color)
    self->drawPoints(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawPoints$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1 = nullptr;       /** position */
    unsigned int arg2 = 0;       /** numberOfPoints */
    float arg3 = 0;       /** pointSize */
    cocos2d::Color4F arg4;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_integer(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_cocos2d_Color4F(L, 5, &arg4);

    // void drawPoints(const cocos2d::Vec2 *position, unsigned int numberOfPoints, const float pointSize, const cocos2d::Color4F &color)
    self->drawPoints(arg1, arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawPoints(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.DrawNode")) && (olua_is_object(L, 2, "cc.Vec2")) && (olua_is_integer(L, 3)) && (olua_is_cocos2d_Color4F(L, 4))) {
            // void drawPoints(const cocos2d::Vec2 *position, unsigned int numberOfPoints, const cocos2d::Color4F &color)
            return _olua_fun_cocos2d_DrawNode_drawPoints$1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_object(L, 1, "cc.DrawNode")) && (olua_is_object(L, 2, "cc.Vec2")) && (olua_is_integer(L, 3)) && (olua_is_number(L, 4)) && (olua_is_cocos2d_Color4F(L, 5))) {
            // void drawPoints(const cocos2d::Vec2 *position, unsigned int numberOfPoints, const float pointSize, const cocos2d::Color4F &color)
            return _olua_fun_cocos2d_DrawNode_drawPoints$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::DrawNode::drawPoints' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawPoly(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1 = nullptr;       /** poli */
    unsigned int arg2 = 0;       /** numberOfPoints */
    bool arg3 = false;       /** closePolygon */
    cocos2d::Color4F arg4;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_integer(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);
    olua_check_cocos2d_Color4F(L, 5, &arg4);

    // void drawPoly(const cocos2d::Vec2 *poli, unsigned int numberOfPoints, bool closePolygon, const cocos2d::Color4F &color)
    self->drawPoly(arg1, arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawPolygon(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1 = nullptr;       /** verts */
    int arg2 = 0;       /** count */
    cocos2d::Color4F arg3;       /** fillColor */
    float arg4 = 0;       /** borderWidth */
    cocos2d::Color4F arg5;       /** borderColor */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_integer(L, 3, &arg2);
    olua_check_cocos2d_Color4F(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_cocos2d_Color4F(L, 6, &arg5);

    // void drawPolygon(const cocos2d::Vec2 *verts, int count, const cocos2d::Color4F &fillColor, float borderWidth, const cocos2d::Color4F &borderColor)
    self->drawPolygon(arg1, arg2, arg3, arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawQuadBezier(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** origin */
    cocos2d::Vec2 *arg2;       /** control */
    cocos2d::Vec2 *arg3;       /** destination */
    unsigned int arg4 = 0;       /** segments */
    cocos2d::Color4F arg5;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_object(L, 3, &arg2, "cc.Vec2");
    olua_check_object(L, 4, &arg3, "cc.Vec2");
    olua_check_integer(L, 5, &arg4);
    olua_check_cocos2d_Color4F(L, 6, &arg5);

    // void drawQuadBezier(const cocos2d::Vec2 &origin, const cocos2d::Vec2 &control, const cocos2d::Vec2 &destination, unsigned int segments, const cocos2d::Color4F &color)
    self->drawQuadBezier(*arg1, *arg2, *arg3, arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawRect$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** origin */
    cocos2d::Vec2 *arg2;       /** destination */
    cocos2d::Color4F arg3;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_object(L, 3, &arg2, "cc.Vec2");
    olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawRect(const cocos2d::Vec2 &origin, const cocos2d::Vec2 &destination, const cocos2d::Color4F &color)
    self->drawRect(*arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawRect$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** p1 */
    cocos2d::Vec2 *arg2;       /** p2 */
    cocos2d::Vec2 *arg3;       /** p3 */
    cocos2d::Vec2 *arg4;       /** p4 */
    cocos2d::Color4F arg5;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_object(L, 3, &arg2, "cc.Vec2");
    olua_check_object(L, 4, &arg3, "cc.Vec2");
    olua_check_object(L, 5, &arg4, "cc.Vec2");
    olua_check_cocos2d_Color4F(L, 6, &arg5);

    // void drawRect(const cocos2d::Vec2 &p1, const cocos2d::Vec2 &p2, const cocos2d::Vec2 &p3, const cocos2d::Vec2 &p4, const cocos2d::Color4F &color)
    self->drawRect(*arg1, *arg2, *arg3, *arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawRect(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.DrawNode")) && (olua_is_object(L, 2, "cc.Vec2")) && (olua_is_object(L, 3, "cc.Vec2")) && (olua_is_cocos2d_Color4F(L, 4))) {
            // void drawRect(const cocos2d::Vec2 &origin, const cocos2d::Vec2 &destination, const cocos2d::Color4F &color)
            return _olua_fun_cocos2d_DrawNode_drawRect$1(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.DrawNode")) && (olua_is_object(L, 2, "cc.Vec2")) && (olua_is_object(L, 3, "cc.Vec2")) && (olua_is_object(L, 4, "cc.Vec2")) && (olua_is_object(L, 5, "cc.Vec2")) && (olua_is_cocos2d_Color4F(L, 6))) {
            // void drawRect(const cocos2d::Vec2 &p1, const cocos2d::Vec2 &p2, const cocos2d::Vec2 &p3, const cocos2d::Vec2 &p4, const cocos2d::Color4F &color)
            return _olua_fun_cocos2d_DrawNode_drawRect$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::DrawNode::drawRect' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawSegment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** from */
    cocos2d::Vec2 *arg2;       /** to */
    float arg3 = 0;       /** radius */
    cocos2d::Color4F arg4;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_object(L, 3, &arg2, "cc.Vec2");
    olua_check_number(L, 4, &arg3);
    olua_check_cocos2d_Color4F(L, 5, &arg4);

    // void drawSegment(const cocos2d::Vec2 &from, const cocos2d::Vec2 &to, float radius, const cocos2d::Color4F &color)
    self->drawSegment(*arg1, *arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawSolidCircle$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** center */
    float arg2 = 0;       /** radius */
    float arg3 = 0;       /** angle */
    unsigned int arg4 = 0;       /** segments */
    float arg5 = 0;       /** scaleX */
    float arg6 = 0;       /** scaleY */
    cocos2d::Color4F arg7;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);
    olua_check_number(L, 7, &arg6);
    olua_check_cocos2d_Color4F(L, 8, &arg7);

    // void drawSolidCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, float scaleX, float scaleY, const cocos2d::Color4F &color)
    self->drawSolidCircle(*arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawSolidCircle$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** center */
    float arg2 = 0;       /** radius */
    float arg3 = 0;       /** angle */
    unsigned int arg4 = 0;       /** segments */
    cocos2d::Color4F arg5;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_cocos2d_Color4F(L, 6, &arg5);

    // void drawSolidCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, const cocos2d::Color4F &color)
    self->drawSolidCircle(*arg1, arg2, arg3, arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawSolidCircle(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.DrawNode")) && (olua_is_object(L, 2, "cc.Vec2")) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_integer(L, 5)) && (olua_is_cocos2d_Color4F(L, 6))) {
            // void drawSolidCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, const cocos2d::Color4F &color)
            return _olua_fun_cocos2d_DrawNode_drawSolidCircle$2(L);
        // }
    }

    if (num_args == 8) {
        // if ((olua_is_object(L, 1, "cc.DrawNode")) && (olua_is_object(L, 2, "cc.Vec2")) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_integer(L, 5)) && (olua_is_number(L, 6)) && (olua_is_number(L, 7)) && (olua_is_cocos2d_Color4F(L, 8))) {
            // void drawSolidCircle(const cocos2d::Vec2 &center, float radius, float angle, unsigned int segments, float scaleX, float scaleY, const cocos2d::Color4F &color)
            return _olua_fun_cocos2d_DrawNode_drawSolidCircle$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::DrawNode::drawSolidCircle' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawSolidPoly(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1 = nullptr;       /** poli */
    unsigned int arg2 = 0;       /** numberOfPoints */
    cocos2d::Color4F arg3;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_integer(L, 3, &arg2);
    olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawSolidPoly(const cocos2d::Vec2 *poli, unsigned int numberOfPoints, const cocos2d::Color4F &color)
    self->drawSolidPoly(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawSolidRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** origin */
    cocos2d::Vec2 *arg2;       /** destination */
    cocos2d::Color4F arg3;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_object(L, 3, &arg2, "cc.Vec2");
    olua_check_cocos2d_Color4F(L, 4, &arg3);

    // void drawSolidRect(const cocos2d::Vec2 &origin, const cocos2d::Vec2 &destination, const cocos2d::Color4F &color)
    self->drawSolidRect(*arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_drawTriangle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::Vec2 *arg1;       /** p1 */
    cocos2d::Vec2 *arg2;       /** p2 */
    cocos2d::Vec2 *arg3;       /** p3 */
    cocos2d::Color4F arg4;       /** color */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_object(L, 3, &arg2, "cc.Vec2");
    olua_check_object(L, 4, &arg3, "cc.Vec2");
    olua_check_cocos2d_Color4F(L, 5, &arg4);

    // void drawTriangle(const cocos2d::Vec2 &p1, const cocos2d::Vec2 &p2, const cocos2d::Vec2 &p3, const cocos2d::Color4F &color)
    self->drawTriangle(*arg1, *arg2, *arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.DrawNode");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = self->getBlendFunc();
    int num_ret = olua_push_object(L, ret, "cc.BlendFunc");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_DrawNode_getLineWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.DrawNode");

    // float getLineWidth()
    float ret = self->getLineWidth();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_DrawNode_isIsolated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.DrawNode");

    // bool isIsolated()
    bool ret = self->isIsolated();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_DrawNode_new$1(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** lineWidth */

    olua_check_number(L, 1, &arg1);

    // cocos2d::DrawNode(@optional float lineWidth)
    cocos2d::DrawNode *ret = new cocos2d::DrawNode(arg1);
    int num_ret = olua_push_object(L, ret, "cc.DrawNode");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_DrawNode_new$2(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::DrawNode()
    cocos2d::DrawNode *ret = new cocos2d::DrawNode();
    int num_ret = olua_push_object(L, ret, "cc.DrawNode");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_DrawNode_new(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // cocos2d::DrawNode()
        return _olua_fun_cocos2d_DrawNode_new$2(L);
    }

    if (num_args == 1) {
        // if ((olua_is_number(L, 1))) {
            // cocos2d::DrawNode(@optional float lineWidth)
            return _olua_fun_cocos2d_DrawNode_new$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::DrawNode::new' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    cocos2d::BlendFunc *arg1;       /** blendFunc */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_object(L, 2, &arg1, "cc.BlendFunc");

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_setIsolated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    bool arg1 = false;       /** isolated */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_bool(L, 2, &arg1);

    // void setIsolated(bool isolated)
    self->setIsolated(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_DrawNode_setLineWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DrawNode *self = nullptr;
    float arg1 = 0;       /** lineWidth */

    olua_to_object(L, 1, &self, "cc.DrawNode");
    olua_check_number(L, 2, &arg1);

    // void setLineWidth(float lineWidth)
    self->setLineWidth(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_DrawNode(lua_State *L)
{
    oluacls_class<cocos2d::DrawNode, cocos2d::Node>(L, "cc.DrawNode");
    oluacls_func(L, "clear", _olua_fun_cocos2d_DrawNode_clear);
    oluacls_func(L, "create", _olua_fun_cocos2d_DrawNode_create);
    oluacls_func(L, "drawCardinalSpline", _olua_fun_cocos2d_DrawNode_drawCardinalSpline);
    oluacls_func(L, "drawCatmullRom", _olua_fun_cocos2d_DrawNode_drawCatmullRom);
    oluacls_func(L, "drawCircle", _olua_fun_cocos2d_DrawNode_drawCircle);
    oluacls_func(L, "drawCubicBezier", _olua_fun_cocos2d_DrawNode_drawCubicBezier);
    oluacls_func(L, "drawDot", _olua_fun_cocos2d_DrawNode_drawDot);
    oluacls_func(L, "drawLine", _olua_fun_cocos2d_DrawNode_drawLine);
    oluacls_func(L, "drawPoint", _olua_fun_cocos2d_DrawNode_drawPoint);
    oluacls_func(L, "drawPoints", _olua_fun_cocos2d_DrawNode_drawPoints);
    oluacls_func(L, "drawPoly", _olua_fun_cocos2d_DrawNode_drawPoly);
    oluacls_func(L, "drawPolygon", _olua_fun_cocos2d_DrawNode_drawPolygon);
    oluacls_func(L, "drawQuadBezier", _olua_fun_cocos2d_DrawNode_drawQuadBezier);
    oluacls_func(L, "drawRect", _olua_fun_cocos2d_DrawNode_drawRect);
    oluacls_func(L, "drawSegment", _olua_fun_cocos2d_DrawNode_drawSegment);
    oluacls_func(L, "drawSolidCircle", _olua_fun_cocos2d_DrawNode_drawSolidCircle);
    oluacls_func(L, "drawSolidPoly", _olua_fun_cocos2d_DrawNode_drawSolidPoly);
    oluacls_func(L, "drawSolidRect", _olua_fun_cocos2d_DrawNode_drawSolidRect);
    oluacls_func(L, "drawTriangle", _olua_fun_cocos2d_DrawNode_drawTriangle);
    oluacls_func(L, "getBlendFunc", _olua_fun_cocos2d_DrawNode_getBlendFunc);
    oluacls_func(L, "getLineWidth", _olua_fun_cocos2d_DrawNode_getLineWidth);
    oluacls_func(L, "isIsolated", _olua_fun_cocos2d_DrawNode_isIsolated);
    oluacls_func(L, "new", _olua_fun_cocos2d_DrawNode_new);
    oluacls_func(L, "setBlendFunc", _olua_fun_cocos2d_DrawNode_setBlendFunc);
    oluacls_func(L, "setIsolated", _olua_fun_cocos2d_DrawNode_setIsolated);
    oluacls_func(L, "setLineWidth", _olua_fun_cocos2d_DrawNode_setLineWidth);
    oluacls_prop(L, "blendFunc", _olua_fun_cocos2d_DrawNode_getBlendFunc, _olua_fun_cocos2d_DrawNode_setBlendFunc);
    oluacls_prop(L, "isolated", _olua_fun_cocos2d_DrawNode_isIsolated, _olua_fun_cocos2d_DrawNode_setIsolated);
    oluacls_prop(L, "lineWidth", _olua_fun_cocos2d_DrawNode_getLineWidth, _olua_fun_cocos2d_DrawNode_setLineWidth);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_DrawNode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.DrawNode")) {
        luaL_error(L, "class not found: cocos2d::DrawNode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParallaxNode_addChild$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParallaxNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    int arg2 = 0;       /** z */
    cocos2d::Vec2 *arg3;       /** parallaxRatio */
    cocos2d::Vec2 *arg4;       /** positionOffset */

    olua_to_object(L, 1, &self, "cc.ParallaxNode");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_integer(L, 3, &arg2);
    olua_check_object(L, 4, &arg3, "cc.Vec2");
    olua_check_object(L, 5, &arg4, "cc.Vec2");

    // void addChild(@addref(children |) cocos2d::Node *child, int z, const cocos2d::Vec2 &parallaxRatio, const cocos2d::Vec2 &positionOffset)
    self->addChild(arg1, arg2, *arg3, *arg4);

    // insert code after call
    olua_addref(L, 1, "children", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParallaxNode_addChild$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParallaxNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    int arg2 = 0;       /** zOrder */
    int arg3 = 0;       /** tag */

    olua_to_object(L, 1, &self, "cc.ParallaxNode");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // @using void addChild(@addref(children |) cocos2d::Node *child, int zOrder, int tag)
    self->addChild(arg1, arg2, arg3);

    // insert code after call
    olua_addref(L, 1, "children", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParallaxNode_addChild$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParallaxNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    int arg2 = 0;       /** zOrder */
    std::string arg3;       /** name */

    olua_to_object(L, 1, &self, "cc.ParallaxNode");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_integer(L, 3, &arg2);
    olua_check_string(L, 4, &arg3);

    // @using void addChild(@addref(children |) cocos2d::Node *child, int zOrder, const std::string &name)
    self->addChild(arg1, arg2, arg3);

    // insert code after call
    olua_addref(L, 1, "children", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParallaxNode_addChild$4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParallaxNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */

    olua_to_object(L, 1, &self, "cc.ParallaxNode");
    olua_check_object(L, 2, &arg1, "cc.Node");

    // @using void addChild(@addref(children |) cocos2d::Node *child)
    self->addChild(arg1);

    // insert code after call
    olua_addref(L, 1, "children", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParallaxNode_addChild$5(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParallaxNode *self = nullptr;
    cocos2d::Node *arg1 = nullptr;       /** child */
    int arg2 = 0;       /** localZOrder */

    olua_to_object(L, 1, &self, "cc.ParallaxNode");
    olua_check_object(L, 2, &arg1, "cc.Node");
    olua_check_integer(L, 3, &arg2);

    // @using void addChild(@addref(children |) cocos2d::Node *child, int localZOrder)
    self->addChild(arg1, arg2);

    // insert code after call
    olua_addref(L, 1, "children", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParallaxNode_addChild(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.ParallaxNode")) && (olua_is_object(L, 2, "cc.Node"))) {
            // @using void addChild(@addref(children |) cocos2d::Node *child)
            return _olua_fun_cocos2d_ParallaxNode_addChild$4(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.ParallaxNode")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_integer(L, 3))) {
            // @using void addChild(@addref(children |) cocos2d::Node *child, int localZOrder)
            return _olua_fun_cocos2d_ParallaxNode_addChild$5(L);
        // }
    }

    if (num_args == 4) {
        if ((olua_is_object(L, 1, "cc.ParallaxNode")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4))) {
            // @using void addChild(@addref(children |) cocos2d::Node *child, int zOrder, int tag)
            return _olua_fun_cocos2d_ParallaxNode_addChild$2(L);
        }

        // if ((olua_is_object(L, 1, "cc.ParallaxNode")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_integer(L, 3)) && (olua_is_string(L, 4))) {
            // @using void addChild(@addref(children |) cocos2d::Node *child, int zOrder, const std::string &name)
            return _olua_fun_cocos2d_ParallaxNode_addChild$3(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_object(L, 1, "cc.ParallaxNode")) && (olua_is_object(L, 2, "cc.Node")) && (olua_is_integer(L, 3)) && (olua_is_object(L, 4, "cc.Vec2")) && (olua_is_object(L, 5, "cc.Vec2"))) {
            // void addChild(@addref(children |) cocos2d::Node *child, int z, const cocos2d::Vec2 &parallaxRatio, const cocos2d::Vec2 &positionOffset)
            return _olua_fun_cocos2d_ParallaxNode_addChild$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ParallaxNode::addChild' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_ParallaxNode_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParallaxNode *create()
    cocos2d::ParallaxNode *ret = cocos2d::ParallaxNode::create();
    int num_ret = olua_push_object(L, ret, "cc.ParallaxNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParallaxNode_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParallaxNode()
    cocos2d::ParallaxNode *ret = new cocos2d::ParallaxNode();
    int num_ret = olua_push_object(L, ret, "cc.ParallaxNode");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_ParallaxNode(lua_State *L)
{
    oluacls_class<cocos2d::ParallaxNode, cocos2d::Node>(L, "cc.ParallaxNode");
    oluacls_func(L, "addChild", _olua_fun_cocos2d_ParallaxNode_addChild);
    oluacls_func(L, "create", _olua_fun_cocos2d_ParallaxNode_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParallaxNode_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParallaxNode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParallaxNode")) {
        luaL_error(L, "class not found: cocos2d::ParallaxNode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_TextHAlignment(lua_State *L)
{
    oluacls_class<cocos2d::TextHAlignment>(L, "cc.TextHAlignment");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "CENTER", (lua_Integer)cocos2d::TextHAlignment::CENTER);
    oluacls_enum(L, "LEFT", (lua_Integer)cocos2d::TextHAlignment::LEFT);
    oluacls_enum(L, "RIGHT", (lua_Integer)cocos2d::TextHAlignment::RIGHT);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TextHAlignment(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TextHAlignment")) {
        luaL_error(L, "class not found: cocos2d::TextHAlignment");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_TextVAlignment(lua_State *L)
{
    oluacls_class<cocos2d::TextVAlignment>(L, "cc.TextVAlignment");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "BOTTOM", (lua_Integer)cocos2d::TextVAlignment::BOTTOM);
    oluacls_enum(L, "CENTER", (lua_Integer)cocos2d::TextVAlignment::CENTER);
    oluacls_enum(L, "TOP", (lua_Integer)cocos2d::TextVAlignment::TOP);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TextVAlignment(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TextVAlignment")) {
        luaL_error(L, "class not found: cocos2d::TextVAlignment");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_GlyphCollection(lua_State *L)
{
    oluacls_class<cocos2d::GlyphCollection>(L, "cc.GlyphCollection");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "ASCII", (lua_Integer)cocos2d::GlyphCollection::ASCII);
    oluacls_enum(L, "CUSTOM", (lua_Integer)cocos2d::GlyphCollection::CUSTOM);
    oluacls_enum(L, "DYNAMIC", (lua_Integer)cocos2d::GlyphCollection::DYNAMIC);
    oluacls_enum(L, "NEHE", (lua_Integer)cocos2d::GlyphCollection::NEHE);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_GlyphCollection(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.GlyphCollection")) {
        luaL_error(L, "class not found: cocos2d::GlyphCollection");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_LabelEffect(lua_State *L)
{
    oluacls_class<cocos2d::LabelEffect>(L, "cc.LabelEffect");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "ALL", (lua_Integer)cocos2d::LabelEffect::ALL);
    oluacls_enum(L, "BOLD", (lua_Integer)cocos2d::LabelEffect::BOLD);
    oluacls_enum(L, "GLOW", (lua_Integer)cocos2d::LabelEffect::GLOW);
    oluacls_enum(L, "ITALICS", (lua_Integer)cocos2d::LabelEffect::ITALICS);
    oluacls_enum(L, "NORMAL", (lua_Integer)cocos2d::LabelEffect::NORMAL);
    oluacls_enum(L, "OUTLINE", (lua_Integer)cocos2d::LabelEffect::OUTLINE);
    oluacls_enum(L, "SHADOW", (lua_Integer)cocos2d::LabelEffect::SHADOW);
    oluacls_enum(L, "STRIKETHROUGH", (lua_Integer)cocos2d::LabelEffect::STRIKETHROUGH);
    oluacls_enum(L, "UNDERLINE", (lua_Integer)cocos2d::LabelEffect::UNDERLINE);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_LabelEffect(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.LabelEffect")) {
        luaL_error(L, "class not found: cocos2d::LabelEffect");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_Label_LabelType(lua_State *L)
{
    oluacls_class<cocos2d::Label::LabelType>(L, "cc.Label.LabelType");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "BMFONT", (lua_Integer)cocos2d::Label::LabelType::BMFONT);
    oluacls_enum(L, "CHARMAP", (lua_Integer)cocos2d::Label::LabelType::CHARMAP);
    oluacls_enum(L, "STRING_TEXTURE", (lua_Integer)cocos2d::Label::LabelType::STRING_TEXTURE);
    oluacls_enum(L, "TTF", (lua_Integer)cocos2d::Label::LabelType::TTF);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Label_LabelType(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Label.LabelType")) {
        luaL_error(L, "class not found: cocos2d::Label::LabelType");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_Label_Overflow(lua_State *L)
{
    oluacls_class<cocos2d::Label::Overflow>(L, "cc.Label.Overflow");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "CLAMP", (lua_Integer)cocos2d::Label::Overflow::CLAMP);
    oluacls_enum(L, "NONE", (lua_Integer)cocos2d::Label::Overflow::NONE);
    oluacls_enum(L, "RESIZE_HEIGHT", (lua_Integer)cocos2d::Label::Overflow::RESIZE_HEIGHT);
    oluacls_enum(L, "SHRINK", (lua_Integer)cocos2d::Label::Overflow::SHRINK);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Label_Overflow(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Label.Overflow")) {
        luaL_error(L, "class not found: cocos2d::Label::Overflow");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_LabelProtocol___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::LabelProtocol *)olua_toobj(L, 1, "cc.LabelProtocol");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LabelProtocol_getString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LabelProtocol");

    // const std::string &getString()
    const std::string &ret = self->getString();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LabelProtocol_setString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelProtocol *self = nullptr;
    std::string arg1;       /** label */

    olua_to_object(L, 1, &self, "cc.LabelProtocol");
    olua_check_string(L, 2, &arg1);

    // void setString(const std::string &label)
    self->setString(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_LabelProtocol(lua_State *L)
{
    oluacls_class<cocos2d::LabelProtocol>(L, "cc.LabelProtocol");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_LabelProtocol___gc);
    oluacls_func(L, "getString", _olua_fun_cocos2d_LabelProtocol_getString);
    oluacls_func(L, "setString", _olua_fun_cocos2d_LabelProtocol_setString);
    oluacls_prop(L, "string", _olua_fun_cocos2d_LabelProtocol_getString, _olua_fun_cocos2d_LabelProtocol_setString);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_LabelProtocol(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.LabelProtocol")) {
        luaL_error(L, "class not found: cocos2d::LabelProtocol");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Label_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.BlendProtocol")) {
            olua_pushobj_as<cocos2d::BlendProtocol>(L, 1, self, "as.cc.BlendProtocol");
            break;
        }
        if (olua_strequal(arg1, "cc.LabelProtocol")) {
            olua_pushobj_as<cocos2d::LabelProtocol>(L, 1, self, "as.cc.LabelProtocol");
            break;
        }

        luaL_error(L, "'cocos2d::Label' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_Label_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Label *create()
    cocos2d::Label *ret = cocos2d::Label::create();
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithBMFont$1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** bmfontPath */
    std::string arg2;       /** text */
    cocos2d::TextHAlignment arg3 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    int arg4 = 0;       /** maxLineWidth */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_enum(L, 3, &arg3);
    olua_check_integer(L, 4, &arg4);

    // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, @optional const cocos2d::TextHAlignment &hAlignment, @optional int maxLineWidth)
    cocos2d::Label *ret = cocos2d::Label::createWithBMFont(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithBMFont$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** bmfontPath */
    std::string arg2;       /** text */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);

    // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text)
    cocos2d::Label *ret = cocos2d::Label::createWithBMFont(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithBMFont$3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** bmfontPath */
    std::string arg2;       /** text */
    cocos2d::TextHAlignment arg3 = (cocos2d::TextHAlignment)0;       /** hAlignment */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_enum(L, 3, &arg3);

    // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, @optional const cocos2d::TextHAlignment &hAlignment)
    cocos2d::Label *ret = cocos2d::Label::createWithBMFont(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithBMFont$4(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** bmfontPath */
    std::string arg2;       /** text */
    cocos2d::TextHAlignment arg3 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    int arg4 = 0;       /** maxLineWidth */
    cocos2d::Rect *arg5;       /** imageRect */
    bool arg6 = false;       /** imageRotated */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_enum(L, 3, &arg3);
    olua_check_integer(L, 4, &arg4);
    olua_check_object(L, 5, &arg5, "cc.Rect");
    olua_check_bool(L, 6, &arg6);

    // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, const cocos2d::TextHAlignment &hAlignment, int maxLineWidth, const cocos2d::Rect &imageRect, bool imageRotated)
    cocos2d::Label *ret = cocos2d::Label::createWithBMFont(arg1, arg2, arg3, arg4, *arg5, arg6);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithBMFont$5(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** bmfontPath */
    std::string arg2;       /** text */
    cocos2d::TextHAlignment arg3 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    int arg4 = 0;       /** maxLineWidth */
    std::string arg5;       /** subTextureKey */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_enum(L, 3, &arg3);
    olua_check_integer(L, 4, &arg4);
    olua_check_string(L, 5, &arg5);

    // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, const cocos2d::TextHAlignment &hAlignment, int maxLineWidth, const std::string &subTextureKey)
    cocos2d::Label *ret = cocos2d::Label::createWithBMFont(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithBMFont(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2))) {
            // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text)
            return _olua_fun_cocos2d_Label_createWithBMFont$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_enum(L, 3))) {
            // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, @optional const cocos2d::TextHAlignment &hAlignment)
            return _olua_fun_cocos2d_Label_createWithBMFont$3(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_enum(L, 3)) && (olua_is_integer(L, 4))) {
            // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, @optional const cocos2d::TextHAlignment &hAlignment, @optional int maxLineWidth)
            return _olua_fun_cocos2d_Label_createWithBMFont$1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_enum(L, 3)) && (olua_is_integer(L, 4)) && (olua_is_string(L, 5))) {
            // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, const cocos2d::TextHAlignment &hAlignment, int maxLineWidth, const std::string &subTextureKey)
            return _olua_fun_cocos2d_Label_createWithBMFont$5(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_enum(L, 3)) && (olua_is_integer(L, 4)) && (olua_is_object(L, 5, "cc.Rect")) && (olua_is_bool(L, 6))) {
            // static cocos2d::Label *createWithBMFont(const std::string &bmfontPath, const std::string &text, const cocos2d::TextHAlignment &hAlignment, int maxLineWidth, const cocos2d::Rect &imageRect, bool imageRotated)
            return _olua_fun_cocos2d_Label_createWithBMFont$4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::createWithBMFont' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Label_createWithCharMap$1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** charMapFile */
    int arg2 = 0;       /** itemWidth */
    int arg3 = 0;       /** itemHeight */
    int arg4 = 0;       /** startCharMap */

    olua_check_string(L, 1, &arg1);
    olua_check_integer(L, 2, &arg2);
    olua_check_integer(L, 3, &arg3);
    olua_check_integer(L, 4, &arg4);

    // static cocos2d::Label *createWithCharMap(const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
    cocos2d::Label *ret = cocos2d::Label::createWithCharMap(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithCharMap$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    int arg2 = 0;       /** itemWidth */
    int arg3 = 0;       /** itemHeight */
    int arg4 = 0;       /** startCharMap */

    olua_check_object(L, 1, &arg1, "cc.Texture2D");
    olua_check_integer(L, 2, &arg2);
    olua_check_integer(L, 3, &arg3);
    olua_check_integer(L, 4, &arg4);

    // static cocos2d::Label *createWithCharMap(cocos2d::Texture2D *texture, int itemWidth, int itemHeight, int startCharMap)
    cocos2d::Label *ret = cocos2d::Label::createWithCharMap(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithCharMap$3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** plistFile */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::Label *createWithCharMap(const std::string &plistFile)
    cocos2d::Label *ret = cocos2d::Label::createWithCharMap(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithCharMap(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static cocos2d::Label *createWithCharMap(const std::string &plistFile)
            return _olua_fun_cocos2d_Label_createWithCharMap$3(L);
        // }
    }

    if (num_args == 4) {
        if ((olua_is_string(L, 1)) && (olua_is_integer(L, 2)) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4))) {
            // static cocos2d::Label *createWithCharMap(const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
            return _olua_fun_cocos2d_Label_createWithCharMap$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_integer(L, 2)) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4))) {
            // static cocos2d::Label *createWithCharMap(cocos2d::Texture2D *texture, int itemWidth, int itemHeight, int startCharMap)
            return _olua_fun_cocos2d_Label_createWithCharMap$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::createWithCharMap' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Label_createWithSystemFont$1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** font */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */
    cocos2d::TextHAlignment arg5 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    cocos2d::TextVAlignment arg6 = (cocos2d::TextVAlignment)0;       /** vAlignment */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_object(L, 4, &arg4, "cc.Size");
    olua_check_enum(L, 5, &arg5);
    olua_check_enum(L, 6, &arg6);

    // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    cocos2d::Label *ret = cocos2d::Label::createWithSystemFont(arg1, arg2, arg3, *arg4, arg5, arg6);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithSystemFont$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** font */
    float arg3 = 0;       /** fontSize */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize)
    cocos2d::Label *ret = cocos2d::Label::createWithSystemFont(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithSystemFont$3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** font */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_object(L, 4, &arg4, "cc.Size");

    // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions)
    cocos2d::Label *ret = cocos2d::Label::createWithSystemFont(arg1, arg2, arg3, *arg4);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithSystemFont$4(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** font */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */
    cocos2d::TextHAlignment arg5 = (cocos2d::TextHAlignment)0;       /** hAlignment */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_object(L, 4, &arg4, "cc.Size");
    olua_check_enum(L, 5, &arg5);

    // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment)
    cocos2d::Label *ret = cocos2d::Label::createWithSystemFont(arg1, arg2, arg3, *arg4, arg5);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithSystemFont(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize)
            return _olua_fun_cocos2d_Label_createWithSystemFont$2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_number(L, 3)) && (olua_is_object(L, 4, "cc.Size"))) {
            // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions)
            return _olua_fun_cocos2d_Label_createWithSystemFont$3(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_number(L, 3)) && (olua_is_object(L, 4, "cc.Size")) && (olua_is_enum(L, 5))) {
            // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment)
            return _olua_fun_cocos2d_Label_createWithSystemFont$4(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_number(L, 3)) && (olua_is_object(L, 4, "cc.Size")) && (olua_is_enum(L, 5)) && (olua_is_enum(L, 6))) {
            // static cocos2d::Label *createWithSystemFont(const std::string &text, const std::string &font, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _olua_fun_cocos2d_Label_createWithSystemFont$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::createWithSystemFont' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Label_createWithTTF$1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */
    cocos2d::TextHAlignment arg5 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    cocos2d::TextVAlignment arg6 = (cocos2d::TextVAlignment)0;       /** vAlignment */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_object(L, 4, &arg4, "cc.Size");
    olua_check_enum(L, 5, &arg5);
    olua_check_enum(L, 6, &arg6);

    // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    cocos2d::Label *ret = cocos2d::Label::createWithTTF(arg1, arg2, arg3, *arg4, arg5, arg6);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithTTF$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    float arg3 = 0;       /** fontSize */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize)
    cocos2d::Label *ret = cocos2d::Label::createWithTTF(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithTTF$3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_object(L, 4, &arg4, "cc.Size");

    // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions)
    cocos2d::Label *ret = cocos2d::Label::createWithTTF(arg1, arg2, arg3, *arg4);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithTTF$4(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */
    cocos2d::TextHAlignment arg5 = (cocos2d::TextHAlignment)0;       /** hAlignment */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_object(L, 4, &arg4, "cc.Size");
    olua_check_enum(L, 5, &arg5);

    // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment)
    cocos2d::Label *ret = cocos2d::Label::createWithTTF(arg1, arg2, arg3, *arg4, arg5);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithTTF$5(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TTFConfig *arg1;       /** ttfConfig */
    std::string arg2;       /** text */
    cocos2d::TextHAlignment arg3 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    int arg4 = 0;       /** maxLineWidth */

    olua_check_object(L, 1, &arg1, "cc.TTFConfig");
    olua_check_string(L, 2, &arg2);
    olua_check_enum(L, 3, &arg3);
    olua_check_integer(L, 4, &arg4);

    // static cocos2d::Label *createWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
    cocos2d::Label *ret = cocos2d::Label::createWithTTF(*arg1, arg2, arg3, arg4);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithTTF$6(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TTFConfig *arg1;       /** ttfConfig */
    std::string arg2;       /** text */

    olua_check_object(L, 1, &arg1, "cc.TTFConfig");
    olua_check_string(L, 2, &arg2);

    // static cocos2d::Label *createWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text)
    cocos2d::Label *ret = cocos2d::Label::createWithTTF(*arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithTTF$7(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TTFConfig *arg1;       /** ttfConfig */
    std::string arg2;       /** text */
    cocos2d::TextHAlignment arg3 = (cocos2d::TextHAlignment)0;       /** hAlignment */

    olua_check_object(L, 1, &arg1, "cc.TTFConfig");
    olua_check_string(L, 2, &arg2);
    olua_check_enum(L, 3, &arg3);

    // static cocos2d::Label *createWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment)
    cocos2d::Label *ret = cocos2d::Label::createWithTTF(*arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.Label");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_createWithTTF(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.TTFConfig")) && (olua_is_string(L, 2))) {
            // static cocos2d::Label *createWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text)
            return _olua_fun_cocos2d_Label_createWithTTF$6(L);
        // }
    }

    if (num_args == 3) {
        if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize)
            return _olua_fun_cocos2d_Label_createWithTTF$2(L);
        }

        // if ((olua_is_object(L, 1, "cc.TTFConfig")) && (olua_is_string(L, 2)) && (olua_is_enum(L, 3))) {
            // static cocos2d::Label *createWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment)
            return _olua_fun_cocos2d_Label_createWithTTF$7(L);
        // }
    }

    if (num_args == 4) {
        if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_number(L, 3)) && (olua_is_object(L, 4, "cc.Size"))) {
            // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions)
            return _olua_fun_cocos2d_Label_createWithTTF$3(L);
        }

        // if ((olua_is_object(L, 1, "cc.TTFConfig")) && (olua_is_string(L, 2)) && (olua_is_enum(L, 3)) && (olua_is_integer(L, 4))) {
            // static cocos2d::Label *createWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
            return _olua_fun_cocos2d_Label_createWithTTF$5(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_number(L, 3)) && (olua_is_object(L, 4, "cc.Size")) && (olua_is_enum(L, 5))) {
            // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment)
            return _olua_fun_cocos2d_Label_createWithTTF$4(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_number(L, 3)) && (olua_is_object(L, 4, "cc.Size")) && (olua_is_enum(L, 5)) && (olua_is_enum(L, 6))) {
            // static cocos2d::Label *createWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _olua_fun_cocos2d_Label_createWithTTF$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::createWithTTF' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Label_disableEffect$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // void disableEffect()
    self->disableEffect();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_disableEffect$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::LabelEffect arg1 = (cocos2d::LabelEffect)0;       /** effect */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_enum(L, 2, &arg1);

    // void disableEffect(cocos2d::LabelEffect effect)
    self->disableEffect(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_disableEffect(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // void disableEffect()
        return _olua_fun_cocos2d_Label_disableEffect$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_enum(L, 2))) {
            // void disableEffect(cocos2d::LabelEffect effect)
            return _olua_fun_cocos2d_Label_disableEffect$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::disableEffect' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableBold(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // void enableBold()
    self->enableBold();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableGlow(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** glowColor */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void enableGlow(const cocos2d::Color4B &glowColor)
    self->enableGlow(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableItalics(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // void enableItalics()
    self->enableItalics();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableOutline$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** outlineColor */
    int arg2 = 0;       /** outlineSize */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_cocos2d_Color4B(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // void enableOutline(const cocos2d::Color4B &outlineColor, @optional int outlineSize)
    self->enableOutline(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableOutline$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** outlineColor */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void enableOutline(const cocos2d::Color4B &outlineColor)
    self->enableOutline(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableOutline(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_cocos2d_Color4B(L, 2))) {
            // void enableOutline(const cocos2d::Color4B &outlineColor)
            return _olua_fun_cocos2d_Label_enableOutline$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_cocos2d_Color4B(L, 2)) && (olua_is_integer(L, 3))) {
            // void enableOutline(const cocos2d::Color4B &outlineColor, @optional int outlineSize)
            return _olua_fun_cocos2d_Label_enableOutline$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::enableOutline' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableShadow$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** shadowColor */
    cocos2d::Size *arg2;       /** offset */
    int arg3 = 0;       /** blurRadius */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_cocos2d_Color4B(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Size");
    olua_check_integer(L, 4, &arg3);

    // void enableShadow(@optional const cocos2d::Color4B &shadowColor, @optional const cocos2d::Size &offset, @optional int blurRadius)
    self->enableShadow(arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableShadow$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // void enableShadow()
    self->enableShadow();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableShadow$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** shadowColor */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void enableShadow(@optional const cocos2d::Color4B &shadowColor)
    self->enableShadow(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableShadow$4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** shadowColor */
    cocos2d::Size *arg2;       /** offset */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_cocos2d_Color4B(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Size");

    // void enableShadow(@optional const cocos2d::Color4B &shadowColor, @optional const cocos2d::Size &offset)
    self->enableShadow(arg1, *arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableShadow(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // void enableShadow()
        return _olua_fun_cocos2d_Label_enableShadow$2(L);
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_cocos2d_Color4B(L, 2))) {
            // void enableShadow(@optional const cocos2d::Color4B &shadowColor)
            return _olua_fun_cocos2d_Label_enableShadow$3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_cocos2d_Color4B(L, 2)) && (olua_is_object(L, 3, "cc.Size"))) {
            // void enableShadow(@optional const cocos2d::Color4B &shadowColor, @optional const cocos2d::Size &offset)
            return _olua_fun_cocos2d_Label_enableShadow$4(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_cocos2d_Color4B(L, 2)) && (olua_is_object(L, 3, "cc.Size")) && (olua_is_integer(L, 4))) {
            // void enableShadow(@optional const cocos2d::Color4B &shadowColor, @optional const cocos2d::Size &offset, @optional int blurRadius)
            return _olua_fun_cocos2d_Label_enableShadow$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::enableShadow' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableStrikethrough(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // void enableStrikethrough()
    self->enableStrikethrough();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableUnderline(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // void enableUnderline()
    self->enableUnderline();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_enableWrap(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    bool arg1 = false;       /** enable */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_bool(L, 2, &arg1);

    // void enableWrap(bool enable)
    self->enableWrap(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_getAdditionalKerning(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // float getAdditionalKerning()
    float ret = self->getAdditionalKerning();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getBMFontFilePath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // const std::string &getBMFontFilePath()
    const std::string &ret = self->getBMFontFilePath();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getBMFontSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // float getBMFontSize()
    float ret = self->getBMFontSize();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = self->getBlendFunc();
    int num_ret = olua_push_object(L, ret, "cc.BlendFunc");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getDimensions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // const cocos2d::Size &getDimensions()
    const cocos2d::Size &ret = self->getDimensions();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getEffectColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // cocos2d::Color4F getEffectColor()
    cocos2d::Color4F ret = self->getEffectColor();
    int num_ret = olua_push_cocos2d_Color4F(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getFontAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // cocos2d::FontAtlas *getFontAtlas()
    cocos2d::FontAtlas *ret = self->getFontAtlas();
    int num_ret = olua_push_object(L, ret, "cc.FontAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // float getHeight()
    float ret = self->getHeight();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getHorizontalAlignment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // cocos2d::TextHAlignment getHorizontalAlignment()
    cocos2d::TextHAlignment ret = self->getHorizontalAlignment();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getLabelEffectType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // cocos2d::LabelEffect getLabelEffectType()
    cocos2d::LabelEffect ret = self->getLabelEffectType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getLabelType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // cocos2d::Label::LabelType getLabelType()
    cocos2d::Label::LabelType ret = self->getLabelType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getLetter(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    int arg1 = 0;       /** lettetIndex */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_integer(L, 2, &arg1);

    // cocos2d::Sprite *getLetter(int lettetIndex)
    cocos2d::Sprite *ret = self->getLetter(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getLineHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // float getLineHeight()
    float ret = self->getLineHeight();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getLineSpacing(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // float getLineSpacing()
    float ret = self->getLineSpacing();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getMaxLineWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // float getMaxLineWidth()
    float ret = self->getMaxLineWidth();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getOutlineSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // float getOutlineSize()
    float ret = self->getOutlineSize();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getOverflow(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // cocos2d::Label::Overflow getOverflow()
    cocos2d::Label::Overflow ret = self->getOverflow();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getRenderingFontSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // float getRenderingFontSize()
    float ret = self->getRenderingFontSize();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getShadowBlurRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // float getShadowBlurRadius()
    float ret = self->getShadowBlurRadius();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getShadowColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // cocos2d::Color4F getShadowColor()
    cocos2d::Color4F ret = self->getShadowColor();
    int num_ret = olua_push_cocos2d_Color4F(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getShadowOffset(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // cocos2d::Size getShadowOffset()
    cocos2d::Size ret = self->getShadowOffset();
    int num_ret = olua_copy_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // const std::string &getString()
    const std::string &ret = self->getString();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getStringLength(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // int getStringLength()
    int ret = self->getStringLength();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getStringNumLines(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // int getStringNumLines()
    int ret = self->getStringNumLines();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getSystemFontName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // const std::string &getSystemFontName()
    const std::string &ret = self->getSystemFontName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getSystemFontSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // float getSystemFontSize()
    float ret = self->getSystemFontSize();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getTTFConfig(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // const cocos2d::TTFConfig &getTTFConfig()
    const cocos2d::TTFConfig &ret = self->getTTFConfig();
    int num_ret = olua_push_object(L, ret, "cc.TTFConfig");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getTextAlignment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // cocos2d::TextHAlignment getTextAlignment()
    cocos2d::TextHAlignment ret = self->getTextAlignment();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getTextColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // const cocos2d::Color4B &getTextColor()
    const cocos2d::Color4B &ret = self->getTextColor();
    int num_ret = olua_push_cocos2d_Color4B(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getVerticalAlignment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // cocos2d::TextVAlignment getVerticalAlignment()
    cocos2d::TextVAlignment ret = self->getVerticalAlignment();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_getWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // float getWidth()
    float ret = self->getWidth();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_initWithTTF$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */
    cocos2d::TextHAlignment arg5 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    cocos2d::TextVAlignment arg6 = (cocos2d::TextVAlignment)0;       /** vAlignment */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_object(L, 5, &arg4, "cc.Size");
    olua_check_enum(L, 6, &arg5);
    olua_check_enum(L, 7, &arg6);

    // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    bool ret = self->initWithTTF(arg1, arg2, arg3, *arg4, arg5, arg6);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_initWithTTF$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    float arg3 = 0;       /** fontSize */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize)
    bool ret = self->initWithTTF(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_initWithTTF$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_object(L, 5, &arg4, "cc.Size");

    // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions)
    bool ret = self->initWithTTF(arg1, arg2, arg3, *arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_initWithTTF$4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** text */
    std::string arg2;       /** fontFilePath */
    float arg3 = 0;       /** fontSize */
    cocos2d::Size *arg4;       /** dimensions */
    cocos2d::TextHAlignment arg5 = (cocos2d::TextHAlignment)0;       /** hAlignment */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_object(L, 5, &arg4, "cc.Size");
    olua_check_enum(L, 6, &arg5);

    // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment)
    bool ret = self->initWithTTF(arg1, arg2, arg3, *arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_initWithTTF$5(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::TTFConfig *arg1;       /** ttfConfig */
    std::string arg2;       /** text */
    cocos2d::TextHAlignment arg3 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    int arg4 = 0;       /** maxLineWidth */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_object(L, 2, &arg1, "cc.TTFConfig");
    olua_check_string(L, 3, &arg2);
    olua_check_enum(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);

    // bool initWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
    bool ret = self->initWithTTF(*arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_initWithTTF$6(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::TTFConfig *arg1;       /** ttfConfig */
    std::string arg2;       /** text */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_object(L, 2, &arg1, "cc.TTFConfig");
    olua_check_string(L, 3, &arg2);

    // bool initWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text)
    bool ret = self->initWithTTF(*arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_initWithTTF$7(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::TTFConfig *arg1;       /** ttfConfig */
    std::string arg2;       /** text */
    cocos2d::TextHAlignment arg3 = (cocos2d::TextHAlignment)0;       /** hAlignment */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_object(L, 2, &arg1, "cc.TTFConfig");
    olua_check_string(L, 3, &arg2);
    olua_check_enum(L, 4, &arg3);

    // bool initWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment)
    bool ret = self->initWithTTF(*arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_initWithTTF(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_object(L, 2, "cc.TTFConfig")) && (olua_is_string(L, 3))) {
            // bool initWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text)
            return _olua_fun_cocos2d_Label_initWithTTF$6(L);
        // }
    }

    if (num_args == 4) {
        if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_number(L, 4))) {
            // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize)
            return _olua_fun_cocos2d_Label_initWithTTF$2(L);
        }

        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_object(L, 2, "cc.TTFConfig")) && (olua_is_string(L, 3)) && (olua_is_enum(L, 4))) {
            // bool initWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment)
            return _olua_fun_cocos2d_Label_initWithTTF$7(L);
        // }
    }

    if (num_args == 5) {
        if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_number(L, 4)) && (olua_is_object(L, 5, "cc.Size"))) {
            // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions)
            return _olua_fun_cocos2d_Label_initWithTTF$3(L);
        }

        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_object(L, 2, "cc.TTFConfig")) && (olua_is_string(L, 3)) && (olua_is_enum(L, 4)) && (olua_is_integer(L, 5))) {
            // bool initWithTTF(const cocos2d::TTFConfig &ttfConfig, const std::string &text, @optional cocos2d::TextHAlignment hAlignment, @optional int maxLineWidth)
            return _olua_fun_cocos2d_Label_initWithTTF$5(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_number(L, 4)) && (olua_is_object(L, 5, "cc.Size")) && (olua_is_enum(L, 6))) {
            // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment)
            return _olua_fun_cocos2d_Label_initWithTTF$4(L);
        // }
    }

    if (num_args == 7) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_number(L, 4)) && (olua_is_object(L, 5, "cc.Size")) && (olua_is_enum(L, 6)) && (olua_is_enum(L, 7))) {
            // bool initWithTTF(const std::string &text, const std::string &fontFilePath, float fontSize, @optional const cocos2d::Size &dimensions, @optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _olua_fun_cocos2d_Label_initWithTTF$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::initWithTTF' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Label_isClipMarginEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // bool isClipMarginEnabled()
    bool ret = self->isClipMarginEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_isShadowEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // bool isShadowEnabled()
    bool ret = self->isShadowEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_isWrapEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // bool isWrapEnabled()
    bool ret = self->isWrapEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_new$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextHAlignment arg1 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    cocos2d::TextVAlignment arg2 = (cocos2d::TextVAlignment)0;       /** vAlignment */

    olua_check_enum(L, 1, &arg1);
    olua_check_enum(L, 2, &arg2);

    // cocos2d::Label(@optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
    cocos2d::Label *ret = new cocos2d::Label(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.Label");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_new$2(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Label()
    cocos2d::Label *ret = new cocos2d::Label();
    int num_ret = olua_push_object(L, ret, "cc.Label");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_new$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextHAlignment arg1 = (cocos2d::TextHAlignment)0;       /** hAlignment */

    olua_check_enum(L, 1, &arg1);

    // cocos2d::Label(@optional cocos2d::TextHAlignment hAlignment)
    cocos2d::Label *ret = new cocos2d::Label(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Label");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_new(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // cocos2d::Label()
        return _olua_fun_cocos2d_Label_new$2(L);
    }

    if (num_args == 1) {
        // if ((olua_is_enum(L, 1))) {
            // cocos2d::Label(@optional cocos2d::TextHAlignment hAlignment)
            return _olua_fun_cocos2d_Label_new$3(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_enum(L, 1)) && (olua_is_enum(L, 2))) {
            // cocos2d::Label(@optional cocos2d::TextHAlignment hAlignment, @optional cocos2d::TextVAlignment vAlignment)
            return _olua_fun_cocos2d_Label_new$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::new' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Label_requestSystemFontRefresh(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // void requestSystemFontRefresh()
    self->requestSystemFontRefresh();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setAdditionalKerning(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    float arg1 = 0;       /** space */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setAdditionalKerning(float space)
    self->setAdditionalKerning(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setAlignment$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::TextHAlignment arg1 = (cocos2d::TextHAlignment)0;       /** hAlignment */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_enum(L, 2, &arg1);

    // void setAlignment(cocos2d::TextHAlignment hAlignment)
    self->setAlignment(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setAlignment$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::TextHAlignment arg1 = (cocos2d::TextHAlignment)0;       /** hAlignment */
    cocos2d::TextVAlignment arg2 = (cocos2d::TextVAlignment)0;       /** vAlignment */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_enum(L, 2, &arg1);
    olua_check_enum(L, 3, &arg2);

    // void setAlignment(cocos2d::TextHAlignment hAlignment, cocos2d::TextVAlignment vAlignment)
    self->setAlignment(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setAlignment(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_enum(L, 2))) {
            // void setAlignment(cocos2d::TextHAlignment hAlignment)
            return _olua_fun_cocos2d_Label_setAlignment$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_enum(L, 2)) && (olua_is_enum(L, 3))) {
            // void setAlignment(cocos2d::TextHAlignment hAlignment, cocos2d::TextVAlignment vAlignment)
            return _olua_fun_cocos2d_Label_setAlignment$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::setAlignment' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Label_setBMFontFilePath$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** bmfontFilePath */
    float arg2 = 0;       /** fontSize */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // bool setBMFontFilePath(const std::string &bmfontFilePath, @optional float fontSize)
    bool ret = self->setBMFontFilePath(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_setBMFontFilePath$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** bmfontFilePath */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);

    // bool setBMFontFilePath(const std::string &bmfontFilePath)
    bool ret = self->setBMFontFilePath(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_setBMFontFilePath$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** bmfontFilePath */
    cocos2d::Rect *arg2;       /** imageRect */
    bool arg3 = false;       /** imageRotated */
    float arg4 = 0;       /** fontSize */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Rect");
    olua_check_bool(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // bool setBMFontFilePath(const std::string &bmfontFilePath, const cocos2d::Rect &imageRect, bool imageRotated, @optional float fontSize)
    bool ret = self->setBMFontFilePath(arg1, *arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_setBMFontFilePath$4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** bmfontFilePath */
    cocos2d::Rect *arg2;       /** imageRect */
    bool arg3 = false;       /** imageRotated */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Rect");
    olua_check_bool(L, 4, &arg3);

    // bool setBMFontFilePath(const std::string &bmfontFilePath, const cocos2d::Rect &imageRect, bool imageRotated)
    bool ret = self->setBMFontFilePath(arg1, *arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_setBMFontFilePath$5(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** bmfontFilePath */
    std::string arg2;       /** subTextureKey */
    float arg3 = 0;       /** fontSize */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // bool setBMFontFilePath(const std::string &bmfontFilePath, const std::string &subTextureKey, @optional float fontSize)
    bool ret = self->setBMFontFilePath(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_setBMFontFilePath$6(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** bmfontFilePath */
    std::string arg2;       /** subTextureKey */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // bool setBMFontFilePath(const std::string &bmfontFilePath, const std::string &subTextureKey)
    bool ret = self->setBMFontFilePath(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_setBMFontFilePath(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_string(L, 2))) {
            // bool setBMFontFilePath(const std::string &bmfontFilePath)
            return _olua_fun_cocos2d_Label_setBMFontFilePath$2(L);
        // }
    }

    if (num_args == 3) {
        if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_string(L, 2)) && (olua_is_number(L, 3))) {
            // bool setBMFontFilePath(const std::string &bmfontFilePath, @optional float fontSize)
            return _olua_fun_cocos2d_Label_setBMFontFilePath$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3))) {
            // bool setBMFontFilePath(const std::string &bmfontFilePath, const std::string &subTextureKey)
            return _olua_fun_cocos2d_Label_setBMFontFilePath$6(L);
        // }
    }

    if (num_args == 4) {
        if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_string(L, 2)) && (olua_is_object(L, 3, "cc.Rect")) && (olua_is_bool(L, 4))) {
            // bool setBMFontFilePath(const std::string &bmfontFilePath, const cocos2d::Rect &imageRect, bool imageRotated)
            return _olua_fun_cocos2d_Label_setBMFontFilePath$4(L);
        }

        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_number(L, 4))) {
            // bool setBMFontFilePath(const std::string &bmfontFilePath, const std::string &subTextureKey, @optional float fontSize)
            return _olua_fun_cocos2d_Label_setBMFontFilePath$5(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_string(L, 2)) && (olua_is_object(L, 3, "cc.Rect")) && (olua_is_bool(L, 4)) && (olua_is_number(L, 5))) {
            // bool setBMFontFilePath(const std::string &bmfontFilePath, const cocos2d::Rect &imageRect, bool imageRotated, @optional float fontSize)
            return _olua_fun_cocos2d_Label_setBMFontFilePath$3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::setBMFontFilePath' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Label_setBMFontSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    float arg1 = 0;       /** fontSize */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setBMFontSize(float fontSize)
    self->setBMFontSize(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::BlendFunc *arg1;       /** blendFunc */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_object(L, 2, &arg1, "cc.BlendFunc");

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setCharMap$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** charMapFile */
    int arg2 = 0;       /** itemWidth */
    int arg3 = 0;       /** itemHeight */
    int arg4 = 0;       /** startCharMap */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);

    // bool setCharMap(const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
    bool ret = self->setCharMap(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_setCharMap$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    int arg2 = 0;       /** itemWidth */
    int arg3 = 0;       /** itemHeight */
    int arg4 = 0;       /** startCharMap */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);

    // bool setCharMap(cocos2d::Texture2D *texture, int itemWidth, int itemHeight, int startCharMap)
    bool ret = self->setCharMap(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_setCharMap$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** plistFile */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);

    // bool setCharMap(const std::string &plistFile)
    bool ret = self->setCharMap(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_setCharMap(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_string(L, 2))) {
            // bool setCharMap(const std::string &plistFile)
            return _olua_fun_cocos2d_Label_setCharMap$3(L);
        // }
    }

    if (num_args == 5) {
        if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_string(L, 2)) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4)) && (olua_is_integer(L, 5))) {
            // bool setCharMap(const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
            return _olua_fun_cocos2d_Label_setCharMap$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.Label")) && (olua_is_object(L, 2, "cc.Texture2D")) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4)) && (olua_is_integer(L, 5))) {
            // bool setCharMap(cocos2d::Texture2D *texture, int itemWidth, int itemHeight, int startCharMap)
            return _olua_fun_cocos2d_Label_setCharMap$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Label::setCharMap' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Label_setClipMarginEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    bool arg1 = false;       /** clipEnabled */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_bool(L, 2, &arg1);

    // void setClipMarginEnabled(bool clipEnabled)
    self->setClipMarginEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setDimensions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    float arg1 = 0;       /** width */
    float arg2 = 0;       /** height */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void setDimensions(float width, float height)
    self->setDimensions(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    float arg1 = 0;       /** height */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setHeight(float height)
    self->setHeight(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setHorizontalAlignment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::TextHAlignment arg1 = (cocos2d::TextHAlignment)0;       /** hAlignment */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_enum(L, 2, &arg1);

    // void setHorizontalAlignment(cocos2d::TextHAlignment hAlignment)
    self->setHorizontalAlignment(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setLineBreakWithoutSpace(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    bool arg1 = false;       /** breakWithoutSpace */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_bool(L, 2, &arg1);

    // void setLineBreakWithoutSpace(bool breakWithoutSpace)
    self->setLineBreakWithoutSpace(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setLineHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    float arg1 = 0;       /** height */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setLineHeight(float height)
    self->setLineHeight(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setLineSpacing(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    float arg1 = 0;       /** height */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setLineSpacing(float height)
    self->setLineSpacing(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setMaxLineWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    float arg1 = 0;       /** maxLineWidth */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setMaxLineWidth(float maxLineWidth)
    self->setMaxLineWidth(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setOverflow(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Label::Overflow arg1 = (cocos2d::Label::Overflow)0;       /** overflow */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_enum(L, 2, &arg1);

    // void setOverflow(cocos2d::Label::Overflow overflow)
    self->setOverflow(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** text */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);

    // void setString(const std::string &text)
    self->setString(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setSystemFontName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    std::string arg1;       /** font */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_string(L, 2, &arg1);

    // void setSystemFontName(const std::string &font)
    self->setSystemFontName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setSystemFontSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    float arg1 = 0;       /** fontSize */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setSystemFontSize(float fontSize)
    self->setSystemFontSize(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setTTFConfig(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::TTFConfig *arg1;       /** ttfConfig */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_object(L, 2, &arg1, "cc.TTFConfig");

    // bool setTTFConfig(const cocos2d::TTFConfig &ttfConfig)
    bool ret = self->setTTFConfig(*arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Label_setTextColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void setTextColor(const cocos2d::Color4B &color)
    self->setTextColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setVerticalAlignment(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    cocos2d::TextVAlignment arg1 = (cocos2d::TextVAlignment)0;       /** vAlignment */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_enum(L, 2, &arg1);

    // void setVerticalAlignment(cocos2d::TextVAlignment vAlignment)
    self->setVerticalAlignment(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_setWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;
    float arg1 = 0;       /** width */

    olua_to_object(L, 1, &self, "cc.Label");
    olua_check_number(L, 2, &arg1);

    // void setWidth(float width)
    self->setWidth(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Label_updateContent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Label *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Label");

    // void updateContent()
    self->updateContent();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Label(lua_State *L)
{
    oluacls_class<cocos2d::Label, cocos2d::Node>(L, "cc.Label");
    oluacls_func(L, "as", _olua_fun_cocos2d_Label_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_Label_create);
    oluacls_func(L, "createWithBMFont", _olua_fun_cocos2d_Label_createWithBMFont);
    oluacls_func(L, "createWithCharMap", _olua_fun_cocos2d_Label_createWithCharMap);
    oluacls_func(L, "createWithSystemFont", _olua_fun_cocos2d_Label_createWithSystemFont);
    oluacls_func(L, "createWithTTF", _olua_fun_cocos2d_Label_createWithTTF);
    oluacls_func(L, "disableEffect", _olua_fun_cocos2d_Label_disableEffect);
    oluacls_func(L, "enableBold", _olua_fun_cocos2d_Label_enableBold);
    oluacls_func(L, "enableGlow", _olua_fun_cocos2d_Label_enableGlow);
    oluacls_func(L, "enableItalics", _olua_fun_cocos2d_Label_enableItalics);
    oluacls_func(L, "enableOutline", _olua_fun_cocos2d_Label_enableOutline);
    oluacls_func(L, "enableShadow", _olua_fun_cocos2d_Label_enableShadow);
    oluacls_func(L, "enableStrikethrough", _olua_fun_cocos2d_Label_enableStrikethrough);
    oluacls_func(L, "enableUnderline", _olua_fun_cocos2d_Label_enableUnderline);
    oluacls_func(L, "enableWrap", _olua_fun_cocos2d_Label_enableWrap);
    oluacls_func(L, "getAdditionalKerning", _olua_fun_cocos2d_Label_getAdditionalKerning);
    oluacls_func(L, "getBMFontFilePath", _olua_fun_cocos2d_Label_getBMFontFilePath);
    oluacls_func(L, "getBMFontSize", _olua_fun_cocos2d_Label_getBMFontSize);
    oluacls_func(L, "getBlendFunc", _olua_fun_cocos2d_Label_getBlendFunc);
    oluacls_func(L, "getDimensions", _olua_fun_cocos2d_Label_getDimensions);
    oluacls_func(L, "getEffectColor", _olua_fun_cocos2d_Label_getEffectColor);
    oluacls_func(L, "getFontAtlas", _olua_fun_cocos2d_Label_getFontAtlas);
    oluacls_func(L, "getHeight", _olua_fun_cocos2d_Label_getHeight);
    oluacls_func(L, "getHorizontalAlignment", _olua_fun_cocos2d_Label_getHorizontalAlignment);
    oluacls_func(L, "getLabelEffectType", _olua_fun_cocos2d_Label_getLabelEffectType);
    oluacls_func(L, "getLabelType", _olua_fun_cocos2d_Label_getLabelType);
    oluacls_func(L, "getLetter", _olua_fun_cocos2d_Label_getLetter);
    oluacls_func(L, "getLineHeight", _olua_fun_cocos2d_Label_getLineHeight);
    oluacls_func(L, "getLineSpacing", _olua_fun_cocos2d_Label_getLineSpacing);
    oluacls_func(L, "getMaxLineWidth", _olua_fun_cocos2d_Label_getMaxLineWidth);
    oluacls_func(L, "getOutlineSize", _olua_fun_cocos2d_Label_getOutlineSize);
    oluacls_func(L, "getOverflow", _olua_fun_cocos2d_Label_getOverflow);
    oluacls_func(L, "getRenderingFontSize", _olua_fun_cocos2d_Label_getRenderingFontSize);
    oluacls_func(L, "getShadowBlurRadius", _olua_fun_cocos2d_Label_getShadowBlurRadius);
    oluacls_func(L, "getShadowColor", _olua_fun_cocos2d_Label_getShadowColor);
    oluacls_func(L, "getShadowOffset", _olua_fun_cocos2d_Label_getShadowOffset);
    oluacls_func(L, "getString", _olua_fun_cocos2d_Label_getString);
    oluacls_func(L, "getStringLength", _olua_fun_cocos2d_Label_getStringLength);
    oluacls_func(L, "getStringNumLines", _olua_fun_cocos2d_Label_getStringNumLines);
    oluacls_func(L, "getSystemFontName", _olua_fun_cocos2d_Label_getSystemFontName);
    oluacls_func(L, "getSystemFontSize", _olua_fun_cocos2d_Label_getSystemFontSize);
    oluacls_func(L, "getTTFConfig", _olua_fun_cocos2d_Label_getTTFConfig);
    oluacls_func(L, "getTextAlignment", _olua_fun_cocos2d_Label_getTextAlignment);
    oluacls_func(L, "getTextColor", _olua_fun_cocos2d_Label_getTextColor);
    oluacls_func(L, "getVerticalAlignment", _olua_fun_cocos2d_Label_getVerticalAlignment);
    oluacls_func(L, "getWidth", _olua_fun_cocos2d_Label_getWidth);
    oluacls_func(L, "initWithTTF", _olua_fun_cocos2d_Label_initWithTTF);
    oluacls_func(L, "isClipMarginEnabled", _olua_fun_cocos2d_Label_isClipMarginEnabled);
    oluacls_func(L, "isShadowEnabled", _olua_fun_cocos2d_Label_isShadowEnabled);
    oluacls_func(L, "isWrapEnabled", _olua_fun_cocos2d_Label_isWrapEnabled);
    oluacls_func(L, "new", _olua_fun_cocos2d_Label_new);
    oluacls_func(L, "requestSystemFontRefresh", _olua_fun_cocos2d_Label_requestSystemFontRefresh);
    oluacls_func(L, "setAdditionalKerning", _olua_fun_cocos2d_Label_setAdditionalKerning);
    oluacls_func(L, "setAlignment", _olua_fun_cocos2d_Label_setAlignment);
    oluacls_func(L, "setBMFontFilePath", _olua_fun_cocos2d_Label_setBMFontFilePath);
    oluacls_func(L, "setBMFontSize", _olua_fun_cocos2d_Label_setBMFontSize);
    oluacls_func(L, "setBlendFunc", _olua_fun_cocos2d_Label_setBlendFunc);
    oluacls_func(L, "setCharMap", _olua_fun_cocos2d_Label_setCharMap);
    oluacls_func(L, "setClipMarginEnabled", _olua_fun_cocos2d_Label_setClipMarginEnabled);
    oluacls_func(L, "setDimensions", _olua_fun_cocos2d_Label_setDimensions);
    oluacls_func(L, "setHeight", _olua_fun_cocos2d_Label_setHeight);
    oluacls_func(L, "setHorizontalAlignment", _olua_fun_cocos2d_Label_setHorizontalAlignment);
    oluacls_func(L, "setLineBreakWithoutSpace", _olua_fun_cocos2d_Label_setLineBreakWithoutSpace);
    oluacls_func(L, "setLineHeight", _olua_fun_cocos2d_Label_setLineHeight);
    oluacls_func(L, "setLineSpacing", _olua_fun_cocos2d_Label_setLineSpacing);
    oluacls_func(L, "setMaxLineWidth", _olua_fun_cocos2d_Label_setMaxLineWidth);
    oluacls_func(L, "setOverflow", _olua_fun_cocos2d_Label_setOverflow);
    oluacls_func(L, "setString", _olua_fun_cocos2d_Label_setString);
    oluacls_func(L, "setSystemFontName", _olua_fun_cocos2d_Label_setSystemFontName);
    oluacls_func(L, "setSystemFontSize", _olua_fun_cocos2d_Label_setSystemFontSize);
    oluacls_func(L, "setTTFConfig", _olua_fun_cocos2d_Label_setTTFConfig);
    oluacls_func(L, "setTextColor", _olua_fun_cocos2d_Label_setTextColor);
    oluacls_func(L, "setVerticalAlignment", _olua_fun_cocos2d_Label_setVerticalAlignment);
    oluacls_func(L, "setWidth", _olua_fun_cocos2d_Label_setWidth);
    oluacls_func(L, "updateContent", _olua_fun_cocos2d_Label_updateContent);
    oluacls_prop(L, "additionalKerning", _olua_fun_cocos2d_Label_getAdditionalKerning, _olua_fun_cocos2d_Label_setAdditionalKerning);
    oluacls_prop(L, "blendFunc", _olua_fun_cocos2d_Label_getBlendFunc, _olua_fun_cocos2d_Label_setBlendFunc);
    oluacls_prop(L, "bmFontFilePath", _olua_fun_cocos2d_Label_getBMFontFilePath, nullptr);
    oluacls_prop(L, "bmFontSize", _olua_fun_cocos2d_Label_getBMFontSize, _olua_fun_cocos2d_Label_setBMFontSize);
    oluacls_prop(L, "clipMarginEnabled", _olua_fun_cocos2d_Label_isClipMarginEnabled, _olua_fun_cocos2d_Label_setClipMarginEnabled);
    oluacls_prop(L, "effectColor", _olua_fun_cocos2d_Label_getEffectColor, nullptr);
    oluacls_prop(L, "fontAtlas", _olua_fun_cocos2d_Label_getFontAtlas, nullptr);
    oluacls_prop(L, "height", _olua_fun_cocos2d_Label_getHeight, _olua_fun_cocos2d_Label_setHeight);
    oluacls_prop(L, "horizontalAlignment", _olua_fun_cocos2d_Label_getHorizontalAlignment, _olua_fun_cocos2d_Label_setHorizontalAlignment);
    oluacls_prop(L, "labelEffectType", _olua_fun_cocos2d_Label_getLabelEffectType, nullptr);
    oluacls_prop(L, "labelType", _olua_fun_cocos2d_Label_getLabelType, nullptr);
    oluacls_prop(L, "lineHeight", _olua_fun_cocos2d_Label_getLineHeight, _olua_fun_cocos2d_Label_setLineHeight);
    oluacls_prop(L, "lineSpacing", _olua_fun_cocos2d_Label_getLineSpacing, _olua_fun_cocos2d_Label_setLineSpacing);
    oluacls_prop(L, "maxLineWidth", _olua_fun_cocos2d_Label_getMaxLineWidth, _olua_fun_cocos2d_Label_setMaxLineWidth);
    oluacls_prop(L, "outlineSize", _olua_fun_cocos2d_Label_getOutlineSize, nullptr);
    oluacls_prop(L, "overflow", _olua_fun_cocos2d_Label_getOverflow, _olua_fun_cocos2d_Label_setOverflow);
    oluacls_prop(L, "renderingFontSize", _olua_fun_cocos2d_Label_getRenderingFontSize, nullptr);
    oluacls_prop(L, "shadowBlurRadius", _olua_fun_cocos2d_Label_getShadowBlurRadius, nullptr);
    oluacls_prop(L, "shadowColor", _olua_fun_cocos2d_Label_getShadowColor, nullptr);
    oluacls_prop(L, "shadowEnabled", _olua_fun_cocos2d_Label_isShadowEnabled, nullptr);
    oluacls_prop(L, "shadowOffset", _olua_fun_cocos2d_Label_getShadowOffset, nullptr);
    oluacls_prop(L, "string", _olua_fun_cocos2d_Label_getString, _olua_fun_cocos2d_Label_setString);
    oluacls_prop(L, "stringLength", _olua_fun_cocos2d_Label_getStringLength, nullptr);
    oluacls_prop(L, "stringNumLines", _olua_fun_cocos2d_Label_getStringNumLines, nullptr);
    oluacls_prop(L, "systemFontName", _olua_fun_cocos2d_Label_getSystemFontName, _olua_fun_cocos2d_Label_setSystemFontName);
    oluacls_prop(L, "systemFontSize", _olua_fun_cocos2d_Label_getSystemFontSize, _olua_fun_cocos2d_Label_setSystemFontSize);
    oluacls_prop(L, "textAlignment", _olua_fun_cocos2d_Label_getTextAlignment, nullptr);
    oluacls_prop(L, "textColor", _olua_fun_cocos2d_Label_getTextColor, _olua_fun_cocos2d_Label_setTextColor);
    oluacls_prop(L, "ttfConfig", _olua_fun_cocos2d_Label_getTTFConfig, _olua_fun_cocos2d_Label_setTTFConfig);
    oluacls_prop(L, "verticalAlignment", _olua_fun_cocos2d_Label_getVerticalAlignment, _olua_fun_cocos2d_Label_setVerticalAlignment);
    oluacls_prop(L, "width", _olua_fun_cocos2d_Label_getWidth, _olua_fun_cocos2d_Label_setWidth);
    oluacls_prop(L, "wrapEnabled", _olua_fun_cocos2d_Label_isWrapEnabled, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Label(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Label")) {
        luaL_error(L, "class not found: cocos2d::Label");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_LabelAtlas_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelAtlas *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.LabelAtlas");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.BlendProtocol")) {
            olua_pushobj_as<cocos2d::BlendProtocol>(L, 1, self, "as.cc.BlendProtocol");
            break;
        }
        if (olua_strequal(arg1, "cc.LabelProtocol")) {
            olua_pushobj_as<cocos2d::LabelProtocol>(L, 1, self, "as.cc.LabelProtocol");
            break;
        }
        if (olua_strequal(arg1, "cc.TextureProtocol")) {
            olua_pushobj_as<cocos2d::TextureProtocol>(L, 1, self, "as.cc.TextureProtocol");
            break;
        }

        luaL_error(L, "'cocos2d::LabelAtlas' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_LabelAtlas_create$1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::LabelAtlas *create()
    cocos2d::LabelAtlas *ret = cocos2d::LabelAtlas::create();
    int num_ret = olua_push_object(L, ret, "cc.LabelAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LabelAtlas_create$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** string */
    std::string arg2;       /** charMapFile */
    int arg3 = 0;       /** itemWidth */
    int arg4 = 0;       /** itemHeight */
    int arg5 = 0;       /** startCharMap */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_integer(L, 3, &arg3);
    olua_check_integer(L, 4, &arg4);
    olua_check_integer(L, 5, &arg5);

    // static cocos2d::LabelAtlas *create(const std::string &string, const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
    cocos2d::LabelAtlas *ret = cocos2d::LabelAtlas::create(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_object(L, ret, "cc.LabelAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LabelAtlas_create$3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** string */
    std::string arg2;       /** fntFile */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);

    // static cocos2d::LabelAtlas *create(const std::string &string, const std::string &fntFile)
    cocos2d::LabelAtlas *ret = cocos2d::LabelAtlas::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.LabelAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LabelAtlas_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::LabelAtlas *create()
        return _olua_fun_cocos2d_LabelAtlas_create$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2))) {
            // static cocos2d::LabelAtlas *create(const std::string &string, const std::string &fntFile)
            return _olua_fun_cocos2d_LabelAtlas_create$3(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_integer(L, 3)) && (olua_is_integer(L, 4)) && (olua_is_integer(L, 5))) {
            // static cocos2d::LabelAtlas *create(const std::string &string, const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
            return _olua_fun_cocos2d_LabelAtlas_create$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LabelAtlas::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LabelAtlas_getString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LabelAtlas");

    // const std::string &getString()
    const std::string &ret = self->getString();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LabelAtlas_initWithString$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelAtlas *self = nullptr;
    std::string arg1;       /** string */
    std::string arg2;       /** charMapFile */
    int arg3 = 0;       /** itemWidth */
    int arg4 = 0;       /** itemHeight */
    int arg5 = 0;       /** startCharMap */

    olua_to_object(L, 1, &self, "cc.LabelAtlas");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_integer(L, 6, &arg5);

    // bool initWithString(const std::string &string, const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
    bool ret = self->initWithString(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LabelAtlas_initWithString$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelAtlas *self = nullptr;
    std::string arg1;       /** string */
    std::string arg2;       /** fntFile */

    olua_to_object(L, 1, &self, "cc.LabelAtlas");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // bool initWithString(const std::string &string, const std::string &fntFile)
    bool ret = self->initWithString(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LabelAtlas_initWithString$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelAtlas *self = nullptr;
    std::string arg1;       /** string */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */
    int arg3 = 0;       /** itemWidth */
    int arg4 = 0;       /** itemHeight */
    int arg5 = 0;       /** startCharMap */

    olua_to_object(L, 1, &self, "cc.LabelAtlas");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Texture2D");
    olua_check_integer(L, 4, &arg3);
    olua_check_integer(L, 5, &arg4);
    olua_check_integer(L, 6, &arg5);

    // bool initWithString(const std::string &string, cocos2d::Texture2D *texture, int itemWidth, int itemHeight, int startCharMap)
    bool ret = self->initWithString(arg1, arg2, arg3, arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LabelAtlas_initWithString(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.LabelAtlas")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3))) {
            // bool initWithString(const std::string &string, const std::string &fntFile)
            return _olua_fun_cocos2d_LabelAtlas_initWithString$2(L);
        // }
    }

    if (num_args == 6) {
        if ((olua_is_object(L, 1, "cc.LabelAtlas")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_integer(L, 4)) && (olua_is_integer(L, 5)) && (olua_is_integer(L, 6))) {
            // bool initWithString(const std::string &string, const std::string &charMapFile, int itemWidth, int itemHeight, int startCharMap)
            return _olua_fun_cocos2d_LabelAtlas_initWithString$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.LabelAtlas")) && (olua_is_string(L, 2)) && (olua_is_object(L, 3, "cc.Texture2D")) && (olua_is_integer(L, 4)) && (olua_is_integer(L, 5)) && (olua_is_integer(L, 6))) {
            // bool initWithString(const std::string &string, cocos2d::Texture2D *texture, int itemWidth, int itemHeight, int startCharMap)
            return _olua_fun_cocos2d_LabelAtlas_initWithString$3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LabelAtlas::initWithString' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LabelAtlas_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::LabelAtlas()
    cocos2d::LabelAtlas *ret = new cocos2d::LabelAtlas();
    int num_ret = olua_push_object(L, ret, "cc.LabelAtlas");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LabelAtlas_setString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LabelAtlas *self = nullptr;
    std::string arg1;       /** label */

    olua_to_object(L, 1, &self, "cc.LabelAtlas");
    olua_check_string(L, 2, &arg1);

    // void setString(const std::string &label)
    self->setString(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_LabelAtlas(lua_State *L)
{
    oluacls_class<cocos2d::LabelAtlas, cocos2d::AtlasNode>(L, "cc.LabelAtlas");
    oluacls_func(L, "as", _olua_fun_cocos2d_LabelAtlas_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_LabelAtlas_create);
    oluacls_func(L, "getString", _olua_fun_cocos2d_LabelAtlas_getString);
    oluacls_func(L, "initWithString", _olua_fun_cocos2d_LabelAtlas_initWithString);
    oluacls_func(L, "new", _olua_fun_cocos2d_LabelAtlas_new);
    oluacls_func(L, "setString", _olua_fun_cocos2d_LabelAtlas_setString);
    oluacls_prop(L, "string", _olua_fun_cocos2d_LabelAtlas_getString, _olua_fun_cocos2d_LabelAtlas_setString);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_LabelAtlas(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.LabelAtlas")) {
        luaL_error(L, "class not found: cocos2d::LabelAtlas");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_FontAtlas_CMD_PURGE_FONTATLAS$1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *CMD_PURGE_FONTATLAS
    const char *ret = cocos2d::FontAtlas::CMD_PURGE_FONTATLAS;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FontAtlas_CMD_PURGE_FONTATLAS$2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** CMD_PURGE_FONTATLAS */

    olua_check_string(L, 1, &arg1);

    // static const char *CMD_PURGE_FONTATLAS
    cocos2d::FontAtlas::CMD_PURGE_FONTATLAS = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FontAtlas_CMD_PURGE_FONTATLAS(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static const char *CMD_PURGE_FONTATLAS
        return _olua_fun_cocos2d_FontAtlas_CMD_PURGE_FONTATLAS$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static const char *CMD_PURGE_FONTATLAS
            return _olua_fun_cocos2d_FontAtlas_CMD_PURGE_FONTATLAS$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FontAtlas::CMD_PURGE_FONTATLAS' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FontAtlas_CMD_RESET_FONTATLAS$1(lua_State *L)
{
    olua_startinvoke(L);

    // static const char *CMD_RESET_FONTATLAS
    const char *ret = cocos2d::FontAtlas::CMD_RESET_FONTATLAS;
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FontAtlas_CMD_RESET_FONTATLAS$2(lua_State *L)
{
    olua_startinvoke(L);

    const char *arg1 = nullptr;       /** CMD_RESET_FONTATLAS */

    olua_check_string(L, 1, &arg1);

    // static const char *CMD_RESET_FONTATLAS
    cocos2d::FontAtlas::CMD_RESET_FONTATLAS = arg1;

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FontAtlas_CMD_RESET_FONTATLAS(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static const char *CMD_RESET_FONTATLAS
        return _olua_fun_cocos2d_FontAtlas_CMD_RESET_FONTATLAS$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static const char *CMD_RESET_FONTATLAS
            return _olua_fun_cocos2d_FontAtlas_CMD_RESET_FONTATLAS$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FontAtlas::CMD_RESET_FONTATLAS' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FontAtlas_addTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    int arg2 = 0;       /** slot */

    olua_to_object(L, 1, &self, "cc.FontAtlas");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");
    olua_check_integer(L, 3, &arg2);

    // void addTexture(cocos2d::Texture2D *texture, int slot)
    self->addTexture(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FontAtlas_getFontName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FontAtlas");

    // std::string getFontName()
    std::string ret = self->getFontName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FontAtlas_getLineHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FontAtlas");

    // float getLineHeight()
    float ret = self->getLineHeight();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FontAtlas_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;
    int arg1 = 0;       /** slot */

    olua_to_object(L, 1, &self, "cc.FontAtlas");
    olua_check_integer(L, 2, &arg1);

    // cocos2d::Texture2D *getTexture(int slot)
    cocos2d::Texture2D *ret = self->getTexture(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FontAtlas_listenRendererRecreated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;
    cocos2d::EventCustom *arg1 = nullptr;       /** event */

    olua_to_object(L, 1, &self, "cc.FontAtlas");
    olua_check_object(L, 2, &arg1, "cc.EventCustom");

    // void listenRendererRecreated(cocos2d::EventCustom *event)
    self->listenRendererRecreated(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FontAtlas_purgeTexturesAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FontAtlas");

    // void purgeTexturesAtlas()
    self->purgeTexturesAtlas();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FontAtlas_setAliasTexParameters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FontAtlas");

    // void setAliasTexParameters()
    self->setAliasTexParameters();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FontAtlas_setAntiAliasTexParameters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FontAtlas");

    // void setAntiAliasTexParameters()
    self->setAntiAliasTexParameters();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FontAtlas_setLineHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FontAtlas *self = nullptr;
    float arg1 = 0;       /** newHeight */

    olua_to_object(L, 1, &self, "cc.FontAtlas");
    olua_check_number(L, 2, &arg1);

    // void setLineHeight(float newHeight)
    self->setLineHeight(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_FontAtlas(lua_State *L)
{
    oluacls_class<cocos2d::FontAtlas, cocos2d::Ref>(L, "cc.FontAtlas");
    oluacls_func(L, "addTexture", _olua_fun_cocos2d_FontAtlas_addTexture);
    oluacls_func(L, "getFontName", _olua_fun_cocos2d_FontAtlas_getFontName);
    oluacls_func(L, "getLineHeight", _olua_fun_cocos2d_FontAtlas_getLineHeight);
    oluacls_func(L, "getTexture", _olua_fun_cocos2d_FontAtlas_getTexture);
    oluacls_func(L, "listenRendererRecreated", _olua_fun_cocos2d_FontAtlas_listenRendererRecreated);
    oluacls_func(L, "purgeTexturesAtlas", _olua_fun_cocos2d_FontAtlas_purgeTexturesAtlas);
    oluacls_func(L, "setAliasTexParameters", _olua_fun_cocos2d_FontAtlas_setAliasTexParameters);
    oluacls_func(L, "setAntiAliasTexParameters", _olua_fun_cocos2d_FontAtlas_setAntiAliasTexParameters);
    oluacls_func(L, "setLineHeight", _olua_fun_cocos2d_FontAtlas_setLineHeight);
    oluacls_prop(L, "fontName", _olua_fun_cocos2d_FontAtlas_getFontName, nullptr);
    oluacls_prop(L, "lineHeight", _olua_fun_cocos2d_FontAtlas_getLineHeight, _olua_fun_cocos2d_FontAtlas_setLineHeight);
    oluacls_prop(L, "CMD_PURGE_FONTATLAS", _olua_fun_cocos2d_FontAtlas_CMD_PURGE_FONTATLAS, _olua_fun_cocos2d_FontAtlas_CMD_PURGE_FONTATLAS);
    oluacls_prop(L, "CMD_RESET_FONTATLAS", _olua_fun_cocos2d_FontAtlas_CMD_RESET_FONTATLAS, _olua_fun_cocos2d_FontAtlas_CMD_RESET_FONTATLAS);
    oluacls_const(L, "CacheTextureHeight", cocos2d::FontAtlas::CacheTextureHeight);
    oluacls_const(L, "CacheTextureWidth", cocos2d::FontAtlas::CacheTextureWidth);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_FontAtlas(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.FontAtlas")) {
        luaL_error(L, "class not found: cocos2d::FontAtlas");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ClippingRectangleNode_create$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Rect *arg1;       /** clippingRegion */

    olua_check_object(L, 1, &arg1, "cc.Rect");

    // static cocos2d::ClippingRectangleNode *create(const cocos2d::Rect &clippingRegion)
    cocos2d::ClippingRectangleNode *ret = cocos2d::ClippingRectangleNode::create(*arg1);
    int num_ret = olua_push_object(L, ret, "cc.ClippingRectangleNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingRectangleNode_create$2(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ClippingRectangleNode *create()
    cocos2d::ClippingRectangleNode *ret = cocos2d::ClippingRectangleNode::create();
    int num_ret = olua_push_object(L, ret, "cc.ClippingRectangleNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingRectangleNode_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::ClippingRectangleNode *create()
        return _olua_fun_cocos2d_ClippingRectangleNode_create$2(L);
    }

    if (num_args == 1) {
        // if ((olua_is_object(L, 1, "cc.Rect"))) {
            // static cocos2d::ClippingRectangleNode *create(const cocos2d::Rect &clippingRegion)
            return _olua_fun_cocos2d_ClippingRectangleNode_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ClippingRectangleNode::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_ClippingRectangleNode_getClippingRegion(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingRectangleNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ClippingRectangleNode");

    // const cocos2d::Rect &getClippingRegion()
    const cocos2d::Rect &ret = self->getClippingRegion();
    int num_ret = olua_push_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingRectangleNode_isClippingEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingRectangleNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ClippingRectangleNode");

    // bool isClippingEnabled()
    bool ret = self->isClippingEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ClippingRectangleNode_setClippingEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingRectangleNode *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_object(L, 1, &self, "cc.ClippingRectangleNode");
    olua_check_bool(L, 2, &arg1);

    // void setClippingEnabled(bool enabled)
    self->setClippingEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ClippingRectangleNode_setClippingRegion(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ClippingRectangleNode *self = nullptr;
    cocos2d::Rect *arg1;       /** clippingRegion */

    olua_to_object(L, 1, &self, "cc.ClippingRectangleNode");
    olua_check_object(L, 2, &arg1, "cc.Rect");

    // void setClippingRegion(const cocos2d::Rect &clippingRegion)
    self->setClippingRegion(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_ClippingRectangleNode(lua_State *L)
{
    oluacls_class<cocos2d::ClippingRectangleNode, cocos2d::Node>(L, "cc.ClippingRectangleNode");
    oluacls_func(L, "create", _olua_fun_cocos2d_ClippingRectangleNode_create);
    oluacls_func(L, "getClippingRegion", _olua_fun_cocos2d_ClippingRectangleNode_getClippingRegion);
    oluacls_func(L, "isClippingEnabled", _olua_fun_cocos2d_ClippingRectangleNode_isClippingEnabled);
    oluacls_func(L, "setClippingEnabled", _olua_fun_cocos2d_ClippingRectangleNode_setClippingEnabled);
    oluacls_func(L, "setClippingRegion", _olua_fun_cocos2d_ClippingRectangleNode_setClippingRegion);
    oluacls_prop(L, "clippingEnabled", _olua_fun_cocos2d_ClippingRectangleNode_isClippingEnabled, _olua_fun_cocos2d_ClippingRectangleNode_setClippingEnabled);
    oluacls_prop(L, "clippingRegion", _olua_fun_cocos2d_ClippingRectangleNode_getClippingRegion, _olua_fun_cocos2d_ClippingRectangleNode_setClippingRegion);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ClippingRectangleNode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ClippingRectangleNode")) {
        luaL_error(L, "class not found: cocos2d::ClippingRectangleNode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_RenderTexture_begin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderTexture");

    // void begin()
    self->begin();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_beginVisit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *arg1 = nullptr;       /** rt */

    olua_check_object(L, 1, &arg1, "cc.RenderTexture");

    // @extend(cocos2d::RenderTextureExtend) static void beginVisit(cocos2d::RenderTexture *rt)
    cocos2d::RenderTextureExtend::beginVisit(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_beginWithClear$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    float arg1 = 0;       /** r */
    float arg2 = 0;       /** g */
    float arg3 = 0;       /** b */
    float arg4 = 0;       /** a */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void beginWithClear(float r, float g, float b, float a)
    self->beginWithClear(arg1, arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_beginWithClear$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    float arg1 = 0;       /** r */
    float arg2 = 0;       /** g */
    float arg3 = 0;       /** b */
    float arg4 = 0;       /** a */
    float arg5 = 0;       /** depthValue */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // void beginWithClear(float r, float g, float b, float a, float depthValue)
    self->beginWithClear(arg1, arg2, arg3, arg4, arg5);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_beginWithClear$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    float arg1 = 0;       /** r */
    float arg2 = 0;       /** g */
    float arg3 = 0;       /** b */
    float arg4 = 0;       /** a */
    float arg5 = 0;       /** depthValue */
    int arg6 = 0;       /** stencilValue */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);
    olua_check_integer(L, 7, &arg6);

    // void beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue)
    self->beginWithClear(arg1, arg2, arg3, arg4, arg5, arg6);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_beginWithClear(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 5) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_number(L, 5))) {
            // void beginWithClear(float r, float g, float b, float a)
            return _olua_fun_cocos2d_RenderTexture_beginWithClear$1(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_number(L, 5)) && (olua_is_number(L, 6))) {
            // void beginWithClear(float r, float g, float b, float a, float depthValue)
            return _olua_fun_cocos2d_RenderTexture_beginWithClear$2(L);
        // }
    }

    if (num_args == 7) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_number(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4)) && (olua_is_number(L, 5)) && (olua_is_number(L, 6)) && (olua_is_integer(L, 7))) {
            // void beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue)
            return _olua_fun_cocos2d_RenderTexture_beginWithClear$3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RenderTexture::beginWithClear' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_clear(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    float arg1 = 0;       /** r */
    float arg2 = 0;       /** g */
    float arg3 = 0;       /** b */
    float arg4 = 0;       /** a */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // void clear(float r, float g, float b, float a)
    self->clear(arg1, arg2, arg3, arg4);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_clearDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    float arg1 = 0;       /** depthValue */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_number(L, 2, &arg1);

    // void clearDepth(float depthValue)
    self->clearDepth(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_clearStencil(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    int arg1 = 0;       /** stencilValue */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_integer(L, 2, &arg1);

    // void clearStencil(int stencilValue)
    self->clearStencil(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_create$1(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** w */
    int arg2 = 0;       /** h */
    cocos2d::backend::PixelFormat arg3 = (cocos2d::backend::PixelFormat)0;       /** format */
    cocos2d::backend::PixelFormat arg4 = (cocos2d::backend::PixelFormat)0;       /** depthStencilFormat */

    olua_check_integer(L, 1, &arg1);
    olua_check_integer(L, 2, &arg2);
    olua_check_enum(L, 3, &arg3);
    olua_check_enum(L, 4, &arg4);

    // static cocos2d::RenderTexture *create(int w, int h, cocos2d::backend::PixelFormat format, cocos2d::backend::PixelFormat depthStencilFormat)
    cocos2d::RenderTexture *ret = cocos2d::RenderTexture::create(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_object(L, ret, "cc.RenderTexture");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_create$2(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** w */
    int arg2 = 0;       /** h */
    cocos2d::backend::PixelFormat arg3 = (cocos2d::backend::PixelFormat)0;       /** format */

    olua_check_integer(L, 1, &arg1);
    olua_check_integer(L, 2, &arg2);
    olua_check_enum(L, 3, &arg3);

    // static cocos2d::RenderTexture *create(int w, int h, cocos2d::backend::PixelFormat format)
    cocos2d::RenderTexture *ret = cocos2d::RenderTexture::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.RenderTexture");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_create$3(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** w */
    int arg2 = 0;       /** h */

    olua_check_integer(L, 1, &arg1);
    olua_check_integer(L, 2, &arg2);

    // static cocos2d::RenderTexture *create(int w, int h)
    cocos2d::RenderTexture *ret = cocos2d::RenderTexture::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.RenderTexture");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_integer(L, 1)) && (olua_is_integer(L, 2))) {
            // static cocos2d::RenderTexture *create(int w, int h)
            return _olua_fun_cocos2d_RenderTexture_create$3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_integer(L, 1)) && (olua_is_integer(L, 2)) && (olua_is_enum(L, 3))) {
            // static cocos2d::RenderTexture *create(int w, int h, cocos2d::backend::PixelFormat format)
            return _olua_fun_cocos2d_RenderTexture_create$2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_integer(L, 1)) && (olua_is_integer(L, 2)) && (olua_is_enum(L, 3)) && (olua_is_enum(L, 4))) {
            // static cocos2d::RenderTexture *create(int w, int h, cocos2d::backend::PixelFormat format, cocos2d::backend::PixelFormat depthStencilFormat)
            return _olua_fun_cocos2d_RenderTexture_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RenderTexture::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_endVisit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *arg1 = nullptr;       /** rt */

    olua_check_object(L, 1, &arg1, "cc.RenderTexture");

    // @extend(cocos2d::RenderTextureExtend) static void endVisit(cocos2d::RenderTexture *rt)
    cocos2d::RenderTextureExtend::endVisit(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_end_(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderTexture");

    // void end()
    self->end();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_getClearColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderTexture");

    // const cocos2d::Color4F &getClearColor()
    const cocos2d::Color4F &ret = self->getClearColor();
    int num_ret = olua_push_cocos2d_Color4F(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_getClearDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderTexture");

    // float getClearDepth()
    float ret = self->getClearDepth();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_getClearFlags(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderTexture");

    // cocos2d::ClearFlag getClearFlags()
    cocos2d::ClearFlag ret = self->getClearFlags();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_getClearStencil(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderTexture");

    // int getClearStencil()
    int ret = self->getClearStencil();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_getSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderTexture");

    // cocos2d::Sprite *getSprite()
    cocos2d::Sprite *ret = self->getSprite();
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_initWithWidthAndHeight$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    int arg1 = 0;       /** w */
    int arg2 = 0;       /** h */
    cocos2d::backend::PixelFormat arg3 = (cocos2d::backend::PixelFormat)0;       /** format */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_integer(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);
    olua_check_enum(L, 4, &arg3);

    // bool initWithWidthAndHeight(int w, int h, cocos2d::backend::PixelFormat format)
    bool ret = self->initWithWidthAndHeight(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_initWithWidthAndHeight$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    int arg1 = 0;       /** w */
    int arg2 = 0;       /** h */
    cocos2d::backend::PixelFormat arg3 = (cocos2d::backend::PixelFormat)0;       /** format */
    cocos2d::backend::PixelFormat arg4 = (cocos2d::backend::PixelFormat)0;       /** depthStencilFormat */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_integer(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);
    olua_check_enum(L, 4, &arg3);
    olua_check_enum(L, 5, &arg4);

    // bool initWithWidthAndHeight(int w, int h, cocos2d::backend::PixelFormat format, cocos2d::backend::PixelFormat depthStencilFormat)
    bool ret = self->initWithWidthAndHeight(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_initWithWidthAndHeight(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_integer(L, 2)) && (olua_is_integer(L, 3)) && (olua_is_enum(L, 4))) {
            // bool initWithWidthAndHeight(int w, int h, cocos2d::backend::PixelFormat format)
            return _olua_fun_cocos2d_RenderTexture_initWithWidthAndHeight$1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_integer(L, 2)) && (olua_is_integer(L, 3)) && (olua_is_enum(L, 4)) && (olua_is_enum(L, 5))) {
            // bool initWithWidthAndHeight(int w, int h, cocos2d::backend::PixelFormat format, cocos2d::backend::PixelFormat depthStencilFormat)
            return _olua_fun_cocos2d_RenderTexture_initWithWidthAndHeight$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RenderTexture::initWithWidthAndHeight' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_isAutoDraw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;

    olua_to_object(L, 1, &self, "cc.RenderTexture");

    // bool isAutoDraw()
    bool ret = self->isAutoDraw();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_listenToBackground(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    cocos2d::EventCustom *arg1 = nullptr;       /** event */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_object(L, 2, &arg1, "cc.EventCustom");

    // void listenToBackground(cocos2d::EventCustom *event)
    self->listenToBackground(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_listenToForeground(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    cocos2d::EventCustom *arg1 = nullptr;       /** event */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_object(L, 2, &arg1, "cc.EventCustom");

    // void listenToForeground(cocos2d::EventCustom *event)
    self->listenToForeground(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::RenderTexture()
    cocos2d::RenderTexture *ret = new cocos2d::RenderTexture();
    int num_ret = olua_push_object(L, ret, "cc.RenderTexture");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_newImage$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::function<void (cocos2d::Image *)> arg1;       /** imageCallback */
    bool arg2 = false;       /** flipImage */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_callback(L, 2, &arg1, "std.function");
    olua_check_bool(L, 3, &arg2);

    void *cb_store = (void *)self;
    std::string cb_tag = "newImage";
    std::string cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Image *cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_object(L, cb_arg1, "cc.Image");

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void newImage(std::function<void (cocos2d::Image *)> imageCallback, @optional bool flipImage)
    self->newImage(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_newImage$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::function<void (cocos2d::Image *)> arg1;       /** imageCallback */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_callback(L, 2, &arg1, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "newImage";
    std::string cb_name = olua_setcallback(L, cb_store, 2, cb_tag.c_str(), OLUA_TAG_NEW);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg1 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::Image *cb_arg1) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_object(L, cb_arg1, "cc.Image");

            olua_callback(L, cb_store, cb_name.c_str(), 1);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // void newImage(std::function<void (cocos2d::Image *)> imageCallback)
    self->newImage(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_newImage(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_callback(L, 2, "std.function"))) {
            // void newImage(std::function<void (cocos2d::Image *)> imageCallback)
            return _olua_fun_cocos2d_RenderTexture_newImage$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_callback(L, 2, "std.function")) && (olua_is_bool(L, 3))) {
            // void newImage(std::function<void (cocos2d::Image *)> imageCallback, @optional bool flipImage)
            return _olua_fun_cocos2d_RenderTexture_newImage$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RenderTexture::newImage' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_saveToFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    bool arg2 = false;       /** isRGBA */
    std::function<void (cocos2d::RenderTexture *, const std::string &)> arg3;       /** callback */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);
    olua_check_callback(L, 4, &arg3, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "saveToFile";
    std::string cb_name;
    if (olua_isfunction(L, 4)) {
        cb_name = olua_setcallback(L, cb_store, 4, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg3 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::RenderTexture *cb_arg1, const std::string &cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                olua_push_object(L, cb_arg1, "cc.RenderTexture");
                olua_push_string(L, cb_arg2);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg3 = nullptr;
    }

    // bool saveToFile(const std::string &filename, @optional bool isRGBA, @optional std::function<void (cocos2d::RenderTexture *, const std::string &)> callback)
    bool ret = self->saveToFile(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_saveToFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_string(L, 2, &arg1);

    // bool saveToFile(const std::string &filename)
    bool ret = self->saveToFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_saveToFile$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    bool arg2 = false;       /** isRGBA */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // bool saveToFile(const std::string &filename, @optional bool isRGBA)
    bool ret = self->saveToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_saveToFile$4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::Image::Format arg2 = (cocos2d::Image::Format)0;       /** format */
    bool arg3 = false;       /** isRGBA */
    std::function<void (cocos2d::RenderTexture *, const std::string &)> arg4;       /** callback */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_string(L, 2, &arg1);
    olua_check_enum(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);
    olua_check_callback(L, 5, &arg4, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "saveToFile";
    std::string cb_name;
    if (olua_isfunction(L, 5)) {
        cb_name = olua_setcallback(L, cb_store, 5, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg4 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::RenderTexture *cb_arg1, const std::string &cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                olua_push_object(L, cb_arg1, "cc.RenderTexture");
                olua_push_string(L, cb_arg2);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg4 = nullptr;
    }

    // bool saveToFile(const std::string &filename, cocos2d::Image::Format format, @optional bool isRGBA, @optional std::function<void (cocos2d::RenderTexture *, const std::string &)> callback)
    bool ret = self->saveToFile(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_saveToFile$5(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::Image::Format arg2 = (cocos2d::Image::Format)0;       /** format */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_string(L, 2, &arg1);
    olua_check_enum(L, 3, &arg2);

    // bool saveToFile(const std::string &filename, cocos2d::Image::Format format)
    bool ret = self->saveToFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_saveToFile$6(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::Image::Format arg2 = (cocos2d::Image::Format)0;       /** format */
    bool arg3 = false;       /** isRGBA */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_string(L, 2, &arg1);
    olua_check_enum(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);

    // bool saveToFile(const std::string &filename, cocos2d::Image::Format format, @optional bool isRGBA)
    bool ret = self->saveToFile(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_saveToFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_string(L, 2))) {
            // bool saveToFile(const std::string &filename)
            return _olua_fun_cocos2d_RenderTexture_saveToFile$2(L);
        // }
    }

    if (num_args == 3) {
        if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_string(L, 2)) && (olua_is_bool(L, 3))) {
            // bool saveToFile(const std::string &filename, @optional bool isRGBA)
            return _olua_fun_cocos2d_RenderTexture_saveToFile$3(L);
        }

        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_string(L, 2)) && (olua_is_enum(L, 3))) {
            // bool saveToFile(const std::string &filename, cocos2d::Image::Format format)
            return _olua_fun_cocos2d_RenderTexture_saveToFile$5(L);
        // }
    }

    if (num_args == 4) {
        if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_string(L, 2)) && (olua_is_bool(L, 3)) && (olua_is_callback(L, 4, "std.function"))) {
            // bool saveToFile(const std::string &filename, @optional bool isRGBA, @optional std::function<void (cocos2d::RenderTexture *, const std::string &)> callback)
            return _olua_fun_cocos2d_RenderTexture_saveToFile$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_string(L, 2)) && (olua_is_enum(L, 3)) && (olua_is_bool(L, 4))) {
            // bool saveToFile(const std::string &filename, cocos2d::Image::Format format, @optional bool isRGBA)
            return _olua_fun_cocos2d_RenderTexture_saveToFile$6(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_string(L, 2)) && (olua_is_enum(L, 3)) && (olua_is_bool(L, 4)) && (olua_is_callback(L, 5, "std.function"))) {
            // bool saveToFile(const std::string &filename, cocos2d::Image::Format format, @optional bool isRGBA, @optional std::function<void (cocos2d::RenderTexture *, const std::string &)> callback)
            return _olua_fun_cocos2d_RenderTexture_saveToFile$4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RenderTexture::saveToFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_saveToFileAsNonPMA$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    bool arg2 = false;       /** isRGBA */
    std::function<void (cocos2d::RenderTexture *, const std::string &)> arg3;       /** callback */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);
    olua_check_callback(L, 4, &arg3, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "saveToFile";
    std::string cb_name;
    if (olua_isfunction(L, 4)) {
        cb_name = olua_setcallback(L, cb_store, 4, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg3 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::RenderTexture *cb_arg1, const std::string &cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                olua_push_object(L, cb_arg1, "cc.RenderTexture");
                olua_push_string(L, cb_arg2);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg3 = nullptr;
    }

    // bool saveToFileAsNonPMA(const std::string &filename, @optional bool isRGBA, @optional std::function<void (cocos2d::RenderTexture *, const std::string &)> callback)
    bool ret = self->saveToFileAsNonPMA(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_saveToFileAsNonPMA$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_string(L, 2, &arg1);

    // bool saveToFileAsNonPMA(const std::string &filename)
    bool ret = self->saveToFileAsNonPMA(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_saveToFileAsNonPMA$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** filename */
    bool arg2 = false;       /** isRGBA */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_string(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // bool saveToFileAsNonPMA(const std::string &filename, @optional bool isRGBA)
    bool ret = self->saveToFileAsNonPMA(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_saveToFileAsNonPMA$4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    std::string arg1;       /** fileName */
    cocos2d::Image::Format arg2 = (cocos2d::Image::Format)0;       /** format */
    bool arg3 = false;       /** isRGBA */
    std::function<void (cocos2d::RenderTexture *, const std::string &)> arg4;       /** callback */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_string(L, 2, &arg1);
    olua_check_enum(L, 3, &arg2);
    olua_check_bool(L, 4, &arg3);
    olua_check_callback(L, 5, &arg4, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "saveToFile";
    std::string cb_name = olua_setcallback(L, cb_store, 5, cb_tag.c_str(), OLUA_TAG_REPLACE);
    olua_Context cb_ctx = olua_context(L);
    // lua_State *ML = olua_mainthread(L);
    arg4 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::RenderTexture *cb_arg1, const std::string &cb_arg2) {
        lua_State *L = olua_mainthread(NULL);
        olua_checkhostthread();

        if (olua_contextequal(L, cb_ctx)) {
            int top = lua_gettop(L);
            olua_push_object(L, cb_arg1, "cc.RenderTexture");
            olua_push_string(L, cb_arg2);

            olua_callback(L, cb_store, cb_name.c_str(), 2);

            olua_removecallback(L, cb_store, cb_name.c_str(), OLUA_TAG_WHOLE);

            lua_settop(L, top);
        }
    };

    // bool saveToFileAsNonPMA(const std::string &fileName, cocos2d::Image::Format format, bool isRGBA, std::function<void (cocos2d::RenderTexture *, const std::string &)> callback)
    bool ret = self->saveToFileAsNonPMA(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_RenderTexture_saveToFileAsNonPMA(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_string(L, 2))) {
            // bool saveToFileAsNonPMA(const std::string &filename)
            return _olua_fun_cocos2d_RenderTexture_saveToFileAsNonPMA$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_string(L, 2)) && (olua_is_bool(L, 3))) {
            // bool saveToFileAsNonPMA(const std::string &filename, @optional bool isRGBA)
            return _olua_fun_cocos2d_RenderTexture_saveToFileAsNonPMA$3(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_string(L, 2)) && (olua_is_bool(L, 3)) && (olua_is_callback(L, 4, "std.function"))) {
            // bool saveToFileAsNonPMA(const std::string &filename, @optional bool isRGBA, @optional std::function<void (cocos2d::RenderTexture *, const std::string &)> callback)
            return _olua_fun_cocos2d_RenderTexture_saveToFileAsNonPMA$1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_object(L, 1, "cc.RenderTexture")) && (olua_is_string(L, 2)) && (olua_is_enum(L, 3)) && (olua_is_bool(L, 4)) && (olua_is_callback(L, 5, "std.function"))) {
            // bool saveToFileAsNonPMA(const std::string &fileName, cocos2d::Image::Format format, bool isRGBA, std::function<void (cocos2d::RenderTexture *, const std::string &)> callback)
            return _olua_fun_cocos2d_RenderTexture_saveToFileAsNonPMA$4(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::RenderTexture::saveToFileAsNonPMA' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_setAutoDraw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    bool arg1 = false;       /** isAutoDraw */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_bool(L, 2, &arg1);

    // void setAutoDraw(bool isAutoDraw)
    self->setAutoDraw(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_setClearColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    cocos2d::Color4F arg1;       /** clearColor */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setClearColor(const cocos2d::Color4F &clearColor)
    self->setClearColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_setClearDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    float arg1 = 0;       /** clearDepth */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_number(L, 2, &arg1);

    // void setClearDepth(float clearDepth)
    self->setClearDepth(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_setClearFlags(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    cocos2d::ClearFlag arg1 = (cocos2d::ClearFlag)0;       /** clearFlags */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_enum(L, 2, &arg1);

    // void setClearFlags(cocos2d::ClearFlag clearFlags)
    self->setClearFlags(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_setClearStencil(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    int arg1 = 0;       /** clearStencil */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_integer(L, 2, &arg1);

    // void setClearStencil(int clearStencil)
    self->setClearStencil(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_setKeepMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    bool arg1 = false;       /** keepMatrix */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_bool(L, 2, &arg1);

    // void setKeepMatrix(bool keepMatrix)
    self->setKeepMatrix(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_setSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_object(L, 2, &arg1, "cc.Sprite");

    // void setSprite(cocos2d::Sprite *sprite)
    self->setSprite(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_RenderTexture_setVirtualViewport(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::RenderTexture *self = nullptr;
    cocos2d::Vec2 *arg1;       /** rtBegin */
    cocos2d::Rect *arg2;       /** fullRect */
    cocos2d::Rect *arg3;       /** fullViewport */

    olua_to_object(L, 1, &self, "cc.RenderTexture");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_object(L, 3, &arg2, "cc.Rect");
    olua_check_object(L, 4, &arg3, "cc.Rect");

    // void setVirtualViewport(const cocos2d::Vec2 &rtBegin, const cocos2d::Rect &fullRect, const cocos2d::Rect &fullViewport)
    self->setVirtualViewport(*arg1, *arg2, *arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_RenderTexture(lua_State *L)
{
    oluacls_class<cocos2d::RenderTexture, cocos2d::Node>(L, "cc.RenderTexture");
    oluacls_func(L, "begin", _olua_fun_cocos2d_RenderTexture_begin);
    oluacls_func(L, "beginVisit", _olua_fun_cocos2d_RenderTexture_beginVisit);
    oluacls_func(L, "beginWithClear", _olua_fun_cocos2d_RenderTexture_beginWithClear);
    oluacls_func(L, "clear", _olua_fun_cocos2d_RenderTexture_clear);
    oluacls_func(L, "clearDepth", _olua_fun_cocos2d_RenderTexture_clearDepth);
    oluacls_func(L, "clearStencil", _olua_fun_cocos2d_RenderTexture_clearStencil);
    oluacls_func(L, "create", _olua_fun_cocos2d_RenderTexture_create);
    oluacls_func(L, "endVisit", _olua_fun_cocos2d_RenderTexture_endVisit);
    oluacls_func(L, "end_", _olua_fun_cocos2d_RenderTexture_end_);
    oluacls_func(L, "getClearColor", _olua_fun_cocos2d_RenderTexture_getClearColor);
    oluacls_func(L, "getClearDepth", _olua_fun_cocos2d_RenderTexture_getClearDepth);
    oluacls_func(L, "getClearFlags", _olua_fun_cocos2d_RenderTexture_getClearFlags);
    oluacls_func(L, "getClearStencil", _olua_fun_cocos2d_RenderTexture_getClearStencil);
    oluacls_func(L, "getSprite", _olua_fun_cocos2d_RenderTexture_getSprite);
    oluacls_func(L, "initWithWidthAndHeight", _olua_fun_cocos2d_RenderTexture_initWithWidthAndHeight);
    oluacls_func(L, "isAutoDraw", _olua_fun_cocos2d_RenderTexture_isAutoDraw);
    oluacls_func(L, "listenToBackground", _olua_fun_cocos2d_RenderTexture_listenToBackground);
    oluacls_func(L, "listenToForeground", _olua_fun_cocos2d_RenderTexture_listenToForeground);
    oluacls_func(L, "new", _olua_fun_cocos2d_RenderTexture_new);
    oluacls_func(L, "newImage", _olua_fun_cocos2d_RenderTexture_newImage);
    oluacls_func(L, "saveToFile", _olua_fun_cocos2d_RenderTexture_saveToFile);
    oluacls_func(L, "saveToFileAsNonPMA", _olua_fun_cocos2d_RenderTexture_saveToFileAsNonPMA);
    oluacls_func(L, "setAutoDraw", _olua_fun_cocos2d_RenderTexture_setAutoDraw);
    oluacls_func(L, "setClearColor", _olua_fun_cocos2d_RenderTexture_setClearColor);
    oluacls_func(L, "setClearDepth", _olua_fun_cocos2d_RenderTexture_setClearDepth);
    oluacls_func(L, "setClearFlags", _olua_fun_cocos2d_RenderTexture_setClearFlags);
    oluacls_func(L, "setClearStencil", _olua_fun_cocos2d_RenderTexture_setClearStencil);
    oluacls_func(L, "setKeepMatrix", _olua_fun_cocos2d_RenderTexture_setKeepMatrix);
    oluacls_func(L, "setSprite", _olua_fun_cocos2d_RenderTexture_setSprite);
    oluacls_func(L, "setVirtualViewport", _olua_fun_cocos2d_RenderTexture_setVirtualViewport);
    oluacls_prop(L, "autoDraw", _olua_fun_cocos2d_RenderTexture_isAutoDraw, _olua_fun_cocos2d_RenderTexture_setAutoDraw);
    oluacls_prop(L, "clearColor", _olua_fun_cocos2d_RenderTexture_getClearColor, _olua_fun_cocos2d_RenderTexture_setClearColor);
    oluacls_prop(L, "clearFlags", _olua_fun_cocos2d_RenderTexture_getClearFlags, _olua_fun_cocos2d_RenderTexture_setClearFlags);
    oluacls_prop(L, "sprite", _olua_fun_cocos2d_RenderTexture_getSprite, _olua_fun_cocos2d_RenderTexture_setSprite);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_RenderTexture(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.RenderTexture")) {
        luaL_error(L, "class not found: cocos2d::RenderTexture");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_ProgressTimer_Type(lua_State *L)
{
    oluacls_class<cocos2d::ProgressTimer::Type>(L, "cc.ProgressTimer.Type");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "BAR", (lua_Integer)cocos2d::ProgressTimer::Type::BAR);
    oluacls_enum(L, "RADIAL", (lua_Integer)cocos2d::ProgressTimer::Type::RADIAL);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ProgressTimer_Type(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ProgressTimer.Type")) {
        luaL_error(L, "class not found: cocos2d::ProgressTimer::Type");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ProgressTimer_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *arg1 = nullptr;       /** sp */

    olua_check_object(L, 1, &arg1, "cc.Sprite");

    // static cocos2d::ProgressTimer *create(cocos2d::Sprite *sp)
    cocos2d::ProgressTimer *ret = cocos2d::ProgressTimer::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ProgressTimer");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ProgressTimer_getBarChangeRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ProgressTimer");

    // cocos2d::Vec2 getBarChangeRate()
    cocos2d::Vec2 ret = self->getBarChangeRate();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ProgressTimer_getMidpoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ProgressTimer");

    // cocos2d::Vec2 getMidpoint()
    cocos2d::Vec2 ret = self->getMidpoint();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ProgressTimer_getPercentage(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ProgressTimer");

    // float getPercentage()
    float ret = self->getPercentage();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ProgressTimer_getSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ProgressTimer");

    // cocos2d::Sprite *getSprite()
    cocos2d::Sprite *ret = self->getSprite();
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ProgressTimer_getType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ProgressTimer");

    // cocos2d::ProgressTimer::Type getType()
    cocos2d::ProgressTimer::Type ret = self->getType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ProgressTimer_initWithSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sp */

    olua_to_object(L, 1, &self, "cc.ProgressTimer");
    olua_check_object(L, 2, &arg1, "cc.Sprite");

    // bool initWithSprite(cocos2d::Sprite *sp)
    bool ret = self->initWithSprite(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ProgressTimer_isReverseDirection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ProgressTimer");

    // bool isReverseDirection()
    bool ret = self->isReverseDirection();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ProgressTimer_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ProgressTimer()
    cocos2d::ProgressTimer *ret = new cocos2d::ProgressTimer();
    int num_ret = olua_push_object(L, ret, "cc.ProgressTimer");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ProgressTimer_setBarChangeRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    cocos2d::Vec2 *arg1;       /** barChangeRate */

    olua_to_object(L, 1, &self, "cc.ProgressTimer");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setBarChangeRate(const cocos2d::Vec2 &barChangeRate)
    self->setBarChangeRate(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProgressTimer_setMidpoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    cocos2d::Vec2 *arg1;       /** point */

    olua_to_object(L, 1, &self, "cc.ProgressTimer");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setMidpoint(const cocos2d::Vec2 &point)
    self->setMidpoint(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProgressTimer_setPercentage(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    float arg1 = 0;       /** percentage */

    olua_to_object(L, 1, &self, "cc.ProgressTimer");
    olua_check_number(L, 2, &arg1);

    // void setPercentage(float percentage)
    self->setPercentage(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProgressTimer_setReverseDirection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_object(L, 1, &self, "cc.ProgressTimer");
    olua_check_bool(L, 2, &arg1);

    // void setReverseDirection(bool value)
    self->setReverseDirection(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProgressTimer_setSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */

    olua_to_object(L, 1, &self, "cc.ProgressTimer");
    olua_check_object(L, 2, &arg1, "cc.Sprite");

    // void setSprite(cocos2d::Sprite *sprite)
    self->setSprite(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ProgressTimer_setType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ProgressTimer *self = nullptr;
    cocos2d::ProgressTimer::Type arg1 = (cocos2d::ProgressTimer::Type)0;       /** type */

    olua_to_object(L, 1, &self, "cc.ProgressTimer");
    olua_check_enum(L, 2, &arg1);

    // void setType(cocos2d::ProgressTimer::Type type)
    self->setType(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_ProgressTimer(lua_State *L)
{
    oluacls_class<cocos2d::ProgressTimer, cocos2d::Node>(L, "cc.ProgressTimer");
    oluacls_func(L, "create", _olua_fun_cocos2d_ProgressTimer_create);
    oluacls_func(L, "getBarChangeRate", _olua_fun_cocos2d_ProgressTimer_getBarChangeRate);
    oluacls_func(L, "getMidpoint", _olua_fun_cocos2d_ProgressTimer_getMidpoint);
    oluacls_func(L, "getPercentage", _olua_fun_cocos2d_ProgressTimer_getPercentage);
    oluacls_func(L, "getSprite", _olua_fun_cocos2d_ProgressTimer_getSprite);
    oluacls_func(L, "getType", _olua_fun_cocos2d_ProgressTimer_getType);
    oluacls_func(L, "initWithSprite", _olua_fun_cocos2d_ProgressTimer_initWithSprite);
    oluacls_func(L, "isReverseDirection", _olua_fun_cocos2d_ProgressTimer_isReverseDirection);
    oluacls_func(L, "new", _olua_fun_cocos2d_ProgressTimer_new);
    oluacls_func(L, "setBarChangeRate", _olua_fun_cocos2d_ProgressTimer_setBarChangeRate);
    oluacls_func(L, "setMidpoint", _olua_fun_cocos2d_ProgressTimer_setMidpoint);
    oluacls_func(L, "setPercentage", _olua_fun_cocos2d_ProgressTimer_setPercentage);
    oluacls_func(L, "setReverseDirection", _olua_fun_cocos2d_ProgressTimer_setReverseDirection);
    oluacls_func(L, "setSprite", _olua_fun_cocos2d_ProgressTimer_setSprite);
    oluacls_func(L, "setType", _olua_fun_cocos2d_ProgressTimer_setType);
    oluacls_prop(L, "barChangeRate", _olua_fun_cocos2d_ProgressTimer_getBarChangeRate, _olua_fun_cocos2d_ProgressTimer_setBarChangeRate);
    oluacls_prop(L, "midpoint", _olua_fun_cocos2d_ProgressTimer_getMidpoint, _olua_fun_cocos2d_ProgressTimer_setMidpoint);
    oluacls_prop(L, "percentage", _olua_fun_cocos2d_ProgressTimer_getPercentage, _olua_fun_cocos2d_ProgressTimer_setPercentage);
    oluacls_prop(L, "reverseDirection", _olua_fun_cocos2d_ProgressTimer_isReverseDirection, _olua_fun_cocos2d_ProgressTimer_setReverseDirection);
    oluacls_prop(L, "sprite", _olua_fun_cocos2d_ProgressTimer_getSprite, _olua_fun_cocos2d_ProgressTimer_setSprite);
    oluacls_prop(L, "type", _olua_fun_cocos2d_ProgressTimer_getType, _olua_fun_cocos2d_ProgressTimer_setType);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ProgressTimer(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ProgressTimer")) {
        luaL_error(L, "class not found: cocos2d::ProgressTimer");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_AnimationFrame_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.AnimationFrame");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.Clonable")) {
            olua_pushobj_as<cocos2d::Clonable>(L, 1, self, "as.cc.Clonable");
            break;
        }

        luaL_error(L, "'cocos2d::AnimationFrame' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_AnimationFrame_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AnimationFrame");

    // cocos2d::AnimationFrame *clone()
    cocos2d::AnimationFrame *ret = self->clone();
    int num_ret = olua_push_object(L, ret, "cc.AnimationFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AnimationFrame_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *arg1 = nullptr;       /** spriteFrame */
    float arg2 = 0;       /** delayUnits */
    cocos2d::ValueMap arg3;       /** userInfo */

    olua_check_object(L, 1, &arg1, "cc.SpriteFrame");
    olua_check_number(L, 2, &arg2);
    olua_check_cocos2d_ValueMap(L, 3, &arg3);

    // static cocos2d::AnimationFrame *create(cocos2d::SpriteFrame *spriteFrame, float delayUnits, const cocos2d::ValueMap &userInfo)
    cocos2d::AnimationFrame *ret = cocos2d::AnimationFrame::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.AnimationFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AnimationFrame_getDelayUnits(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AnimationFrame");

    // float getDelayUnits()
    float ret = self->getDelayUnits();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AnimationFrame_getSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AnimationFrame");

    // cocos2d::SpriteFrame *getSpriteFrame()
    cocos2d::SpriteFrame *ret = self->getSpriteFrame();
    int num_ret = olua_push_object(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AnimationFrame_getUserInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AnimationFrame");

    // const cocos2d::ValueMap &getUserInfo()
    const cocos2d::ValueMap &ret = self->getUserInfo();
    int num_ret = olua_push_cocos2d_ValueMap(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AnimationFrame_initWithSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** spriteFrame */
    float arg2 = 0;       /** delayUnits */
    cocos2d::ValueMap arg3;       /** userInfo */

    olua_to_object(L, 1, &self, "cc.AnimationFrame");
    olua_check_object(L, 2, &arg1, "cc.SpriteFrame");
    olua_check_number(L, 3, &arg2);
    olua_check_cocos2d_ValueMap(L, 4, &arg3);

    // bool initWithSpriteFrame(cocos2d::SpriteFrame *spriteFrame, float delayUnits, const cocos2d::ValueMap &userInfo)
    bool ret = self->initWithSpriteFrame(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AnimationFrame_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::AnimationFrame()
    cocos2d::AnimationFrame *ret = new cocos2d::AnimationFrame();
    int num_ret = olua_push_object(L, ret, "cc.AnimationFrame");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AnimationFrame_setDelayUnits(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;
    float arg1 = 0;       /** delayUnits */

    olua_to_object(L, 1, &self, "cc.AnimationFrame");
    olua_check_number(L, 2, &arg1);

    // void setDelayUnits(float delayUnits)
    self->setDelayUnits(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AnimationFrame_setSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** frame */

    olua_to_object(L, 1, &self, "cc.AnimationFrame");
    olua_check_object(L, 2, &arg1, "cc.SpriteFrame");

    // void setSpriteFrame(cocos2d::SpriteFrame *frame)
    self->setSpriteFrame(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AnimationFrame_setUserInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationFrame *self = nullptr;
    cocos2d::ValueMap arg1;       /** userInfo */

    olua_to_object(L, 1, &self, "cc.AnimationFrame");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setUserInfo(const cocos2d::ValueMap &userInfo)
    self->setUserInfo(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_AnimationFrame(lua_State *L)
{
    oluacls_class<cocos2d::AnimationFrame, cocos2d::Ref>(L, "cc.AnimationFrame");
    oluacls_func(L, "as", _olua_fun_cocos2d_AnimationFrame_as);
    oluacls_func(L, "clone", _olua_fun_cocos2d_AnimationFrame_clone);
    oluacls_func(L, "create", _olua_fun_cocos2d_AnimationFrame_create);
    oluacls_func(L, "getDelayUnits", _olua_fun_cocos2d_AnimationFrame_getDelayUnits);
    oluacls_func(L, "getSpriteFrame", _olua_fun_cocos2d_AnimationFrame_getSpriteFrame);
    oluacls_func(L, "getUserInfo", _olua_fun_cocos2d_AnimationFrame_getUserInfo);
    oluacls_func(L, "initWithSpriteFrame", _olua_fun_cocos2d_AnimationFrame_initWithSpriteFrame);
    oluacls_func(L, "new", _olua_fun_cocos2d_AnimationFrame_new);
    oluacls_func(L, "setDelayUnits", _olua_fun_cocos2d_AnimationFrame_setDelayUnits);
    oluacls_func(L, "setSpriteFrame", _olua_fun_cocos2d_AnimationFrame_setSpriteFrame);
    oluacls_func(L, "setUserInfo", _olua_fun_cocos2d_AnimationFrame_setUserInfo);
    oluacls_prop(L, "delayUnits", _olua_fun_cocos2d_AnimationFrame_getDelayUnits, _olua_fun_cocos2d_AnimationFrame_setDelayUnits);
    oluacls_prop(L, "spriteFrame", _olua_fun_cocos2d_AnimationFrame_getSpriteFrame, _olua_fun_cocos2d_AnimationFrame_setSpriteFrame);
    oluacls_prop(L, "userInfo", _olua_fun_cocos2d_AnimationFrame_getUserInfo, _olua_fun_cocos2d_AnimationFrame_setUserInfo);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_AnimationFrame(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.AnimationFrame")) {
        luaL_error(L, "class not found: cocos2d::AnimationFrame");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Animation_addSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** frame */

    olua_to_object(L, 1, &self, "cc.Animation");
    olua_check_object(L, 2, &arg1, "cc.SpriteFrame");

    // void addSpriteFrame(cocos2d::SpriteFrame *frame)
    self->addSpriteFrame(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Animation_addSpriteFrameWithFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.Animation");
    olua_check_string(L, 2, &arg1);

    // void addSpriteFrameWithFile(const std::string &filename)
    self->addSpriteFrameWithFile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Animation_addSpriteFrameWithTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** pobTexture */
    cocos2d::Rect *arg2;       /** rect */

    olua_to_object(L, 1, &self, "cc.Animation");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");
    olua_check_object(L, 3, &arg2, "cc.Rect");

    // void addSpriteFrameWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect)
    self->addSpriteFrameWithTexture(arg1, *arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Animation_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.Animation");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.Clonable")) {
            olua_pushobj_as<cocos2d::Clonable>(L, 1, self, "as.cc.Clonable");
            break;
        }

        luaL_error(L, "'cocos2d::Animation' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_Animation_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Animation");

    // cocos2d::Animation *clone()
    cocos2d::Animation *ret = self->clone();
    int num_ret = olua_push_object(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_create$1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Animation *create()
    cocos2d::Animation *ret = cocos2d::Animation::create();
    int num_ret = olua_push_object(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_create$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::AnimationFrame *> arg1;       /** arrayOfAnimationFrameNames */
    float arg2 = 0;       /** delayPerUnit */
    unsigned int arg3 = 0;       /** loops */

    olua_check_array<cocos2d::AnimationFrame *>(L, 1, arg1, [L](cocos2d::AnimationFrame **arg1) {
        olua_check_object(L, -1, arg1, "cc.AnimationFrame");
    });
    olua_check_number(L, 2, &arg2);
    olua_check_integer(L, 3, &arg3);

    // static cocos2d::Animation *create(const cocos2d::Vector<cocos2d::AnimationFrame *> &arrayOfAnimationFrameNames, float delayPerUnit, @optional unsigned int loops)
    cocos2d::Animation *ret = cocos2d::Animation::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_create$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::AnimationFrame *> arg1;       /** arrayOfAnimationFrameNames */
    float arg2 = 0;       /** delayPerUnit */

    olua_check_array<cocos2d::AnimationFrame *>(L, 1, arg1, [L](cocos2d::AnimationFrame **arg1) {
        olua_check_object(L, -1, arg1, "cc.AnimationFrame");
    });
    olua_check_number(L, 2, &arg2);

    // static cocos2d::Animation *create(const cocos2d::Vector<cocos2d::AnimationFrame *> &arrayOfAnimationFrameNames, float delayPerUnit)
    cocos2d::Animation *ret = cocos2d::Animation::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::Animation *create()
        return _olua_fun_cocos2d_Animation_create$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_array(L, 1)) && (olua_is_number(L, 2))) {
            // static cocos2d::Animation *create(const cocos2d::Vector<cocos2d::AnimationFrame *> &arrayOfAnimationFrameNames, float delayPerUnit)
            return _olua_fun_cocos2d_Animation_create$3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_array(L, 1)) && (olua_is_number(L, 2)) && (olua_is_integer(L, 3))) {
            // static cocos2d::Animation *create(const cocos2d::Vector<cocos2d::AnimationFrame *> &arrayOfAnimationFrameNames, float delayPerUnit, @optional unsigned int loops)
            return _olua_fun_cocos2d_Animation_create$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Animation::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Animation_createWithSpriteFrames$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */
    float arg2 = 0;       /** delay */
    unsigned int arg3 = 0;       /** loops */

    olua_check_array<cocos2d::SpriteFrame *>(L, 1, arg1, [L](cocos2d::SpriteFrame **arg1) {
        olua_check_object(L, -1, arg1, "cc.SpriteFrame");
    });
    olua_check_number(L, 2, &arg2);
    olua_check_integer(L, 3, &arg3);

    // static cocos2d::Animation *createWithSpriteFrames(const cocos2d::Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
    cocos2d::Animation *ret = cocos2d::Animation::createWithSpriteFrames(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_createWithSpriteFrames$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */

    olua_check_array<cocos2d::SpriteFrame *>(L, 1, arg1, [L](cocos2d::SpriteFrame **arg1) {
        olua_check_object(L, -1, arg1, "cc.SpriteFrame");
    });

    // static cocos2d::Animation *createWithSpriteFrames(const cocos2d::Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames)
    cocos2d::Animation *ret = cocos2d::Animation::createWithSpriteFrames(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_createWithSpriteFrames$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */
    float arg2 = 0;       /** delay */

    olua_check_array<cocos2d::SpriteFrame *>(L, 1, arg1, [L](cocos2d::SpriteFrame **arg1) {
        olua_check_object(L, -1, arg1, "cc.SpriteFrame");
    });
    olua_check_number(L, 2, &arg2);

    // static cocos2d::Animation *createWithSpriteFrames(const cocos2d::Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay)
    cocos2d::Animation *ret = cocos2d::Animation::createWithSpriteFrames(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_createWithSpriteFrames(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_array(L, 1))) {
            // static cocos2d::Animation *createWithSpriteFrames(const cocos2d::Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames)
            return _olua_fun_cocos2d_Animation_createWithSpriteFrames$2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_array(L, 1)) && (olua_is_number(L, 2))) {
            // static cocos2d::Animation *createWithSpriteFrames(const cocos2d::Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay)
            return _olua_fun_cocos2d_Animation_createWithSpriteFrames$3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_array(L, 1)) && (olua_is_number(L, 2)) && (olua_is_integer(L, 3))) {
            // static cocos2d::Animation *createWithSpriteFrames(const cocos2d::Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
            return _olua_fun_cocos2d_Animation_createWithSpriteFrames$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Animation::createWithSpriteFrames' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Animation_getDelayPerUnit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Animation");

    // float getDelayPerUnit()
    float ret = self->getDelayPerUnit();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_getDuration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Animation");

    // float getDuration()
    float ret = self->getDuration();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_getFrames(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Animation");

    // const cocos2d::Vector<cocos2d::AnimationFrame *> &getFrames()
    const cocos2d::Vector<cocos2d::AnimationFrame *> &ret = self->getFrames();
    int num_ret = olua_push_array<cocos2d::AnimationFrame *>(L, ret, [L](cocos2d::AnimationFrame *arg1) {
        olua_push_object(L, arg1, "cc.AnimationFrame");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_getLoops(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Animation");

    // unsigned int getLoops()
    unsigned int ret = self->getLoops();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_getRestoreOriginalFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Animation");

    // bool getRestoreOriginalFrame()
    bool ret = self->getRestoreOriginalFrame();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_getTotalDelayUnits(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Animation");

    // float getTotalDelayUnits()
    float ret = self->getTotalDelayUnits();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Animation");

    // bool init()
    bool ret = self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_initWithAnimationFrames(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::Vector<cocos2d::AnimationFrame *> arg1;       /** arrayOfAnimationFrameNames */
    float arg2 = 0;       /** delayPerUnit */
    unsigned int arg3 = 0;       /** loops */

    olua_to_object(L, 1, &self, "cc.Animation");
    olua_check_array<cocos2d::AnimationFrame *>(L, 2, arg1, [L](cocos2d::AnimationFrame **arg1) {
        olua_check_object(L, -1, arg1, "cc.AnimationFrame");
    });
    olua_check_number(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // bool initWithAnimationFrames(const cocos2d::Vector<cocos2d::AnimationFrame *> &arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops)
    bool ret = self->initWithAnimationFrames(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_initWithSpriteFrames$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */
    float arg2 = 0;       /** delay */
    unsigned int arg3 = 0;       /** loops */

    olua_to_object(L, 1, &self, "cc.Animation");
    olua_check_array<cocos2d::SpriteFrame *>(L, 2, arg1, [L](cocos2d::SpriteFrame **arg1) {
        olua_check_object(L, -1, arg1, "cc.SpriteFrame");
    });
    olua_check_number(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // bool initWithSpriteFrames(const cocos2d::Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
    bool ret = self->initWithSpriteFrames(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_initWithSpriteFrames$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */

    olua_to_object(L, 1, &self, "cc.Animation");
    olua_check_array<cocos2d::SpriteFrame *>(L, 2, arg1, [L](cocos2d::SpriteFrame **arg1) {
        olua_check_object(L, -1, arg1, "cc.SpriteFrame");
    });

    // bool initWithSpriteFrames(const cocos2d::Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames)
    bool ret = self->initWithSpriteFrames(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_initWithSpriteFrames$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::Vector<cocos2d::SpriteFrame *> arg1;       /** arrayOfSpriteFrameNames */
    float arg2 = 0;       /** delay */

    olua_to_object(L, 1, &self, "cc.Animation");
    olua_check_array<cocos2d::SpriteFrame *>(L, 2, arg1, [L](cocos2d::SpriteFrame **arg1) {
        olua_check_object(L, -1, arg1, "cc.SpriteFrame");
    });
    olua_check_number(L, 3, &arg2);

    // bool initWithSpriteFrames(const cocos2d::Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay)
    bool ret = self->initWithSpriteFrames(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_initWithSpriteFrames(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Animation")) && (olua_is_array(L, 2))) {
            // bool initWithSpriteFrames(const cocos2d::Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames)
            return _olua_fun_cocos2d_Animation_initWithSpriteFrames$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Animation")) && (olua_is_array(L, 2)) && (olua_is_number(L, 3))) {
            // bool initWithSpriteFrames(const cocos2d::Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay)
            return _olua_fun_cocos2d_Animation_initWithSpriteFrames$3(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Animation")) && (olua_is_array(L, 2)) && (olua_is_number(L, 3)) && (olua_is_integer(L, 4))) {
            // bool initWithSpriteFrames(const cocos2d::Vector<cocos2d::SpriteFrame *> &arrayOfSpriteFrameNames, @optional float delay, @optional unsigned int loops)
            return _olua_fun_cocos2d_Animation_initWithSpriteFrames$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Animation::initWithSpriteFrames' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Animation_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Animation()
    cocos2d::Animation *ret = new cocos2d::Animation();
    int num_ret = olua_push_object(L, ret, "cc.Animation");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Animation_setDelayPerUnit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    float arg1 = 0;       /** delayPerUnit */

    olua_to_object(L, 1, &self, "cc.Animation");
    olua_check_number(L, 2, &arg1);

    // void setDelayPerUnit(float delayPerUnit)
    self->setDelayPerUnit(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Animation_setFrames(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    cocos2d::Vector<cocos2d::AnimationFrame *> arg1;       /** frames */

    olua_to_object(L, 1, &self, "cc.Animation");
    olua_check_array<cocos2d::AnimationFrame *>(L, 2, arg1, [L](cocos2d::AnimationFrame **arg1) {
        olua_check_object(L, -1, arg1, "cc.AnimationFrame");
    });

    // void setFrames(const cocos2d::Vector<cocos2d::AnimationFrame *> &frames)
    self->setFrames(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Animation_setLoops(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    unsigned int arg1 = 0;       /** loops */

    olua_to_object(L, 1, &self, "cc.Animation");
    olua_check_integer(L, 2, &arg1);

    // void setLoops(unsigned int loops)
    self->setLoops(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Animation_setRestoreOriginalFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Animation *self = nullptr;
    bool arg1 = false;       /** restoreOriginalFrame */

    olua_to_object(L, 1, &self, "cc.Animation");
    olua_check_bool(L, 2, &arg1);

    // void setRestoreOriginalFrame(bool restoreOriginalFrame)
    self->setRestoreOriginalFrame(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Animation(lua_State *L)
{
    oluacls_class<cocos2d::Animation, cocos2d::Ref>(L, "cc.Animation");
    oluacls_func(L, "addSpriteFrame", _olua_fun_cocos2d_Animation_addSpriteFrame);
    oluacls_func(L, "addSpriteFrameWithFile", _olua_fun_cocos2d_Animation_addSpriteFrameWithFile);
    oluacls_func(L, "addSpriteFrameWithTexture", _olua_fun_cocos2d_Animation_addSpriteFrameWithTexture);
    oluacls_func(L, "as", _olua_fun_cocos2d_Animation_as);
    oluacls_func(L, "clone", _olua_fun_cocos2d_Animation_clone);
    oluacls_func(L, "create", _olua_fun_cocos2d_Animation_create);
    oluacls_func(L, "createWithSpriteFrames", _olua_fun_cocos2d_Animation_createWithSpriteFrames);
    oluacls_func(L, "getDelayPerUnit", _olua_fun_cocos2d_Animation_getDelayPerUnit);
    oluacls_func(L, "getDuration", _olua_fun_cocos2d_Animation_getDuration);
    oluacls_func(L, "getFrames", _olua_fun_cocos2d_Animation_getFrames);
    oluacls_func(L, "getLoops", _olua_fun_cocos2d_Animation_getLoops);
    oluacls_func(L, "getRestoreOriginalFrame", _olua_fun_cocos2d_Animation_getRestoreOriginalFrame);
    oluacls_func(L, "getTotalDelayUnits", _olua_fun_cocos2d_Animation_getTotalDelayUnits);
    oluacls_func(L, "init", _olua_fun_cocos2d_Animation_init);
    oluacls_func(L, "initWithAnimationFrames", _olua_fun_cocos2d_Animation_initWithAnimationFrames);
    oluacls_func(L, "initWithSpriteFrames", _olua_fun_cocos2d_Animation_initWithSpriteFrames);
    oluacls_func(L, "new", _olua_fun_cocos2d_Animation_new);
    oluacls_func(L, "setDelayPerUnit", _olua_fun_cocos2d_Animation_setDelayPerUnit);
    oluacls_func(L, "setFrames", _olua_fun_cocos2d_Animation_setFrames);
    oluacls_func(L, "setLoops", _olua_fun_cocos2d_Animation_setLoops);
    oluacls_func(L, "setRestoreOriginalFrame", _olua_fun_cocos2d_Animation_setRestoreOriginalFrame);
    oluacls_prop(L, "delayPerUnit", _olua_fun_cocos2d_Animation_getDelayPerUnit, _olua_fun_cocos2d_Animation_setDelayPerUnit);
    oluacls_prop(L, "duration", _olua_fun_cocos2d_Animation_getDuration, nullptr);
    oluacls_prop(L, "frames", _olua_fun_cocos2d_Animation_getFrames, _olua_fun_cocos2d_Animation_setFrames);
    oluacls_prop(L, "loops", _olua_fun_cocos2d_Animation_getLoops, _olua_fun_cocos2d_Animation_setLoops);
    oluacls_prop(L, "restoreOriginalFrame", _olua_fun_cocos2d_Animation_getRestoreOriginalFrame, _olua_fun_cocos2d_Animation_setRestoreOriginalFrame);
    oluacls_prop(L, "totalDelayUnits", _olua_fun_cocos2d_Animation_getTotalDelayUnits, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Animation(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Animation")) {
        luaL_error(L, "class not found: cocos2d::Animation");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_SpriteFrame_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.Clonable")) {
            olua_pushobj_as<cocos2d::Clonable>(L, 1, self, "as.cc.Clonable");
            break;
        }

        luaL_error(L, "'cocos2d::SpriteFrame' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_SpriteFrame_clone(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // cocos2d::SpriteFrame *clone()
    cocos2d::SpriteFrame *ret = self->clone();
    int num_ret = olua_push_object(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_create$1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filename */
    cocos2d::Rect *arg2;       /** rect */

    olua_check_string(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Rect");

    // static cocos2d::SpriteFrame *create(const std::string &filename, const cocos2d::Rect &rect)
    cocos2d::SpriteFrame *ret = cocos2d::SpriteFrame::create(arg1, *arg2);
    int num_ret = olua_push_object(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_create$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filename */
    cocos2d::Rect *arg2;       /** rect */
    bool arg3 = false;       /** rotated */
    cocos2d::Vec2 *arg4;       /** offset */
    cocos2d::Size *arg5;       /** originalSize */

    olua_check_string(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Rect");
    olua_check_bool(L, 3, &arg3);
    olua_check_object(L, 4, &arg4, "cc.Vec2");
    olua_check_object(L, 5, &arg5, "cc.Size");

    // static cocos2d::SpriteFrame *create(const std::string &filename, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
    cocos2d::SpriteFrame *ret = cocos2d::SpriteFrame::create(arg1, *arg2, arg3, *arg4, *arg5);
    int num_ret = olua_push_object(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_string(L, 1)) && (olua_is_object(L, 2, "cc.Rect"))) {
            // static cocos2d::SpriteFrame *create(const std::string &filename, const cocos2d::Rect &rect)
            return _olua_fun_cocos2d_SpriteFrame_create$1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_string(L, 1)) && (olua_is_object(L, 2, "cc.Rect")) && (olua_is_bool(L, 3)) && (olua_is_object(L, 4, "cc.Vec2")) && (olua_is_object(L, 5, "cc.Size"))) {
            // static cocos2d::SpriteFrame *create(const std::string &filename, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
            return _olua_fun_cocos2d_SpriteFrame_create$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrame::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_createWithTexture$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** pobTexture */
    cocos2d::Rect *arg2;       /** rect */

    olua_check_object(L, 1, &arg1, "cc.Texture2D");
    olua_check_object(L, 2, &arg2, "cc.Rect");

    // static cocos2d::SpriteFrame *createWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect)
    cocos2d::SpriteFrame *ret = cocos2d::SpriteFrame::createWithTexture(arg1, *arg2);
    int num_ret = olua_push_object(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_createWithTexture$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** pobTexture */
    cocos2d::Rect *arg2;       /** rect */
    bool arg3 = false;       /** rotated */
    cocos2d::Vec2 *arg4;       /** offset */
    cocos2d::Size *arg5;       /** originalSize */

    olua_check_object(L, 1, &arg1, "cc.Texture2D");
    olua_check_object(L, 2, &arg2, "cc.Rect");
    olua_check_bool(L, 3, &arg3);
    olua_check_object(L, 4, &arg4, "cc.Vec2");
    olua_check_object(L, 5, &arg5, "cc.Size");

    // static cocos2d::SpriteFrame *createWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
    cocos2d::SpriteFrame *ret = cocos2d::SpriteFrame::createWithTexture(arg1, *arg2, arg3, *arg4, *arg5);
    int num_ret = olua_push_object(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_createWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_object(L, 2, "cc.Rect"))) {
            // static cocos2d::SpriteFrame *createWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect)
            return _olua_fun_cocos2d_SpriteFrame_createWithTexture$1(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_object(L, 2, "cc.Rect")) && (olua_is_bool(L, 3)) && (olua_is_object(L, 4, "cc.Vec2")) && (olua_is_object(L, 5, "cc.Size"))) {
            // static cocos2d::SpriteFrame *createWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
            return _olua_fun_cocos2d_SpriteFrame_createWithTexture$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrame::createWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_getAnchorPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // const cocos2d::Vec2 &getAnchorPoint()
    const cocos2d::Vec2 &ret = self->getAnchorPoint();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_getCenterRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // const cocos2d::Rect &getCenterRect()
    const cocos2d::Rect &ret = self->getCenterRect();
    int num_ret = olua_push_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_getOffset(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // const cocos2d::Vec2 &getOffset()
    const cocos2d::Vec2 &ret = self->getOffset();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_getOffsetInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // const cocos2d::Vec2 &getOffsetInPixels()
    const cocos2d::Vec2 &ret = self->getOffsetInPixels();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_getOriginalSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // const cocos2d::Size &getOriginalSize()
    const cocos2d::Size &ret = self->getOriginalSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_getOriginalSizeInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // const cocos2d::Size &getOriginalSizeInPixels()
    const cocos2d::Size &ret = self->getOriginalSizeInPixels();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_getRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // const cocos2d::Rect &getRect()
    const cocos2d::Rect &ret = self->getRect();
    int num_ret = olua_push_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_getRectInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // const cocos2d::Rect &getRectInPixels()
    const cocos2d::Rect &ret = self->getRectInPixels();
    int num_ret = olua_push_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = self->getTexture();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_hasAnchorPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // bool hasAnchorPoint()
    bool ret = self->hasAnchorPoint();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_hasCenterRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // bool hasCenterRect()
    bool ret = self->hasCenterRect();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_hasPolygonInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // bool hasPolygonInfo()
    bool ret = self->hasPolygonInfo();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_initWithTexture$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** pobTexture */
    cocos2d::Rect *arg2;       /** rect */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");
    olua_check_object(L, 3, &arg2, "cc.Rect");

    // bool initWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect)
    bool ret = self->initWithTexture(arg1, *arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_initWithTexture$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** pobTexture */
    cocos2d::Rect *arg2;       /** rect */
    bool arg3 = false;       /** rotated */
    cocos2d::Vec2 *arg4;       /** offset */
    cocos2d::Size *arg5;       /** originalSize */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");
    olua_check_object(L, 3, &arg2, "cc.Rect");
    olua_check_bool(L, 4, &arg3);
    olua_check_object(L, 5, &arg4, "cc.Vec2");
    olua_check_object(L, 6, &arg5, "cc.Size");

    // bool initWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
    bool ret = self->initWithTexture(arg1, *arg2, arg3, *arg4, *arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_initWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.SpriteFrame")) && (olua_is_object(L, 2, "cc.Texture2D")) && (olua_is_object(L, 3, "cc.Rect"))) {
            // bool initWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect)
            return _olua_fun_cocos2d_SpriteFrame_initWithTexture$1(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.SpriteFrame")) && (olua_is_object(L, 2, "cc.Texture2D")) && (olua_is_object(L, 3, "cc.Rect")) && (olua_is_bool(L, 4)) && (olua_is_object(L, 5, "cc.Vec2")) && (olua_is_object(L, 6, "cc.Size"))) {
            // bool initWithTexture(cocos2d::Texture2D *pobTexture, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
            return _olua_fun_cocos2d_SpriteFrame_initWithTexture$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrame::initWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_initWithTextureFilename$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::Rect *arg2;       /** rect */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Rect");

    // bool initWithTextureFilename(const std::string &filename, const cocos2d::Rect &rect)
    bool ret = self->initWithTextureFilename(arg1, *arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_initWithTextureFilename$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::Rect *arg2;       /** rect */
    bool arg3 = false;       /** rotated */
    cocos2d::Vec2 *arg4;       /** offset */
    cocos2d::Size *arg5;       /** originalSize */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Rect");
    olua_check_bool(L, 4, &arg3);
    olua_check_object(L, 5, &arg4, "cc.Vec2");
    olua_check_object(L, 6, &arg5, "cc.Size");

    // bool initWithTextureFilename(const std::string &filename, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
    bool ret = self->initWithTextureFilename(arg1, *arg2, arg3, *arg4, *arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_initWithTextureFilename(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.SpriteFrame")) && (olua_is_string(L, 2)) && (olua_is_object(L, 3, "cc.Rect"))) {
            // bool initWithTextureFilename(const std::string &filename, const cocos2d::Rect &rect)
            return _olua_fun_cocos2d_SpriteFrame_initWithTextureFilename$1(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.SpriteFrame")) && (olua_is_string(L, 2)) && (olua_is_object(L, 3, "cc.Rect")) && (olua_is_bool(L, 4)) && (olua_is_object(L, 5, "cc.Vec2")) && (olua_is_object(L, 6, "cc.Size"))) {
            // bool initWithTextureFilename(const std::string &filename, const cocos2d::Rect &rect, bool rotated, const cocos2d::Vec2 &offset, const cocos2d::Size &originalSize)
            return _olua_fun_cocos2d_SpriteFrame_initWithTextureFilename$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrame::initWithTextureFilename' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_isRotated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrame");

    // bool isRotated()
    bool ret = self->isRotated();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::SpriteFrame()
    cocos2d::SpriteFrame *ret = new cocos2d::SpriteFrame();
    int num_ret = olua_push_object(L, ret, "cc.SpriteFrame");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrame_setAnchorPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Vec2 *arg1;       /** anchorPoint */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setAnchorPoint(const cocos2d::Vec2 &anchorPoint)
    self->setAnchorPoint(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_setCenterRectInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Rect *arg1;       /** centerRect */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_object(L, 2, &arg1, "cc.Rect");

    // void setCenterRectInPixels(const cocos2d::Rect &centerRect)
    self->setCenterRectInPixels(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_setOffset(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Vec2 *arg1;       /** offsets */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setOffset(const cocos2d::Vec2 &offsets)
    self->setOffset(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_setOffsetInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Vec2 *arg1;       /** offsetInPixels */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setOffsetInPixels(const cocos2d::Vec2 &offsetInPixels)
    self->setOffsetInPixels(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_setOriginalSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Size *arg1;       /** sizeInPixels */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setOriginalSize(const cocos2d::Size &sizeInPixels)
    self->setOriginalSize(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_setOriginalSizeInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Size *arg1;       /** sizeInPixels */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setOriginalSizeInPixels(const cocos2d::Size &sizeInPixels)
    self->setOriginalSizeInPixels(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_setRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Rect *arg1;       /** rect */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_object(L, 2, &arg1, "cc.Rect");

    // void setRect(const cocos2d::Rect &rect)
    self->setRect(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_setRectInPixels(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Rect *arg1;       /** rectInPixels */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_object(L, 2, &arg1, "cc.Rect");

    // void setRectInPixels(const cocos2d::Rect &rectInPixels)
    self->setRectInPixels(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_setRotated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    bool arg1 = false;       /** rotated */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_bool(L, 2, &arg1);

    // void setRotated(bool rotated)
    self->setRotated(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrame_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** pobTexture */

    olua_to_object(L, 1, &self, "cc.SpriteFrame");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *pobTexture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_SpriteFrame(lua_State *L)
{
    oluacls_class<cocos2d::SpriteFrame, cocos2d::Ref>(L, "cc.SpriteFrame");
    oluacls_func(L, "as", _olua_fun_cocos2d_SpriteFrame_as);
    oluacls_func(L, "clone", _olua_fun_cocos2d_SpriteFrame_clone);
    oluacls_func(L, "create", _olua_fun_cocos2d_SpriteFrame_create);
    oluacls_func(L, "createWithTexture", _olua_fun_cocos2d_SpriteFrame_createWithTexture);
    oluacls_func(L, "getAnchorPoint", _olua_fun_cocos2d_SpriteFrame_getAnchorPoint);
    oluacls_func(L, "getCenterRect", _olua_fun_cocos2d_SpriteFrame_getCenterRect);
    oluacls_func(L, "getOffset", _olua_fun_cocos2d_SpriteFrame_getOffset);
    oluacls_func(L, "getOffsetInPixels", _olua_fun_cocos2d_SpriteFrame_getOffsetInPixels);
    oluacls_func(L, "getOriginalSize", _olua_fun_cocos2d_SpriteFrame_getOriginalSize);
    oluacls_func(L, "getOriginalSizeInPixels", _olua_fun_cocos2d_SpriteFrame_getOriginalSizeInPixels);
    oluacls_func(L, "getRect", _olua_fun_cocos2d_SpriteFrame_getRect);
    oluacls_func(L, "getRectInPixels", _olua_fun_cocos2d_SpriteFrame_getRectInPixels);
    oluacls_func(L, "getTexture", _olua_fun_cocos2d_SpriteFrame_getTexture);
    oluacls_func(L, "hasAnchorPoint", _olua_fun_cocos2d_SpriteFrame_hasAnchorPoint);
    oluacls_func(L, "hasCenterRect", _olua_fun_cocos2d_SpriteFrame_hasCenterRect);
    oluacls_func(L, "hasPolygonInfo", _olua_fun_cocos2d_SpriteFrame_hasPolygonInfo);
    oluacls_func(L, "initWithTexture", _olua_fun_cocos2d_SpriteFrame_initWithTexture);
    oluacls_func(L, "initWithTextureFilename", _olua_fun_cocos2d_SpriteFrame_initWithTextureFilename);
    oluacls_func(L, "isRotated", _olua_fun_cocos2d_SpriteFrame_isRotated);
    oluacls_func(L, "new", _olua_fun_cocos2d_SpriteFrame_new);
    oluacls_func(L, "setAnchorPoint", _olua_fun_cocos2d_SpriteFrame_setAnchorPoint);
    oluacls_func(L, "setCenterRectInPixels", _olua_fun_cocos2d_SpriteFrame_setCenterRectInPixels);
    oluacls_func(L, "setOffset", _olua_fun_cocos2d_SpriteFrame_setOffset);
    oluacls_func(L, "setOffsetInPixels", _olua_fun_cocos2d_SpriteFrame_setOffsetInPixels);
    oluacls_func(L, "setOriginalSize", _olua_fun_cocos2d_SpriteFrame_setOriginalSize);
    oluacls_func(L, "setOriginalSizeInPixels", _olua_fun_cocos2d_SpriteFrame_setOriginalSizeInPixels);
    oluacls_func(L, "setRect", _olua_fun_cocos2d_SpriteFrame_setRect);
    oluacls_func(L, "setRectInPixels", _olua_fun_cocos2d_SpriteFrame_setRectInPixels);
    oluacls_func(L, "setRotated", _olua_fun_cocos2d_SpriteFrame_setRotated);
    oluacls_func(L, "setTexture", _olua_fun_cocos2d_SpriteFrame_setTexture);
    oluacls_prop(L, "anchorPoint", _olua_fun_cocos2d_SpriteFrame_getAnchorPoint, _olua_fun_cocos2d_SpriteFrame_setAnchorPoint);
    oluacls_prop(L, "centerRect", _olua_fun_cocos2d_SpriteFrame_getCenterRect, nullptr);
    oluacls_prop(L, "offset", _olua_fun_cocos2d_SpriteFrame_getOffset, _olua_fun_cocos2d_SpriteFrame_setOffset);
    oluacls_prop(L, "offsetInPixels", _olua_fun_cocos2d_SpriteFrame_getOffsetInPixels, _olua_fun_cocos2d_SpriteFrame_setOffsetInPixels);
    oluacls_prop(L, "originalSize", _olua_fun_cocos2d_SpriteFrame_getOriginalSize, _olua_fun_cocos2d_SpriteFrame_setOriginalSize);
    oluacls_prop(L, "originalSizeInPixels", _olua_fun_cocos2d_SpriteFrame_getOriginalSizeInPixels, _olua_fun_cocos2d_SpriteFrame_setOriginalSizeInPixels);
    oluacls_prop(L, "rect", _olua_fun_cocos2d_SpriteFrame_getRect, _olua_fun_cocos2d_SpriteFrame_setRect);
    oluacls_prop(L, "rectInPixels", _olua_fun_cocos2d_SpriteFrame_getRectInPixels, _olua_fun_cocos2d_SpriteFrame_setRectInPixels);
    oluacls_prop(L, "rotated", _olua_fun_cocos2d_SpriteFrame_isRotated, _olua_fun_cocos2d_SpriteFrame_setRotated);
    oluacls_prop(L, "texture", _olua_fun_cocos2d_SpriteFrame_getTexture, _olua_fun_cocos2d_SpriteFrame_setTexture);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_SpriteFrame(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.SpriteFrame")) {
        luaL_error(L, "class not found: cocos2d::SpriteFrame");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Sprite_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.BlendProtocol")) {
            olua_pushobj_as<cocos2d::BlendProtocol>(L, 1, self, "as.cc.BlendProtocol");
            break;
        }
        if (olua_strequal(arg1, "cc.TextureProtocol")) {
            olua_pushobj_as<cocos2d::TextureProtocol>(L, 1, self, "as.cc.TextureProtocol");
            break;
        }

        luaL_error(L, "'cocos2d::Sprite' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_Sprite_create$1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Sprite *create()
    cocos2d::Sprite *ret = cocos2d::Sprite::create();
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_create$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filename */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::Sprite *create(const std::string &filename)
    cocos2d::Sprite *ret = cocos2d::Sprite::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_create$3(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filename */
    cocos2d::Rect *arg2;       /** rect */

    olua_check_string(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Rect");

    // static cocos2d::Sprite *create(const std::string &filename, const cocos2d::Rect &rect)
    cocos2d::Sprite *ret = cocos2d::Sprite::create(arg1, *arg2);
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::Sprite *create()
        return _olua_fun_cocos2d_Sprite_create$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static cocos2d::Sprite *create(const std::string &filename)
            return _olua_fun_cocos2d_Sprite_create$2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 1)) && (olua_is_object(L, 2, "cc.Rect"))) {
            // static cocos2d::Sprite *create(const std::string &filename, const cocos2d::Rect &rect)
            return _olua_fun_cocos2d_Sprite_create$3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_createWithSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrame *arg1 = nullptr;       /** spriteFrame */

    olua_check_object(L, 1, &arg1, "cc.SpriteFrame");

    // static cocos2d::Sprite *createWithSpriteFrame(cocos2d::SpriteFrame *spriteFrame)
    cocos2d::Sprite *ret = cocos2d::Sprite::createWithSpriteFrame(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_createWithSpriteFrameName(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** spriteFrameName */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::Sprite *createWithSpriteFrameName(const std::string &spriteFrameName)
    cocos2d::Sprite *ret = cocos2d::Sprite::createWithSpriteFrameName(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_createWithTexture$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_check_object(L, 1, &arg1, "cc.Texture2D");

    // static cocos2d::Sprite *createWithTexture(cocos2d::Texture2D *texture)
    cocos2d::Sprite *ret = cocos2d::Sprite::createWithTexture(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_createWithTexture$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    cocos2d::Rect *arg2;       /** rect */
    bool arg3 = false;       /** rotated */

    olua_check_object(L, 1, &arg1, "cc.Texture2D");
    olua_check_object(L, 2, &arg2, "cc.Rect");
    olua_check_bool(L, 3, &arg3);

    // static cocos2d::Sprite *createWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect, @optional bool rotated)
    cocos2d::Sprite *ret = cocos2d::Sprite::createWithTexture(arg1, *arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_createWithTexture$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    cocos2d::Rect *arg2;       /** rect */

    olua_check_object(L, 1, &arg1, "cc.Texture2D");
    olua_check_object(L, 2, &arg2, "cc.Rect");

    // static cocos2d::Sprite *createWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect)
    cocos2d::Sprite *ret = cocos2d::Sprite::createWithTexture(arg1, *arg2);
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_createWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_object(L, 1, "cc.Texture2D"))) {
            // static cocos2d::Sprite *createWithTexture(cocos2d::Texture2D *texture)
            return _olua_fun_cocos2d_Sprite_createWithTexture$1(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_object(L, 2, "cc.Rect"))) {
            // static cocos2d::Sprite *createWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect)
            return _olua_fun_cocos2d_Sprite_createWithTexture$3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_object(L, 2, "cc.Rect")) && (olua_is_bool(L, 3))) {
            // static cocos2d::Sprite *createWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect, @optional bool rotated)
            return _olua_fun_cocos2d_Sprite_createWithTexture$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::createWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_getAtlasIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // unsigned int getAtlasIndex()
    unsigned int ret = self->getAtlasIndex();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_getBatchNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // cocos2d::SpriteBatchNode *getBatchNode()
    cocos2d::SpriteBatchNode *ret = self->getBatchNode();
    int num_ret = olua_push_object(L, ret, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = self->getBlendFunc();
    int num_ret = olua_push_object(L, ret, "cc.BlendFunc");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_getCenterRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // cocos2d::Rect getCenterRect()
    cocos2d::Rect ret = self->getCenterRect();
    int num_ret = olua_copy_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_getCenterRectNormalized(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // cocos2d::Rect getCenterRectNormalized()
    cocos2d::Rect ret = self->getCenterRectNormalized();
    int num_ret = olua_copy_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_getOffsetPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // const cocos2d::Vec2 &getOffsetPosition()
    const cocos2d::Vec2 &ret = self->getOffsetPosition();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_getResourceName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // const std::string &getResourceName()
    const std::string &ret = self->getResourceName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_getResourceType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // int getResourceType()
    int ret = self->getResourceType();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_getSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // cocos2d::SpriteFrame *getSpriteFrame()
    cocos2d::SpriteFrame *ret = self->getSpriteFrame();
    int num_ret = olua_push_object(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = self->getTexture();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_getTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // cocos2d::TextureAtlas *getTextureAtlas()
    cocos2d::TextureAtlas *ret = self->getTextureAtlas();
    int num_ret = olua_push_object(L, ret, "cc.TextureAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_getTextureRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // const cocos2d::Rect &getTextureRect()
    const cocos2d::Rect &ret = self->getTextureRect();
    int num_ret = olua_push_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_initWithFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_string(L, 2, &arg1);

    // bool initWithFile(const std::string &filename)
    bool ret = self->initWithFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_initWithFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    std::string arg1;       /** filename */
    cocos2d::Rect *arg2;       /** rect */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Rect");

    // bool initWithFile(const std::string &filename, const cocos2d::Rect &rect)
    bool ret = self->initWithFile(arg1, *arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_initWithFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Sprite")) && (olua_is_string(L, 2))) {
            // bool initWithFile(const std::string &filename)
            return _olua_fun_cocos2d_Sprite_initWithFile$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Sprite")) && (olua_is_string(L, 2)) && (olua_is_object(L, 3, "cc.Rect"))) {
            // bool initWithFile(const std::string &filename, const cocos2d::Rect &rect)
            return _olua_fun_cocos2d_Sprite_initWithFile$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::initWithFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_initWithSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** spriteFrame */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.SpriteFrame");

    // bool initWithSpriteFrame(cocos2d::SpriteFrame *spriteFrame)
    bool ret = self->initWithSpriteFrame(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_initWithSpriteFrameName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    std::string arg1;       /** spriteFrameName */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_string(L, 2, &arg1);

    // bool initWithSpriteFrameName(const std::string &spriteFrameName)
    bool ret = self->initWithSpriteFrameName(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_initWithTexture$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // bool initWithTexture(cocos2d::Texture2D *texture)
    bool ret = self->initWithTexture(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_initWithTexture$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    cocos2d::Rect *arg2;       /** rect */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");
    olua_check_object(L, 3, &arg2, "cc.Rect");

    // bool initWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect)
    bool ret = self->initWithTexture(arg1, *arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_initWithTexture$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    cocos2d::Rect *arg2;       /** rect */
    bool arg3 = false;       /** rotated */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");
    olua_check_object(L, 3, &arg2, "cc.Rect");
    olua_check_bool(L, 4, &arg3);

    // bool initWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect, bool rotated)
    bool ret = self->initWithTexture(arg1, *arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_initWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Sprite")) && (olua_is_object(L, 2, "cc.Texture2D"))) {
            // bool initWithTexture(cocos2d::Texture2D *texture)
            return _olua_fun_cocos2d_Sprite_initWithTexture$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Sprite")) && (olua_is_object(L, 2, "cc.Texture2D")) && (olua_is_object(L, 3, "cc.Rect"))) {
            // bool initWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect)
            return _olua_fun_cocos2d_Sprite_initWithTexture$2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Sprite")) && (olua_is_object(L, 2, "cc.Texture2D")) && (olua_is_object(L, 3, "cc.Rect")) && (olua_is_bool(L, 4))) {
            // bool initWithTexture(cocos2d::Texture2D *texture, const cocos2d::Rect &rect, bool rotated)
            return _olua_fun_cocos2d_Sprite_initWithTexture$3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::initWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_isDirty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // bool isDirty()
    bool ret = self->isDirty();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_isFlippedX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // bool isFlippedX()
    bool ret = self->isFlippedX();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_isFlippedY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // bool isFlippedY()
    bool ret = self->isFlippedY();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_isFrameDisplayed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** frame */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.SpriteFrame");

    // bool isFrameDisplayed(cocos2d::SpriteFrame *frame)
    bool ret = self->isFrameDisplayed(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_isStretchEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // bool isStretchEnabled()
    bool ret = self->isStretchEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_isTextureRectRotated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // bool isTextureRectRotated()
    bool ret = self->isTextureRectRotated();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Sprite()
    cocos2d::Sprite *ret = new cocos2d::Sprite();
    int num_ret = olua_push_object(L, ret, "cc.Sprite");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Sprite_setAtlasIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    unsigned int arg1 = 0;       /** atlasIndex */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_integer(L, 2, &arg1);

    // void setAtlasIndex(unsigned int atlasIndex)
    self->setAtlasIndex(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setBatchNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::SpriteBatchNode *arg1 = nullptr;       /** spriteBatchNode */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.SpriteBatchNode");

    // void setBatchNode(cocos2d::SpriteBatchNode *spriteBatchNode)
    self->setBatchNode(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::BlendFunc *arg1;       /** blendFunc */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.BlendFunc");

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setCenterRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Rect *arg1;       /** rect */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.Rect");

    // void setCenterRect(const cocos2d::Rect &rect)
    self->setCenterRect(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setCenterRectNormalized(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Rect *arg1;       /** rect */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.Rect");

    // void setCenterRectNormalized(const cocos2d::Rect &rect)
    self->setCenterRectNormalized(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setDirty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    bool arg1 = false;       /** dirty */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_bool(L, 2, &arg1);

    // void setDirty(bool dirty)
    self->setDirty(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setDisplayFrameWithAnimationName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    std::string arg1;       /** animationName */
    unsigned int arg2 = 0;       /** frameIndex */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // void setDisplayFrameWithAnimationName(const std::string &animationName, unsigned int frameIndex)
    self->setDisplayFrameWithAnimationName(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setFlippedX(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    bool arg1 = false;       /** flippedX */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_bool(L, 2, &arg1);

    // void setFlippedX(bool flippedX)
    self->setFlippedX(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setFlippedY(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    bool arg1 = false;       /** flippedY */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_bool(L, 2, &arg1);

    // void setFlippedY(bool flippedY)
    self->setFlippedY(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setSpriteFrame$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    std::string arg1;       /** spriteFrameName */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_string(L, 2, &arg1);

    // void setSpriteFrame(const std::string &spriteFrameName)
    self->setSpriteFrame(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setSpriteFrame$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** newFrame */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.SpriteFrame");

    // void setSpriteFrame(cocos2d::SpriteFrame *newFrame)
    self->setSpriteFrame(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setSpriteFrame(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_object(L, 1, "cc.Sprite")) && (olua_is_string(L, 2))) {
            // void setSpriteFrame(const std::string &spriteFrameName)
            return _olua_fun_cocos2d_Sprite_setSpriteFrame$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.Sprite")) && (olua_is_object(L, 2, "cc.SpriteFrame"))) {
            // void setSpriteFrame(cocos2d::SpriteFrame *newFrame)
            return _olua_fun_cocos2d_Sprite_setSpriteFrame$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::setSpriteFrame' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setStretchEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_bool(L, 2, &arg1);

    // void setStretchEnabled(bool enabled)
    self->setStretchEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setTexture$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    std::string arg1;       /** filename */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_string(L, 2, &arg1);

    // void setTexture(const std::string &filename)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setTexture$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_object(L, 1, "cc.Sprite")) && (olua_is_string(L, 2))) {
            // void setTexture(const std::string &filename)
            return _olua_fun_cocos2d_Sprite_setTexture$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.Sprite")) && (olua_is_object(L, 2, "cc.Texture2D"))) {
            // void setTexture(cocos2d::Texture2D *texture)
            return _olua_fun_cocos2d_Sprite_setTexture$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::setTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::TextureAtlas *arg1 = nullptr;       /** textureAtlas */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.TextureAtlas");

    // void setTextureAtlas(cocos2d::TextureAtlas *textureAtlas)
    self->setTextureAtlas(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setTextureRect$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Rect *arg1;       /** rect */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.Rect");

    // void setTextureRect(const cocos2d::Rect &rect)
    self->setTextureRect(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setTextureRect$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Rect *arg1;       /** rect */
    bool arg2 = false;       /** rotated */
    cocos2d::Size *arg3;       /** untrimmedSize */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.Rect");
    olua_check_bool(L, 3, &arg2);
    olua_check_object(L, 4, &arg3, "cc.Size");

    // void setTextureRect(const cocos2d::Rect &rect, bool rotated, const cocos2d::Size &untrimmedSize)
    self->setTextureRect(*arg1, arg2, *arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setTextureRect(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Sprite")) && (olua_is_object(L, 2, "cc.Rect"))) {
            // void setTextureRect(const cocos2d::Rect &rect)
            return _olua_fun_cocos2d_Sprite_setTextureRect$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Sprite")) && (olua_is_object(L, 2, "cc.Rect")) && (olua_is_bool(L, 3)) && (olua_is_object(L, 4, "cc.Size"))) {
            // void setTextureRect(const cocos2d::Rect &rect, bool rotated, const cocos2d::Size &untrimmedSize)
            return _olua_fun_cocos2d_Sprite_setTextureRect$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Sprite::setTextureRect' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setVertexLayout(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Sprite");

    // void setVertexLayout()
    self->setVertexLayout();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_setVertexRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    cocos2d::Rect *arg1;       /** rect */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_object(L, 2, &arg1, "cc.Rect");

    // void setVertexRect(const cocos2d::Rect &rect)
    self->setVertexRect(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Sprite_updateShaders(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Sprite *self = nullptr;
    const char *arg1 = nullptr;       /** vert */
    const char *arg2 = nullptr;       /** frag */

    olua_to_object(L, 1, &self, "cc.Sprite");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // void updateShaders(const char *vert, const char *frag)
    self->updateShaders(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Sprite(lua_State *L)
{
    oluacls_class<cocos2d::Sprite, cocos2d::Node>(L, "cc.Sprite");
    oluacls_func(L, "as", _olua_fun_cocos2d_Sprite_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_Sprite_create);
    oluacls_func(L, "createWithSpriteFrame", _olua_fun_cocos2d_Sprite_createWithSpriteFrame);
    oluacls_func(L, "createWithSpriteFrameName", _olua_fun_cocos2d_Sprite_createWithSpriteFrameName);
    oluacls_func(L, "createWithTexture", _olua_fun_cocos2d_Sprite_createWithTexture);
    oluacls_func(L, "getAtlasIndex", _olua_fun_cocos2d_Sprite_getAtlasIndex);
    oluacls_func(L, "getBatchNode", _olua_fun_cocos2d_Sprite_getBatchNode);
    oluacls_func(L, "getBlendFunc", _olua_fun_cocos2d_Sprite_getBlendFunc);
    oluacls_func(L, "getCenterRect", _olua_fun_cocos2d_Sprite_getCenterRect);
    oluacls_func(L, "getCenterRectNormalized", _olua_fun_cocos2d_Sprite_getCenterRectNormalized);
    oluacls_func(L, "getOffsetPosition", _olua_fun_cocos2d_Sprite_getOffsetPosition);
    oluacls_func(L, "getResourceName", _olua_fun_cocos2d_Sprite_getResourceName);
    oluacls_func(L, "getResourceType", _olua_fun_cocos2d_Sprite_getResourceType);
    oluacls_func(L, "getSpriteFrame", _olua_fun_cocos2d_Sprite_getSpriteFrame);
    oluacls_func(L, "getTexture", _olua_fun_cocos2d_Sprite_getTexture);
    oluacls_func(L, "getTextureAtlas", _olua_fun_cocos2d_Sprite_getTextureAtlas);
    oluacls_func(L, "getTextureRect", _olua_fun_cocos2d_Sprite_getTextureRect);
    oluacls_func(L, "initWithFile", _olua_fun_cocos2d_Sprite_initWithFile);
    oluacls_func(L, "initWithSpriteFrame", _olua_fun_cocos2d_Sprite_initWithSpriteFrame);
    oluacls_func(L, "initWithSpriteFrameName", _olua_fun_cocos2d_Sprite_initWithSpriteFrameName);
    oluacls_func(L, "initWithTexture", _olua_fun_cocos2d_Sprite_initWithTexture);
    oluacls_func(L, "isDirty", _olua_fun_cocos2d_Sprite_isDirty);
    oluacls_func(L, "isFlippedX", _olua_fun_cocos2d_Sprite_isFlippedX);
    oluacls_func(L, "isFlippedY", _olua_fun_cocos2d_Sprite_isFlippedY);
    oluacls_func(L, "isFrameDisplayed", _olua_fun_cocos2d_Sprite_isFrameDisplayed);
    oluacls_func(L, "isStretchEnabled", _olua_fun_cocos2d_Sprite_isStretchEnabled);
    oluacls_func(L, "isTextureRectRotated", _olua_fun_cocos2d_Sprite_isTextureRectRotated);
    oluacls_func(L, "new", _olua_fun_cocos2d_Sprite_new);
    oluacls_func(L, "setAtlasIndex", _olua_fun_cocos2d_Sprite_setAtlasIndex);
    oluacls_func(L, "setBatchNode", _olua_fun_cocos2d_Sprite_setBatchNode);
    oluacls_func(L, "setBlendFunc", _olua_fun_cocos2d_Sprite_setBlendFunc);
    oluacls_func(L, "setCenterRect", _olua_fun_cocos2d_Sprite_setCenterRect);
    oluacls_func(L, "setCenterRectNormalized", _olua_fun_cocos2d_Sprite_setCenterRectNormalized);
    oluacls_func(L, "setDirty", _olua_fun_cocos2d_Sprite_setDirty);
    oluacls_func(L, "setDisplayFrameWithAnimationName", _olua_fun_cocos2d_Sprite_setDisplayFrameWithAnimationName);
    oluacls_func(L, "setFlippedX", _olua_fun_cocos2d_Sprite_setFlippedX);
    oluacls_func(L, "setFlippedY", _olua_fun_cocos2d_Sprite_setFlippedY);
    oluacls_func(L, "setSpriteFrame", _olua_fun_cocos2d_Sprite_setSpriteFrame);
    oluacls_func(L, "setStretchEnabled", _olua_fun_cocos2d_Sprite_setStretchEnabled);
    oluacls_func(L, "setTexture", _olua_fun_cocos2d_Sprite_setTexture);
    oluacls_func(L, "setTextureAtlas", _olua_fun_cocos2d_Sprite_setTextureAtlas);
    oluacls_func(L, "setTextureRect", _olua_fun_cocos2d_Sprite_setTextureRect);
    oluacls_func(L, "setVertexLayout", _olua_fun_cocos2d_Sprite_setVertexLayout);
    oluacls_func(L, "setVertexRect", _olua_fun_cocos2d_Sprite_setVertexRect);
    oluacls_func(L, "updateShaders", _olua_fun_cocos2d_Sprite_updateShaders);
    oluacls_prop(L, "atlasIndex", _olua_fun_cocos2d_Sprite_getAtlasIndex, _olua_fun_cocos2d_Sprite_setAtlasIndex);
    oluacls_prop(L, "batchNode", _olua_fun_cocos2d_Sprite_getBatchNode, _olua_fun_cocos2d_Sprite_setBatchNode);
    oluacls_prop(L, "blendFunc", _olua_fun_cocos2d_Sprite_getBlendFunc, _olua_fun_cocos2d_Sprite_setBlendFunc);
    oluacls_prop(L, "centerRect", _olua_fun_cocos2d_Sprite_getCenterRect, _olua_fun_cocos2d_Sprite_setCenterRect);
    oluacls_prop(L, "centerRectNormalized", _olua_fun_cocos2d_Sprite_getCenterRectNormalized, _olua_fun_cocos2d_Sprite_setCenterRectNormalized);
    oluacls_prop(L, "dirty", _olua_fun_cocos2d_Sprite_isDirty, _olua_fun_cocos2d_Sprite_setDirty);
    oluacls_prop(L, "flippedX", _olua_fun_cocos2d_Sprite_isFlippedX, _olua_fun_cocos2d_Sprite_setFlippedX);
    oluacls_prop(L, "flippedY", _olua_fun_cocos2d_Sprite_isFlippedY, _olua_fun_cocos2d_Sprite_setFlippedY);
    oluacls_prop(L, "offsetPosition", _olua_fun_cocos2d_Sprite_getOffsetPosition, nullptr);
    oluacls_prop(L, "resourceName", _olua_fun_cocos2d_Sprite_getResourceName, nullptr);
    oluacls_prop(L, "resourceType", _olua_fun_cocos2d_Sprite_getResourceType, nullptr);
    oluacls_prop(L, "spriteFrame", _olua_fun_cocos2d_Sprite_getSpriteFrame, nullptr);
    oluacls_prop(L, "stretchEnabled", _olua_fun_cocos2d_Sprite_isStretchEnabled, _olua_fun_cocos2d_Sprite_setStretchEnabled);
    oluacls_prop(L, "texture", _olua_fun_cocos2d_Sprite_getTexture, nullptr);
    oluacls_prop(L, "textureAtlas", _olua_fun_cocos2d_Sprite_getTextureAtlas, _olua_fun_cocos2d_Sprite_setTextureAtlas);
    oluacls_prop(L, "textureRect", _olua_fun_cocos2d_Sprite_getTextureRect, nullptr);
    oluacls_prop(L, "textureRectRotated", _olua_fun_cocos2d_Sprite_isTextureRectRotated, nullptr);
    oluacls_const(L, "INDEX_NOT_INITIALIZED", cocos2d::Sprite::INDEX_NOT_INITIALIZED);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Sprite(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Sprite")) {
        luaL_error(L, "class not found: cocos2d::Sprite");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_SpriteBatchNode_addSpriteWithoutQuad(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** child */
    int arg2 = 0;       /** z */
    int arg3 = 0;       /** aTag */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Sprite");
    olua_check_integer(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // cocos2d::SpriteBatchNode *addSpriteWithoutQuad(cocos2d::Sprite *child, int z, int aTag)
    cocos2d::SpriteBatchNode *ret = self->addSpriteWithoutQuad(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_appendChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Sprite");

    // void appendChild(cocos2d::Sprite *sprite)
    self->appendChild(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.BlendProtocol")) {
            olua_pushobj_as<cocos2d::BlendProtocol>(L, 1, self, "as.cc.BlendProtocol");
            break;
        }
        if (olua_strequal(arg1, "cc.TextureProtocol")) {
            olua_pushobj_as<cocos2d::TextureProtocol>(L, 1, self, "as.cc.TextureProtocol");
            break;
        }

        luaL_error(L, "'cocos2d::SpriteBatchNode' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_SpriteBatchNode_atlasIndexForChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */
    int arg2 = 0;       /** z */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Sprite");
    olua_check_integer(L, 3, &arg2);

    // ssize_t atlasIndexForChild(cocos2d::Sprite *sprite, int z)
    ssize_t ret = self->atlasIndexForChild(arg1, arg2);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_create$1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** fileImage */
    ssize_t arg2 = 0;       /** capacity */

    olua_check_string(L, 1, &arg1);
    olua_check_integer(L, 2, &arg2);

    // static cocos2d::SpriteBatchNode *create(const std::string &fileImage, @optional ssize_t capacity)
    cocos2d::SpriteBatchNode *ret = cocos2d::SpriteBatchNode::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_create$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** fileImage */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::SpriteBatchNode *create(const std::string &fileImage)
    cocos2d::SpriteBatchNode *ret = cocos2d::SpriteBatchNode::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static cocos2d::SpriteBatchNode *create(const std::string &fileImage)
            return _olua_fun_cocos2d_SpriteBatchNode_create$2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 1)) && (olua_is_integer(L, 2))) {
            // static cocos2d::SpriteBatchNode *create(const std::string &fileImage, @optional ssize_t capacity)
            return _olua_fun_cocos2d_SpriteBatchNode_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteBatchNode::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_createWithTexture$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** tex */
    ssize_t arg2 = 0;       /** capacity */

    olua_check_object(L, 1, &arg1, "cc.Texture2D");
    olua_check_integer(L, 2, &arg2);

    // static cocos2d::SpriteBatchNode *createWithTexture(cocos2d::Texture2D *tex, @optional ssize_t capacity)
    cocos2d::SpriteBatchNode *ret = cocos2d::SpriteBatchNode::createWithTexture(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_createWithTexture$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** tex */

    olua_check_object(L, 1, &arg1, "cc.Texture2D");

    // static cocos2d::SpriteBatchNode *createWithTexture(cocos2d::Texture2D *tex)
    cocos2d::SpriteBatchNode *ret = cocos2d::SpriteBatchNode::createWithTexture(arg1);
    int num_ret = olua_push_object(L, ret, "cc.SpriteBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_createWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_object(L, 1, "cc.Texture2D"))) {
            // static cocos2d::SpriteBatchNode *createWithTexture(cocos2d::Texture2D *tex)
            return _olua_fun_cocos2d_SpriteBatchNode_createWithTexture$2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_integer(L, 2))) {
            // static cocos2d::SpriteBatchNode *createWithTexture(cocos2d::Texture2D *tex, @optional ssize_t capacity)
            return _olua_fun_cocos2d_SpriteBatchNode_createWithTexture$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteBatchNode::createWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = self->getBlendFunc();
    int num_ret = olua_push_object(L, ret, "cc.BlendFunc");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_getDescendants(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");

    // const std::vector<cocos2d::Sprite *> &getDescendants()
    const std::vector<cocos2d::Sprite *> &ret = self->getDescendants();
    int num_ret = olua_push_array<cocos2d::Sprite *>(L, ret, [L](cocos2d::Sprite *arg1) {
        olua_push_object(L, arg1, "cc.Sprite");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = self->getTexture();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_getTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");

    // cocos2d::TextureAtlas *getTextureAtlas()
    cocos2d::TextureAtlas *ret = self->getTextureAtlas();
    int num_ret = olua_push_object(L, ret, "cc.TextureAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_highestAtlasIndexInChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Sprite");

    // ssize_t highestAtlasIndexInChild(cocos2d::Sprite *sprite)
    ssize_t ret = self->highestAtlasIndexInChild(arg1);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_increaseAtlasCapacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");

    // void increaseAtlasCapacity()
    self->increaseAtlasCapacity();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_initWithFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    std::string arg1;       /** fileImage */
    ssize_t arg2 = 0;       /** capacity */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // bool initWithFile(const std::string &fileImage, @optional ssize_t capacity)
    bool ret = self->initWithFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_initWithFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    std::string arg1;       /** fileImage */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_string(L, 2, &arg1);

    // bool initWithFile(const std::string &fileImage)
    bool ret = self->initWithFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_initWithFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.SpriteBatchNode")) && (olua_is_string(L, 2))) {
            // bool initWithFile(const std::string &fileImage)
            return _olua_fun_cocos2d_SpriteBatchNode_initWithFile$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.SpriteBatchNode")) && (olua_is_string(L, 2)) && (olua_is_integer(L, 3))) {
            // bool initWithFile(const std::string &fileImage, @optional ssize_t capacity)
            return _olua_fun_cocos2d_SpriteBatchNode_initWithFile$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteBatchNode::initWithFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_initWithTexture$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** tex */
    ssize_t arg2 = 0;       /** capacity */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");
    olua_check_integer(L, 3, &arg2);

    // bool initWithTexture(cocos2d::Texture2D *tex, @optional ssize_t capacity)
    bool ret = self->initWithTexture(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_initWithTexture$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** tex */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // bool initWithTexture(cocos2d::Texture2D *tex)
    bool ret = self->initWithTexture(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_initWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.SpriteBatchNode")) && (olua_is_object(L, 2, "cc.Texture2D"))) {
            // bool initWithTexture(cocos2d::Texture2D *tex)
            return _olua_fun_cocos2d_SpriteBatchNode_initWithTexture$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.SpriteBatchNode")) && (olua_is_object(L, 2, "cc.Texture2D")) && (olua_is_integer(L, 3))) {
            // bool initWithTexture(cocos2d::Texture2D *tex, @optional ssize_t capacity)
            return _olua_fun_cocos2d_SpriteBatchNode_initWithTexture$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteBatchNode::initWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_insertQuadFromSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */
    ssize_t arg2 = 0;       /** index */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Sprite");
    olua_check_integer(L, 3, &arg2);

    // void insertQuadFromSprite(cocos2d::Sprite *sprite, ssize_t index)
    self->insertQuadFromSprite(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_lowestAtlasIndexInChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Sprite");

    // ssize_t lowestAtlasIndexInChild(cocos2d::Sprite *sprite)
    ssize_t ret = self->lowestAtlasIndexInChild(arg1);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::SpriteBatchNode()
    cocos2d::SpriteBatchNode *ret = new cocos2d::SpriteBatchNode();
    int num_ret = olua_push_object(L, ret, "cc.SpriteBatchNode");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_rebuildIndexInOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** parent */
    ssize_t arg2 = 0;       /** index */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Sprite");
    olua_check_integer(L, 3, &arg2);

    // ssize_t rebuildIndexInOrder(cocos2d::Sprite *parent, ssize_t index)
    ssize_t ret = self->rebuildIndexInOrder(arg1, arg2);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteBatchNode_removeChildAtIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    ssize_t arg1 = 0;       /** index */
    bool arg2 = false;       /** doCleanup */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_integer(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void removeChildAtIndex(ssize_t index, bool doCleanup)
    self->removeChildAtIndex(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_removeSpriteFromAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Sprite");

    // void removeSpriteFromAtlas(cocos2d::Sprite *sprite)
    self->removeSpriteFromAtlas(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_reorderBatch(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    bool arg1 = false;       /** reorder */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_bool(L, 2, &arg1);

    // void reorderBatch(bool reorder)
    self->reorderBatch(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_reserveCapacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    ssize_t arg1 = 0;       /** newCapacity */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_integer(L, 2, &arg1);

    // void reserveCapacity(ssize_t newCapacity)
    self->reserveCapacity(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::BlendFunc *arg1;       /** blendFunc */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.BlendFunc");

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteBatchNode_setTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteBatchNode *self = nullptr;
    cocos2d::TextureAtlas *arg1 = nullptr;       /** textureAtlas */

    olua_to_object(L, 1, &self, "cc.SpriteBatchNode");
    olua_check_object(L, 2, &arg1, "cc.TextureAtlas");

    // void setTextureAtlas(cocos2d::TextureAtlas *textureAtlas)
    self->setTextureAtlas(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_SpriteBatchNode(lua_State *L)
{
    oluacls_class<cocos2d::SpriteBatchNode, cocos2d::Node>(L, "cc.SpriteBatchNode");
    oluacls_func(L, "addSpriteWithoutQuad", _olua_fun_cocos2d_SpriteBatchNode_addSpriteWithoutQuad);
    oluacls_func(L, "appendChild", _olua_fun_cocos2d_SpriteBatchNode_appendChild);
    oluacls_func(L, "as", _olua_fun_cocos2d_SpriteBatchNode_as);
    oluacls_func(L, "atlasIndexForChild", _olua_fun_cocos2d_SpriteBatchNode_atlasIndexForChild);
    oluacls_func(L, "create", _olua_fun_cocos2d_SpriteBatchNode_create);
    oluacls_func(L, "createWithTexture", _olua_fun_cocos2d_SpriteBatchNode_createWithTexture);
    oluacls_func(L, "getBlendFunc", _olua_fun_cocos2d_SpriteBatchNode_getBlendFunc);
    oluacls_func(L, "getDescendants", _olua_fun_cocos2d_SpriteBatchNode_getDescendants);
    oluacls_func(L, "getTexture", _olua_fun_cocos2d_SpriteBatchNode_getTexture);
    oluacls_func(L, "getTextureAtlas", _olua_fun_cocos2d_SpriteBatchNode_getTextureAtlas);
    oluacls_func(L, "highestAtlasIndexInChild", _olua_fun_cocos2d_SpriteBatchNode_highestAtlasIndexInChild);
    oluacls_func(L, "increaseAtlasCapacity", _olua_fun_cocos2d_SpriteBatchNode_increaseAtlasCapacity);
    oluacls_func(L, "initWithFile", _olua_fun_cocos2d_SpriteBatchNode_initWithFile);
    oluacls_func(L, "initWithTexture", _olua_fun_cocos2d_SpriteBatchNode_initWithTexture);
    oluacls_func(L, "insertQuadFromSprite", _olua_fun_cocos2d_SpriteBatchNode_insertQuadFromSprite);
    oluacls_func(L, "lowestAtlasIndexInChild", _olua_fun_cocos2d_SpriteBatchNode_lowestAtlasIndexInChild);
    oluacls_func(L, "new", _olua_fun_cocos2d_SpriteBatchNode_new);
    oluacls_func(L, "rebuildIndexInOrder", _olua_fun_cocos2d_SpriteBatchNode_rebuildIndexInOrder);
    oluacls_func(L, "removeChildAtIndex", _olua_fun_cocos2d_SpriteBatchNode_removeChildAtIndex);
    oluacls_func(L, "removeSpriteFromAtlas", _olua_fun_cocos2d_SpriteBatchNode_removeSpriteFromAtlas);
    oluacls_func(L, "reorderBatch", _olua_fun_cocos2d_SpriteBatchNode_reorderBatch);
    oluacls_func(L, "reserveCapacity", _olua_fun_cocos2d_SpriteBatchNode_reserveCapacity);
    oluacls_func(L, "setBlendFunc", _olua_fun_cocos2d_SpriteBatchNode_setBlendFunc);
    oluacls_func(L, "setTexture", _olua_fun_cocos2d_SpriteBatchNode_setTexture);
    oluacls_func(L, "setTextureAtlas", _olua_fun_cocos2d_SpriteBatchNode_setTextureAtlas);
    oluacls_prop(L, "blendFunc", _olua_fun_cocos2d_SpriteBatchNode_getBlendFunc, _olua_fun_cocos2d_SpriteBatchNode_setBlendFunc);
    oluacls_prop(L, "descendants", _olua_fun_cocos2d_SpriteBatchNode_getDescendants, nullptr);
    oluacls_prop(L, "texture", _olua_fun_cocos2d_SpriteBatchNode_getTexture, _olua_fun_cocos2d_SpriteBatchNode_setTexture);
    oluacls_prop(L, "textureAtlas", _olua_fun_cocos2d_SpriteBatchNode_getTextureAtlas, _olua_fun_cocos2d_SpriteBatchNode_setTextureAtlas);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_SpriteBatchNode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.SpriteBatchNode")) {
        luaL_error(L, "class not found: cocos2d::SpriteBatchNode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_SpriteFrameCache_addSpriteFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** frame */
    std::string arg2;       /** frameName */

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");
    olua_check_object(L, 2, &arg1, "cc.SpriteFrame");
    olua_check_string(L, 3, &arg2);

    // void addSpriteFrame(cocos2d::SpriteFrame *frame, const std::string &frameName)
    self->addSpriteFrame(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrameCache_addSpriteFramesWithFile$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist */

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");
    olua_check_string(L, 2, &arg1);

    // void addSpriteFramesWithFile(const std::string &plist)
    self->addSpriteFramesWithFile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrameCache_addSpriteFramesWithFile$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist */
    std::string arg2;       /** textureFileName */

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // void addSpriteFramesWithFile(const std::string &plist, const std::string &textureFileName)
    self->addSpriteFramesWithFile(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrameCache_addSpriteFramesWithFile$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Texture2D");

    // void addSpriteFramesWithFile(const std::string &plist, cocos2d::Texture2D *texture)
    self->addSpriteFramesWithFile(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrameCache_addSpriteFramesWithFile(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.SpriteFrameCache")) && (olua_is_string(L, 2))) {
            // void addSpriteFramesWithFile(const std::string &plist)
            return _olua_fun_cocos2d_SpriteFrameCache_addSpriteFramesWithFile$1(L);
        // }
    }

    if (num_args == 3) {
        if ((olua_is_object(L, 1, "cc.SpriteFrameCache")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3))) {
            // void addSpriteFramesWithFile(const std::string &plist, const std::string &textureFileName)
            return _olua_fun_cocos2d_SpriteFrameCache_addSpriteFramesWithFile$2(L);
        }

        // if ((olua_is_object(L, 1, "cc.SpriteFrameCache")) && (olua_is_string(L, 2)) && (olua_is_object(L, 3, "cc.Texture2D"))) {
            // void addSpriteFramesWithFile(const std::string &plist, cocos2d::Texture2D *texture)
            return _olua_fun_cocos2d_SpriteFrameCache_addSpriteFramesWithFile$3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::SpriteFrameCache::addSpriteFramesWithFile' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrameCache_addSpriteFramesWithFileContent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist_content */
    cocos2d::Texture2D *arg2 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Texture2D");

    // void addSpriteFramesWithFileContent(const std::string &plist_content, cocos2d::Texture2D *texture)
    self->addSpriteFramesWithFileContent(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrameCache_destroyInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static void destroyInstance()
    cocos2d::SpriteFrameCache::destroyInstance();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrameCache_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::SpriteFrameCache *getInstance()
    cocos2d::SpriteFrameCache *ret = cocos2d::SpriteFrameCache::getInstance();
    int num_ret = olua_push_object(L, ret, "cc.SpriteFrameCache");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrameCache_getSpriteFrameByName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");
    olua_check_string(L, 2, &arg1);

    // cocos2d::SpriteFrame *getSpriteFrameByName(const std::string &name)
    cocos2d::SpriteFrame *ret = self->getSpriteFrameByName(arg1);
    int num_ret = olua_push_object(L, ret, "cc.SpriteFrame");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrameCache_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");

    // bool init()
    bool ret = self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrameCache_isSpriteFramesWithFileLoaded(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist */

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");
    olua_check_string(L, 2, &arg1);

    // bool isSpriteFramesWithFileLoaded(const std::string &plist)
    bool ret = self->isSpriteFramesWithFileLoaded(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrameCache_reloadTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist */

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");
    olua_check_string(L, 2, &arg1);

    // bool reloadTexture(const std::string &plist)
    bool ret = self->reloadTexture(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpriteFrameCache_removeSpriteFrameByName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");
    olua_check_string(L, 2, &arg1);

    // void removeSpriteFrameByName(const std::string &name)
    self->removeSpriteFrameByName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrameCache_removeSpriteFrames(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");

    // void removeSpriteFrames()
    self->removeSpriteFrames();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrameCache_removeSpriteFramesFromFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist */

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");
    olua_check_string(L, 2, &arg1);

    // void removeSpriteFramesFromFile(const std::string &plist)
    self->removeSpriteFramesFromFile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrameCache_removeSpriteFramesFromFileContent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    std::string arg1;       /** plist_content */

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");
    olua_check_string(L, 2, &arg1);

    // void removeSpriteFramesFromFileContent(const std::string &plist_content)
    self->removeSpriteFramesFromFileContent(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrameCache_removeSpriteFramesFromTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // void removeSpriteFramesFromTexture(cocos2d::Texture2D *texture)
    self->removeSpriteFramesFromTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpriteFrameCache_removeUnusedSpriteFrames(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpriteFrameCache *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpriteFrameCache");

    // void removeUnusedSpriteFrames()
    self->removeUnusedSpriteFrames();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_SpriteFrameCache(lua_State *L)
{
    oluacls_class<cocos2d::SpriteFrameCache, cocos2d::Ref>(L, "cc.SpriteFrameCache");
    oluacls_func(L, "addSpriteFrame", _olua_fun_cocos2d_SpriteFrameCache_addSpriteFrame);
    oluacls_func(L, "addSpriteFramesWithFile", _olua_fun_cocos2d_SpriteFrameCache_addSpriteFramesWithFile);
    oluacls_func(L, "addSpriteFramesWithFileContent", _olua_fun_cocos2d_SpriteFrameCache_addSpriteFramesWithFileContent);
    oluacls_func(L, "destroyInstance", _olua_fun_cocos2d_SpriteFrameCache_destroyInstance);
    oluacls_func(L, "getInstance", _olua_fun_cocos2d_SpriteFrameCache_getInstance);
    oluacls_func(L, "getSpriteFrameByName", _olua_fun_cocos2d_SpriteFrameCache_getSpriteFrameByName);
    oluacls_func(L, "init", _olua_fun_cocos2d_SpriteFrameCache_init);
    oluacls_func(L, "isSpriteFramesWithFileLoaded", _olua_fun_cocos2d_SpriteFrameCache_isSpriteFramesWithFileLoaded);
    oluacls_func(L, "reloadTexture", _olua_fun_cocos2d_SpriteFrameCache_reloadTexture);
    oluacls_func(L, "removeSpriteFrameByName", _olua_fun_cocos2d_SpriteFrameCache_removeSpriteFrameByName);
    oluacls_func(L, "removeSpriteFrames", _olua_fun_cocos2d_SpriteFrameCache_removeSpriteFrames);
    oluacls_func(L, "removeSpriteFramesFromFile", _olua_fun_cocos2d_SpriteFrameCache_removeSpriteFramesFromFile);
    oluacls_func(L, "removeSpriteFramesFromFileContent", _olua_fun_cocos2d_SpriteFrameCache_removeSpriteFramesFromFileContent);
    oluacls_func(L, "removeSpriteFramesFromTexture", _olua_fun_cocos2d_SpriteFrameCache_removeSpriteFramesFromTexture);
    oluacls_func(L, "removeUnusedSpriteFrames", _olua_fun_cocos2d_SpriteFrameCache_removeUnusedSpriteFrames);
    oluacls_prop(L, "instance", _olua_fun_cocos2d_SpriteFrameCache_getInstance, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_SpriteFrameCache(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.SpriteFrameCache")) {
        luaL_error(L, "class not found: cocos2d::SpriteFrameCache");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_AnimationCache_addAnimation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationCache *self = nullptr;
    cocos2d::Animation *arg1 = nullptr;       /** animation */
    std::string arg2;       /** name */

    olua_to_object(L, 1, &self, "cc.AnimationCache");
    olua_check_object(L, 2, &arg1, "cc.Animation");
    olua_check_string(L, 3, &arg2);

    // void addAnimation(cocos2d::Animation *animation, const std::string &name)
    self->addAnimation(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AnimationCache_addAnimationsWithDictionary(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationCache *self = nullptr;
    cocos2d::ValueMap arg1;       /** dictionary */
    std::string arg2;       /** plist */

    olua_to_object(L, 1, &self, "cc.AnimationCache");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // void addAnimationsWithDictionary(const cocos2d::ValueMap &dictionary, const std::string &plist)
    self->addAnimationsWithDictionary(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AnimationCache_addAnimationsWithFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationCache *self = nullptr;
    std::string arg1;       /** plist */

    olua_to_object(L, 1, &self, "cc.AnimationCache");
    olua_check_string(L, 2, &arg1);

    // void addAnimationsWithFile(const std::string &plist)
    self->addAnimationsWithFile(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AnimationCache_destroyInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static void destroyInstance()
    cocos2d::AnimationCache::destroyInstance();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_AnimationCache_getAnimation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationCache *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.AnimationCache");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Animation *getAnimation(const std::string &name)
    cocos2d::Animation *ret = self->getAnimation(arg1);
    int num_ret = olua_push_object(L, ret, "cc.Animation");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AnimationCache_getInstance(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::AnimationCache *getInstance()
    cocos2d::AnimationCache *ret = cocos2d::AnimationCache::getInstance();
    int num_ret = olua_push_object(L, ret, "cc.AnimationCache");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AnimationCache_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationCache *self = nullptr;

    olua_to_object(L, 1, &self, "cc.AnimationCache");

    // bool init()
    bool ret = self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AnimationCache_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::AnimationCache()
    cocos2d::AnimationCache *ret = new cocos2d::AnimationCache();
    int num_ret = olua_push_object(L, ret, "cc.AnimationCache");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AnimationCache_removeAnimation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::AnimationCache *self = nullptr;
    std::string arg1;       /** name */

    olua_to_object(L, 1, &self, "cc.AnimationCache");
    olua_check_string(L, 2, &arg1);

    // void removeAnimation(const std::string &name)
    self->removeAnimation(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_AnimationCache(lua_State *L)
{
    oluacls_class<cocos2d::AnimationCache, cocos2d::Ref>(L, "cc.AnimationCache");
    oluacls_func(L, "addAnimation", _olua_fun_cocos2d_AnimationCache_addAnimation);
    oluacls_func(L, "addAnimationsWithDictionary", _olua_fun_cocos2d_AnimationCache_addAnimationsWithDictionary);
    oluacls_func(L, "addAnimationsWithFile", _olua_fun_cocos2d_AnimationCache_addAnimationsWithFile);
    oluacls_func(L, "destroyInstance", _olua_fun_cocos2d_AnimationCache_destroyInstance);
    oluacls_func(L, "getAnimation", _olua_fun_cocos2d_AnimationCache_getAnimation);
    oluacls_func(L, "getInstance", _olua_fun_cocos2d_AnimationCache_getInstance);
    oluacls_func(L, "init", _olua_fun_cocos2d_AnimationCache_init);
    oluacls_func(L, "new", _olua_fun_cocos2d_AnimationCache_new);
    oluacls_func(L, "removeAnimation", _olua_fun_cocos2d_AnimationCache_removeAnimation);
    oluacls_prop(L, "instance", _olua_fun_cocos2d_AnimationCache_getInstance, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_AnimationCache(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.AnimationCache")) {
        luaL_error(L, "class not found: cocos2d::AnimationCache");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Scene_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Scene *create()
    cocos2d::Scene *ret = cocos2d::Scene::create();
    int num_ret = olua_push_object(L, ret, "cc.Scene");

    olua_endinvoke(L);

    return num_ret;
}

#if (CC_USE_PHYSICS || (CC_USE_3D_PHYSICS && CC_ENABLE_BULLET_INTEGRATION))
static int _olua_fun_cocos2d_Scene_createWithPhysics(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Scene *createWithPhysics()
    cocos2d::Scene *ret = cocos2d::Scene::createWithPhysics();
    int num_ret = olua_push_object(L, ret, "cc.Scene");

    olua_endinvoke(L);

    return num_ret;
}
#endif

static int _olua_fun_cocos2d_Scene_createWithSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Size *arg1;       /** size */

    olua_check_object(L, 1, &arg1, "cc.Size");

    // static cocos2d::Scene *createWithSize(const cocos2d::Size &size)
    cocos2d::Scene *ret = cocos2d::Scene::createWithSize(*arg1);
    int num_ret = olua_push_object(L, ret, "cc.Scene");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Scene_getCameras(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Scene");

    // const std::vector<cocos2d::Camera *> &getCameras()
    const std::vector<cocos2d::Camera *> &ret = self->getCameras();
    int num_ret = olua_push_array<cocos2d::Camera *>(L, ret, [L](cocos2d::Camera *arg1) {
        olua_push_object(L, arg1, "cc.Camera");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Scene_getDefaultCamera(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Scene");

    // cocos2d::Camera *getDefaultCamera()
    cocos2d::Camera *ret = self->getDefaultCamera();
    int num_ret = olua_push_object(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Scene_getLights(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Scene");

    // const std::vector<cocos2d::BaseLight *> &getLights()
    const std::vector<cocos2d::BaseLight *> &ret = self->getLights();
    int num_ret = olua_push_array<cocos2d::BaseLight *>(L, ret, [L](cocos2d::BaseLight *arg1) {
        olua_push_object(L, arg1, "cc.BaseLight");
    });

    olua_endinvoke(L);

    return num_ret;
}

#if CC_USE_NAVMESH
static int _olua_fun_cocos2d_Scene_getNavMesh(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Scene");

    // cocos2d::NavMesh *getNavMesh()
    cocos2d::NavMesh *ret = self->getNavMesh();
    int num_ret = olua_push_object(L, ret, "cc.NavMesh");

    olua_endinvoke(L);

    return num_ret;
}
#endif

#if CC_USE_PHYSICS
static int _olua_fun_cocos2d_Scene_getPhysicsWorld(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Scene");

    // @addref(^) cocos2d::PhysicsWorld *getPhysicsWorld()
    cocos2d::PhysicsWorld *ret = self->getPhysicsWorld();
    int num_ret = olua_push_object(L, ret, "cc.PhysicsWorld");

    // insert code after call
    olua_addref(L, 1, "physicsworld", -1, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}
#endif

static int _olua_fun_cocos2d_Scene_initWithSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    cocos2d::Size *arg1;       /** size */

    olua_to_object(L, 1, &self, "cc.Scene");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // bool initWithSize(const cocos2d::Size &size)
    bool ret = self->initWithSize(*arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Scene_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Scene()
    cocos2d::Scene *ret = new cocos2d::Scene();
    int num_ret = olua_push_object(L, ret, "cc.Scene");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Scene_onProjectionChanged(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    cocos2d::EventCustom *arg1 = nullptr;       /** event */

    olua_to_object(L, 1, &self, "cc.Scene");
    olua_check_object(L, 2, &arg1, "cc.EventCustom");

    // void onProjectionChanged(cocos2d::EventCustom *event)
    self->onProjectionChanged(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scene_render$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    cocos2d::Renderer *arg1 = nullptr;       /** renderer */
    cocos2d::Mat4 *arg2;       /** eyeTransform */
    cocos2d::Mat4 *arg3 = nullptr;       /** eyeProjection */

    olua_to_object(L, 1, &self, "cc.Scene");
    olua_check_object(L, 2, &arg1, "cc.Renderer");
    olua_check_object(L, 3, &arg2, "cc.Mat4");
    olua_check_object(L, 4, &arg3, "cc.Mat4");

    // void render(cocos2d::Renderer *renderer, const cocos2d::Mat4 &eyeTransform, @optional const cocos2d::Mat4 *eyeProjection)
    self->render(arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scene_render$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    cocos2d::Renderer *arg1 = nullptr;       /** renderer */
    cocos2d::Mat4 *arg2;       /** eyeTransform */

    olua_to_object(L, 1, &self, "cc.Scene");
    olua_check_object(L, 2, &arg1, "cc.Renderer");
    olua_check_object(L, 3, &arg2, "cc.Mat4");

    // void render(cocos2d::Renderer *renderer, const cocos2d::Mat4 &eyeTransform)
    self->render(arg1, *arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Scene_render(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Scene")) && (olua_is_object(L, 2, "cc.Renderer")) && (olua_is_object(L, 3, "cc.Mat4"))) {
            // void render(cocos2d::Renderer *renderer, const cocos2d::Mat4 &eyeTransform)
            return _olua_fun_cocos2d_Scene_render$2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Scene")) && (olua_is_object(L, 2, "cc.Renderer")) && (olua_is_object(L, 3, "cc.Mat4")) && (olua_is_object(L, 4, "cc.Mat4"))) {
            // void render(cocos2d::Renderer *renderer, const cocos2d::Mat4 &eyeTransform, @optional const cocos2d::Mat4 *eyeProjection)
            return _olua_fun_cocos2d_Scene_render$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Scene::render' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Scene_setCameraOrderDirty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Scene");

    // void setCameraOrderDirty()
    self->setCameraOrderDirty();

    olua_endinvoke(L);

    return 0;
}

#if CC_USE_NAVMESH
static int _olua_fun_cocos2d_Scene_setNavMesh(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    cocos2d::NavMesh *arg1 = nullptr;       /** navMesh */

    olua_to_object(L, 1, &self, "cc.Scene");
    olua_check_object(L, 2, &arg1, "cc.NavMesh");

    // void setNavMesh(cocos2d::NavMesh *navMesh)
    self->setNavMesh(arg1);

    olua_endinvoke(L);

    return 0;
}
#endif

#if CC_USE_NAVMESH
static int _olua_fun_cocos2d_Scene_setNavMeshDebugCamera(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    cocos2d::Camera *arg1 = nullptr;       /** camera */

    olua_to_object(L, 1, &self, "cc.Scene");
    olua_check_object(L, 2, &arg1, "cc.Camera");

    // void setNavMeshDebugCamera(cocos2d::Camera *camera)
    self->setNavMeshDebugCamera(arg1);

    olua_endinvoke(L);

    return 0;
}
#endif

#if CC_USE_3D_PHYSICS && CC_ENABLE_BULLET_INTEGRATION
static int _olua_fun_cocos2d_Scene_setPhysics3DDebugCamera(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    cocos2d::Camera *arg1 = nullptr;       /** camera */

    olua_to_object(L, 1, &self, "cc.Scene");
    olua_check_object(L, 2, &arg1, "cc.Camera");

    // void setPhysics3DDebugCamera(cocos2d::Camera *camera)
    self->setPhysics3DDebugCamera(arg1);

    olua_endinvoke(L);

    return 0;
}
#endif

#if (CC_USE_PHYSICS || (CC_USE_3D_PHYSICS && CC_ENABLE_BULLET_INTEGRATION) || CC_USE_NAVMESH)
static int _olua_fun_cocos2d_Scene_stepPhysicsAndNavigation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Scene *self = nullptr;
    float arg1 = 0;       /** deltaTime */

    olua_to_object(L, 1, &self, "cc.Scene");
    olua_check_number(L, 2, &arg1);

    // void stepPhysicsAndNavigation(float deltaTime)
    self->stepPhysicsAndNavigation(arg1);

    olua_endinvoke(L);

    return 0;
}
#endif

static int _olua_cls_cc_Scene(lua_State *L)
{
    oluacls_class<cocos2d::Scene, cocos2d::Node>(L, "cc.Scene");
    oluacls_func(L, "create", _olua_fun_cocos2d_Scene_create);
#if (CC_USE_PHYSICS || (CC_USE_3D_PHYSICS && CC_ENABLE_BULLET_INTEGRATION))
    oluacls_func(L, "createWithPhysics", _olua_fun_cocos2d_Scene_createWithPhysics);
#endif
    oluacls_func(L, "createWithSize", _olua_fun_cocos2d_Scene_createWithSize);
    oluacls_func(L, "getCameras", _olua_fun_cocos2d_Scene_getCameras);
    oluacls_func(L, "getDefaultCamera", _olua_fun_cocos2d_Scene_getDefaultCamera);
    oluacls_func(L, "getLights", _olua_fun_cocos2d_Scene_getLights);
#if CC_USE_NAVMESH
    oluacls_func(L, "getNavMesh", _olua_fun_cocos2d_Scene_getNavMesh);
#endif
#if CC_USE_PHYSICS
    oluacls_func(L, "getPhysicsWorld", _olua_fun_cocos2d_Scene_getPhysicsWorld);
#endif
    oluacls_func(L, "initWithSize", _olua_fun_cocos2d_Scene_initWithSize);
    oluacls_func(L, "new", _olua_fun_cocos2d_Scene_new);
    oluacls_func(L, "onProjectionChanged", _olua_fun_cocos2d_Scene_onProjectionChanged);
    oluacls_func(L, "render", _olua_fun_cocos2d_Scene_render);
    oluacls_func(L, "setCameraOrderDirty", _olua_fun_cocos2d_Scene_setCameraOrderDirty);
#if CC_USE_NAVMESH
    oluacls_func(L, "setNavMesh", _olua_fun_cocos2d_Scene_setNavMesh);
#endif
#if CC_USE_NAVMESH
    oluacls_func(L, "setNavMeshDebugCamera", _olua_fun_cocos2d_Scene_setNavMeshDebugCamera);
#endif
#if CC_USE_3D_PHYSICS && CC_ENABLE_BULLET_INTEGRATION
    oluacls_func(L, "setPhysics3DDebugCamera", _olua_fun_cocos2d_Scene_setPhysics3DDebugCamera);
#endif
#if (CC_USE_PHYSICS || (CC_USE_3D_PHYSICS && CC_ENABLE_BULLET_INTEGRATION) || CC_USE_NAVMESH)
    oluacls_func(L, "stepPhysicsAndNavigation", _olua_fun_cocos2d_Scene_stepPhysicsAndNavigation);
#endif
    oluacls_prop(L, "cameras", _olua_fun_cocos2d_Scene_getCameras, nullptr);
    oluacls_prop(L, "defaultCamera", _olua_fun_cocos2d_Scene_getDefaultCamera, nullptr);
    oluacls_prop(L, "lights", _olua_fun_cocos2d_Scene_getLights, nullptr);
#if CC_USE_NAVMESH
    oluacls_prop(L, "navMesh", _olua_fun_cocos2d_Scene_getNavMesh, _olua_fun_cocos2d_Scene_setNavMesh);
#endif
#if CC_USE_PHYSICS
    oluacls_prop(L, "physicsWorld", _olua_fun_cocos2d_Scene_getPhysicsWorld, nullptr);
#endif

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Scene(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Scene")) {
        luaL_error(L, "class not found: cocos2d::Scene");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Layer_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Layer *create()
    cocos2d::Layer *ret = cocos2d::Layer::create();
    int num_ret = olua_push_object(L, ret, "cc.Layer");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Layer_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Layer()
    cocos2d::Layer *ret = new cocos2d::Layer();
    int num_ret = olua_push_object(L, ret, "cc.Layer");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Layer_onAcceleration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    cocos2d::Acceleration *arg1 = nullptr;       /** acc */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_object(L, 1, &self, "cc.Layer");
    olua_check_object(L, 2, &arg1, "cc.Acceleration");
    olua_check_object(L, 3, &arg2, "cc.Event");

    // void onAcceleration(cocos2d::Acceleration *acc, cocos2d::Event *unused_event)
    self->onAcceleration(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Layer_onKeyPressed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    cocos2d::EventKeyboard::KeyCode arg1 = (cocos2d::EventKeyboard::KeyCode)0;       /** keyCode */
    cocos2d::Event *arg2 = nullptr;       /** event */

    olua_to_object(L, 1, &self, "cc.Layer");
    olua_check_enum(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Event");

    // void onKeyPressed(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event *event)
    self->onKeyPressed(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Layer_onKeyReleased(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    cocos2d::EventKeyboard::KeyCode arg1 = (cocos2d::EventKeyboard::KeyCode)0;       /** keyCode */
    cocos2d::Event *arg2 = nullptr;       /** event */

    olua_to_object(L, 1, &self, "cc.Layer");
    olua_check_enum(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Event");

    // void onKeyReleased(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event *event)
    self->onKeyReleased(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Layer_onTouchBegan(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;       /** touch */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_object(L, 1, &self, "cc.Layer");
    olua_check_object(L, 2, &arg1, "cc.Touch");
    olua_check_object(L, 3, &arg2, "cc.Event");

    // bool onTouchBegan(cocos2d::Touch *touch, cocos2d::Event *unused_event)
    bool ret = self->onTouchBegan(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Layer_onTouchCancelled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;       /** touch */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_object(L, 1, &self, "cc.Layer");
    olua_check_object(L, 2, &arg1, "cc.Touch");
    olua_check_object(L, 3, &arg2, "cc.Event");

    // void onTouchCancelled(cocos2d::Touch *touch, cocos2d::Event *unused_event)
    self->onTouchCancelled(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Layer_onTouchEnded(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;       /** touch */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_object(L, 1, &self, "cc.Layer");
    olua_check_object(L, 2, &arg1, "cc.Touch");
    olua_check_object(L, 3, &arg2, "cc.Event");

    // void onTouchEnded(cocos2d::Touch *touch, cocos2d::Event *unused_event)
    self->onTouchEnded(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Layer_onTouchMoved(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    cocos2d::Touch *arg1 = nullptr;       /** touch */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_object(L, 1, &self, "cc.Layer");
    olua_check_object(L, 2, &arg1, "cc.Touch");
    olua_check_object(L, 3, &arg2, "cc.Event");

    // void onTouchMoved(cocos2d::Touch *touch, cocos2d::Event *unused_event)
    self->onTouchMoved(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Layer_onTouchesBegan(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    std::vector<cocos2d::Touch *> arg1;       /** touches */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_object(L, 1, &self, "cc.Layer");
    olua_check_array<cocos2d::Touch *>(L, 2, arg1, [L](cocos2d::Touch **arg1) {
        olua_check_object(L, -1, arg1, "cc.Touch");
    });
    olua_check_object(L, 3, &arg2, "cc.Event");

    // void onTouchesBegan(const std::vector<cocos2d::Touch *> &touches, cocos2d::Event *unused_event)
    self->onTouchesBegan(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Layer_onTouchesCancelled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    std::vector<cocos2d::Touch *> arg1;       /** touches */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_object(L, 1, &self, "cc.Layer");
    olua_check_array<cocos2d::Touch *>(L, 2, arg1, [L](cocos2d::Touch **arg1) {
        olua_check_object(L, -1, arg1, "cc.Touch");
    });
    olua_check_object(L, 3, &arg2, "cc.Event");

    // void onTouchesCancelled(const std::vector<cocos2d::Touch *> &touches, cocos2d::Event *unused_event)
    self->onTouchesCancelled(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Layer_onTouchesEnded(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    std::vector<cocos2d::Touch *> arg1;       /** touches */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_object(L, 1, &self, "cc.Layer");
    olua_check_array<cocos2d::Touch *>(L, 2, arg1, [L](cocos2d::Touch **arg1) {
        olua_check_object(L, -1, arg1, "cc.Touch");
    });
    olua_check_object(L, 3, &arg2, "cc.Event");

    // void onTouchesEnded(const std::vector<cocos2d::Touch *> &touches, cocos2d::Event *unused_event)
    self->onTouchesEnded(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Layer_onTouchesMoved(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *self = nullptr;
    std::vector<cocos2d::Touch *> arg1;       /** touches */
    cocos2d::Event *arg2 = nullptr;       /** unused_event */

    olua_to_object(L, 1, &self, "cc.Layer");
    olua_check_array<cocos2d::Touch *>(L, 2, arg1, [L](cocos2d::Touch **arg1) {
        olua_check_object(L, -1, arg1, "cc.Touch");
    });
    olua_check_object(L, 3, &arg2, "cc.Event");

    // void onTouchesMoved(const std::vector<cocos2d::Touch *> &touches, cocos2d::Event *unused_event)
    self->onTouchesMoved(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_Layer(lua_State *L)
{
    oluacls_class<cocos2d::Layer, cocos2d::Node>(L, "cc.Layer");
    oluacls_func(L, "create", _olua_fun_cocos2d_Layer_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_Layer_new);
    oluacls_func(L, "onAcceleration", _olua_fun_cocos2d_Layer_onAcceleration);
    oluacls_func(L, "onKeyPressed", _olua_fun_cocos2d_Layer_onKeyPressed);
    oluacls_func(L, "onKeyReleased", _olua_fun_cocos2d_Layer_onKeyReleased);
    oluacls_func(L, "onTouchBegan", _olua_fun_cocos2d_Layer_onTouchBegan);
    oluacls_func(L, "onTouchCancelled", _olua_fun_cocos2d_Layer_onTouchCancelled);
    oluacls_func(L, "onTouchEnded", _olua_fun_cocos2d_Layer_onTouchEnded);
    oluacls_func(L, "onTouchMoved", _olua_fun_cocos2d_Layer_onTouchMoved);
    oluacls_func(L, "onTouchesBegan", _olua_fun_cocos2d_Layer_onTouchesBegan);
    oluacls_func(L, "onTouchesCancelled", _olua_fun_cocos2d_Layer_onTouchesCancelled);
    oluacls_func(L, "onTouchesEnded", _olua_fun_cocos2d_Layer_onTouchesEnded);
    oluacls_func(L, "onTouchesMoved", _olua_fun_cocos2d_Layer_onTouchesMoved);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Layer(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Layer")) {
        luaL_error(L, "class not found: cocos2d::Layer");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_LayerColor_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.LayerColor");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.BlendProtocol")) {
            olua_pushobj_as<cocos2d::BlendProtocol>(L, 1, self, "as.cc.BlendProtocol");
            break;
        }

        luaL_error(L, "'cocos2d::LayerColor' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_LayerColor_changeHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    float arg1 = 0;       /** h */

    olua_to_object(L, 1, &self, "cc.LayerColor");
    olua_check_number(L, 2, &arg1);

    // void changeHeight(float h)
    self->changeHeight(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerColor_changeWidth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    float arg1 = 0;       /** w */

    olua_to_object(L, 1, &self, "cc.LayerColor");
    olua_check_number(L, 2, &arg1);

    // void changeWidth(float w)
    self->changeWidth(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerColor_changeWidthAndHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    float arg1 = 0;       /** w */
    float arg2 = 0;       /** h */

    olua_to_object(L, 1, &self, "cc.LayerColor");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // void changeWidthAndHeight(float w, float h)
    self->changeWidthAndHeight(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerColor_create$1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::LayerColor *create()
    cocos2d::LayerColor *ret = cocos2d::LayerColor::create();
    int num_ret = olua_push_object(L, ret, "cc.LayerColor");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerColor_create$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4B arg1;       /** color */
    float arg2 = 0;       /** width */
    float arg3 = 0;       /** height */

    olua_check_cocos2d_Color4B(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::LayerColor *create(const cocos2d::Color4B &color, float width, float height)
    cocos2d::LayerColor *ret = cocos2d::LayerColor::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.LayerColor");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerColor_create$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4B arg1;       /** color */

    olua_check_cocos2d_Color4B(L, 1, &arg1);

    // static cocos2d::LayerColor *create(const cocos2d::Color4B &color)
    cocos2d::LayerColor *ret = cocos2d::LayerColor::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.LayerColor");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerColor_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::LayerColor *create()
        return _olua_fun_cocos2d_LayerColor_create$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_cocos2d_Color4B(L, 1))) {
            // static cocos2d::LayerColor *create(const cocos2d::Color4B &color)
            return _olua_fun_cocos2d_LayerColor_create$3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_cocos2d_Color4B(L, 1)) && (olua_is_number(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::LayerColor *create(const cocos2d::Color4B &color, float width, float height)
            return _olua_fun_cocos2d_LayerColor_create$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerColor::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LayerColor_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerColor");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = self->getBlendFunc();
    int num_ret = olua_push_object(L, ret, "cc.BlendFunc");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerColor_initWithColor$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    cocos2d::Color4B arg1;       /** color */
    float arg2 = 0;       /** width */
    float arg3 = 0;       /** height */

    olua_to_object(L, 1, &self, "cc.LayerColor");
    olua_check_cocos2d_Color4B(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // bool initWithColor(const cocos2d::Color4B &color, float width, float height)
    bool ret = self->initWithColor(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerColor_initWithColor$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.LayerColor");
    olua_check_cocos2d_Color4B(L, 2, &arg1);

    // bool initWithColor(const cocos2d::Color4B &color)
    bool ret = self->initWithColor(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerColor_initWithColor(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.LayerColor")) && (olua_is_cocos2d_Color4B(L, 2))) {
            // bool initWithColor(const cocos2d::Color4B &color)
            return _olua_fun_cocos2d_LayerColor_initWithColor$2(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.LayerColor")) && (olua_is_cocos2d_Color4B(L, 2)) && (olua_is_number(L, 3)) && (olua_is_number(L, 4))) {
            // bool initWithColor(const cocos2d::Color4B &color, float width, float height)
            return _olua_fun_cocos2d_LayerColor_initWithColor$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerColor::initWithColor' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LayerColor_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::LayerColor()
    cocos2d::LayerColor *ret = new cocos2d::LayerColor();
    int num_ret = olua_push_object(L, ret, "cc.LayerColor");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerColor_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerColor *self = nullptr;
    cocos2d::BlendFunc *arg1;       /** blendFunc */

    olua_to_object(L, 1, &self, "cc.LayerColor");
    olua_check_object(L, 2, &arg1, "cc.BlendFunc");

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_LayerColor(lua_State *L)
{
    oluacls_class<cocos2d::LayerColor, cocos2d::Layer>(L, "cc.LayerColor");
    oluacls_func(L, "as", _olua_fun_cocos2d_LayerColor_as);
    oluacls_func(L, "changeHeight", _olua_fun_cocos2d_LayerColor_changeHeight);
    oluacls_func(L, "changeWidth", _olua_fun_cocos2d_LayerColor_changeWidth);
    oluacls_func(L, "changeWidthAndHeight", _olua_fun_cocos2d_LayerColor_changeWidthAndHeight);
    oluacls_func(L, "create", _olua_fun_cocos2d_LayerColor_create);
    oluacls_func(L, "getBlendFunc", _olua_fun_cocos2d_LayerColor_getBlendFunc);
    oluacls_func(L, "initWithColor", _olua_fun_cocos2d_LayerColor_initWithColor);
    oluacls_func(L, "new", _olua_fun_cocos2d_LayerColor_new);
    oluacls_func(L, "setBlendFunc", _olua_fun_cocos2d_LayerColor_setBlendFunc);
    oluacls_prop(L, "blendFunc", _olua_fun_cocos2d_LayerColor_getBlendFunc, _olua_fun_cocos2d_LayerColor_setBlendFunc);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_LayerColor(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.LayerColor")) {
        luaL_error(L, "class not found: cocos2d::LayerColor");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_LayerGradient_create$1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::LayerGradient *create()
    cocos2d::LayerGradient *ret = cocos2d::LayerGradient::create();
    int num_ret = olua_push_object(L, ret, "cc.LayerGradient");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerGradient_create$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4B arg1;       /** start */
    cocos2d::Color4B arg2;       /** end_ */

    olua_check_cocos2d_Color4B(L, 1, &arg1);
    olua_check_cocos2d_Color4B(L, 2, &arg2);

    // static cocos2d::LayerGradient *create(const cocos2d::Color4B &start, const cocos2d::Color4B &end_)
    cocos2d::LayerGradient *ret = cocos2d::LayerGradient::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.LayerGradient");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerGradient_create$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4B arg1;       /** start */
    cocos2d::Color4B arg2;       /** end_ */
    cocos2d::Vec2 *arg3;       /** v */

    olua_check_cocos2d_Color4B(L, 1, &arg1);
    olua_check_cocos2d_Color4B(L, 2, &arg2);
    olua_check_object(L, 3, &arg3, "cc.Vec2");

    // static cocos2d::LayerGradient *create(const cocos2d::Color4B &start, const cocos2d::Color4B &end_, const cocos2d::Vec2 &v)
    cocos2d::LayerGradient *ret = cocos2d::LayerGradient::create(arg1, arg2, *arg3);
    int num_ret = olua_push_object(L, ret, "cc.LayerGradient");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerGradient_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::LayerGradient *create()
        return _olua_fun_cocos2d_LayerGradient_create$1(L);
    }

    if (num_args == 2) {
        // if ((olua_is_cocos2d_Color4B(L, 1)) && (olua_is_cocos2d_Color4B(L, 2))) {
            // static cocos2d::LayerGradient *create(const cocos2d::Color4B &start, const cocos2d::Color4B &end_)
            return _olua_fun_cocos2d_LayerGradient_create$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_cocos2d_Color4B(L, 1)) && (olua_is_cocos2d_Color4B(L, 2)) && (olua_is_object(L, 3, "cc.Vec2"))) {
            // static cocos2d::LayerGradient *create(const cocos2d::Color4B &start, const cocos2d::Color4B &end_, const cocos2d::Vec2 &v)
            return _olua_fun_cocos2d_LayerGradient_create$3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerGradient::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LayerGradient_getEndColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerGradient");

    // const cocos2d::Color3B &getEndColor()
    const cocos2d::Color3B &ret = self->getEndColor();
    int num_ret = olua_push_cocos2d_Color3B(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerGradient_getEndOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerGradient");

    // uint8_t getEndOpacity()
    uint8_t ret = self->getEndOpacity();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerGradient_getStartColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerGradient");

    // const cocos2d::Color3B &getStartColor()
    const cocos2d::Color3B &ret = self->getStartColor();
    int num_ret = olua_push_cocos2d_Color3B(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerGradient_getStartOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerGradient");

    // uint8_t getStartOpacity()
    uint8_t ret = self->getStartOpacity();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerGradient_getVector(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerGradient");

    // const cocos2d::Vec2 &getVector()
    const cocos2d::Vec2 &ret = self->getVector();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerGradient_initWithColor$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Color4B arg1;       /** start */
    cocos2d::Color4B arg2;       /** end_ */

    olua_to_object(L, 1, &self, "cc.LayerGradient");
    olua_check_cocos2d_Color4B(L, 2, &arg1);
    olua_check_cocos2d_Color4B(L, 3, &arg2);

    // bool initWithColor(const cocos2d::Color4B &start, const cocos2d::Color4B &end_)
    bool ret = self->initWithColor(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerGradient_initWithColor$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Color4B arg1;       /** start */
    cocos2d::Color4B arg2;       /** end_ */
    cocos2d::Vec2 *arg3;       /** v */

    olua_to_object(L, 1, &self, "cc.LayerGradient");
    olua_check_cocos2d_Color4B(L, 2, &arg1);
    olua_check_cocos2d_Color4B(L, 3, &arg2);
    olua_check_object(L, 4, &arg3, "cc.Vec2");

    // bool initWithColor(const cocos2d::Color4B &start, const cocos2d::Color4B &end_, const cocos2d::Vec2 &v)
    bool ret = self->initWithColor(arg1, arg2, *arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerGradient_initWithColor(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.LayerGradient")) && (olua_is_cocos2d_Color4B(L, 2)) && (olua_is_cocos2d_Color4B(L, 3))) {
            // bool initWithColor(const cocos2d::Color4B &start, const cocos2d::Color4B &end_)
            return _olua_fun_cocos2d_LayerGradient_initWithColor$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.LayerGradient")) && (olua_is_cocos2d_Color4B(L, 2)) && (olua_is_cocos2d_Color4B(L, 3)) && (olua_is_object(L, 4, "cc.Vec2"))) {
            // bool initWithColor(const cocos2d::Color4B &start, const cocos2d::Color4B &end_, const cocos2d::Vec2 &v)
            return _olua_fun_cocos2d_LayerGradient_initWithColor$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerGradient::initWithColor' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LayerGradient_isCompressedInterpolation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerGradient");

    // bool isCompressedInterpolation()
    bool ret = self->isCompressedInterpolation();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerGradient_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::LayerGradient()
    cocos2d::LayerGradient *ret = new cocos2d::LayerGradient();
    int num_ret = olua_push_object(L, ret, "cc.LayerGradient");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerGradient_setCompressedInterpolation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    bool arg1 = false;       /** compressedInterpolation */

    olua_to_object(L, 1, &self, "cc.LayerGradient");
    olua_check_bool(L, 2, &arg1);

    // void setCompressedInterpolation(bool compressedInterpolation)
    self->setCompressedInterpolation(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerGradient_setEndColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Color3B arg1;       /** endColor */

    olua_to_object(L, 1, &self, "cc.LayerGradient");
    olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void setEndColor(const cocos2d::Color3B &endColor)
    self->setEndColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerGradient_setEndOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    uint8_t arg1 = 0;       /** endOpacity */

    olua_to_object(L, 1, &self, "cc.LayerGradient");
    olua_check_integer(L, 2, &arg1);

    // void setEndOpacity(uint8_t endOpacity)
    self->setEndOpacity(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerGradient_setStartColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Color3B arg1;       /** startColor */

    olua_to_object(L, 1, &self, "cc.LayerGradient");
    olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void setStartColor(const cocos2d::Color3B &startColor)
    self->setStartColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerGradient_setStartOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    uint8_t arg1 = 0;       /** startOpacity */

    olua_to_object(L, 1, &self, "cc.LayerGradient");
    olua_check_integer(L, 2, &arg1);

    // void setStartOpacity(uint8_t startOpacity)
    self->setStartOpacity(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerGradient_setVector(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerGradient *self = nullptr;
    cocos2d::Vec2 *arg1;       /** alongVector */

    olua_to_object(L, 1, &self, "cc.LayerGradient");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setVector(const cocos2d::Vec2 &alongVector)
    self->setVector(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_LayerGradient(lua_State *L)
{
    oluacls_class<cocos2d::LayerGradient, cocos2d::LayerColor>(L, "cc.LayerGradient");
    oluacls_func(L, "create", _olua_fun_cocos2d_LayerGradient_create);
    oluacls_func(L, "getEndColor", _olua_fun_cocos2d_LayerGradient_getEndColor);
    oluacls_func(L, "getEndOpacity", _olua_fun_cocos2d_LayerGradient_getEndOpacity);
    oluacls_func(L, "getStartColor", _olua_fun_cocos2d_LayerGradient_getStartColor);
    oluacls_func(L, "getStartOpacity", _olua_fun_cocos2d_LayerGradient_getStartOpacity);
    oluacls_func(L, "getVector", _olua_fun_cocos2d_LayerGradient_getVector);
    oluacls_func(L, "initWithColor", _olua_fun_cocos2d_LayerGradient_initWithColor);
    oluacls_func(L, "isCompressedInterpolation", _olua_fun_cocos2d_LayerGradient_isCompressedInterpolation);
    oluacls_func(L, "new", _olua_fun_cocos2d_LayerGradient_new);
    oluacls_func(L, "setCompressedInterpolation", _olua_fun_cocos2d_LayerGradient_setCompressedInterpolation);
    oluacls_func(L, "setEndColor", _olua_fun_cocos2d_LayerGradient_setEndColor);
    oluacls_func(L, "setEndOpacity", _olua_fun_cocos2d_LayerGradient_setEndOpacity);
    oluacls_func(L, "setStartColor", _olua_fun_cocos2d_LayerGradient_setStartColor);
    oluacls_func(L, "setStartOpacity", _olua_fun_cocos2d_LayerGradient_setStartOpacity);
    oluacls_func(L, "setVector", _olua_fun_cocos2d_LayerGradient_setVector);
    oluacls_prop(L, "compressedInterpolation", _olua_fun_cocos2d_LayerGradient_isCompressedInterpolation, _olua_fun_cocos2d_LayerGradient_setCompressedInterpolation);
    oluacls_prop(L, "endColor", _olua_fun_cocos2d_LayerGradient_getEndColor, _olua_fun_cocos2d_LayerGradient_setEndColor);
    oluacls_prop(L, "endOpacity", _olua_fun_cocos2d_LayerGradient_getEndOpacity, _olua_fun_cocos2d_LayerGradient_setEndOpacity);
    oluacls_prop(L, "startColor", _olua_fun_cocos2d_LayerGradient_getStartColor, _olua_fun_cocos2d_LayerGradient_setStartColor);
    oluacls_prop(L, "startOpacity", _olua_fun_cocos2d_LayerGradient_getStartOpacity, _olua_fun_cocos2d_LayerGradient_setStartOpacity);
    oluacls_prop(L, "vector", _olua_fun_cocos2d_LayerGradient_getVector, _olua_fun_cocos2d_LayerGradient_setVector);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_LayerGradient(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.LayerGradient")) {
        luaL_error(L, "class not found: cocos2d::LayerGradient");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_LayerRadialGradient_create$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4B arg1;       /** startColor */
    cocos2d::Color4B arg2;       /** endColor */
    float arg3 = 0;       /** radius */
    cocos2d::Vec2 *arg4;       /** center */
    float arg5 = 0;       /** expand */

    olua_check_cocos2d_Color4B(L, 1, &arg1);
    olua_check_cocos2d_Color4B(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_object(L, 4, &arg4, "cc.Vec2");
    olua_check_number(L, 5, &arg5);

    // static cocos2d::LayerRadialGradient *create(const cocos2d::Color4B &startColor, const cocos2d::Color4B &endColor, float radius, const cocos2d::Vec2 &center, float expand)
    cocos2d::LayerRadialGradient *ret = cocos2d::LayerRadialGradient::create(arg1, arg2, arg3, *arg4, arg5);
    int num_ret = olua_push_object(L, ret, "cc.LayerRadialGradient");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_create$2(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::LayerRadialGradient *create()
    cocos2d::LayerRadialGradient *ret = cocos2d::LayerRadialGradient::create();
    int num_ret = olua_push_object(L, ret, "cc.LayerRadialGradient");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::LayerRadialGradient *create()
        return _olua_fun_cocos2d_LayerRadialGradient_create$2(L);
    }

    if (num_args == 5) {
        // if ((olua_is_cocos2d_Color4B(L, 1)) && (olua_is_cocos2d_Color4B(L, 2)) && (olua_is_number(L, 3)) && (olua_is_object(L, 4, "cc.Vec2")) && (olua_is_number(L, 5))) {
            // static cocos2d::LayerRadialGradient *create(const cocos2d::Color4B &startColor, const cocos2d::Color4B &endColor, float radius, const cocos2d::Vec2 &center, float expand)
            return _olua_fun_cocos2d_LayerRadialGradient_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerRadialGradient::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LayerRadialGradient_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");

    // cocos2d::BlendFunc getBlendFunc()
    cocos2d::BlendFunc ret = self->getBlendFunc();
    int num_ret = olua_copy_object(L, ret, "cc.BlendFunc");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_getCenter(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");

    // cocos2d::Vec2 getCenter()
    cocos2d::Vec2 ret = self->getCenter();
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_getEndColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");

    // cocos2d::Color4B getEndColor()
    cocos2d::Color4B ret = self->getEndColor();
    int num_ret = olua_push_cocos2d_Color4B(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_getEndColor3B(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");

    // cocos2d::Color3B getEndColor3B()
    cocos2d::Color3B ret = self->getEndColor3B();
    int num_ret = olua_push_cocos2d_Color3B(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_getEndOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");

    // uint8_t getEndOpacity()
    uint8_t ret = self->getEndOpacity();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_getExpand(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");

    // float getExpand()
    float ret = self->getExpand();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_getRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");

    // float getRadius()
    float ret = self->getRadius();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_getStartColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");

    // cocos2d::Color4B getStartColor()
    cocos2d::Color4B ret = self->getStartColor();
    int num_ret = olua_push_cocos2d_Color4B(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_getStartColor3B(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");

    // cocos2d::Color3B getStartColor3B()
    cocos2d::Color3B ret = self->getStartColor3B();
    int num_ret = olua_push_cocos2d_Color3B(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_getStartOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");

    // uint8_t getStartOpacity()
    uint8_t ret = self->getStartOpacity();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_initWithColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Color4B arg1;       /** startColor */
    cocos2d::Color4B arg2;       /** endColor */
    float arg3 = 0;       /** radius */
    cocos2d::Vec2 *arg4;       /** center */
    float arg5 = 0;       /** expand */

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");
    olua_check_cocos2d_Color4B(L, 2, &arg1);
    olua_check_cocos2d_Color4B(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_object(L, 5, &arg4, "cc.Vec2");
    olua_check_number(L, 6, &arg5);

    // bool initWithColor(const cocos2d::Color4B &startColor, const cocos2d::Color4B &endColor, float radius, const cocos2d::Vec2 &center, float expand)
    bool ret = self->initWithColor(arg1, arg2, arg3, *arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::LayerRadialGradient()
    cocos2d::LayerRadialGradient *ret = new cocos2d::LayerRadialGradient();
    int num_ret = olua_push_object(L, ret, "cc.LayerRadialGradient");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerRadialGradient_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::BlendFunc *arg1;       /** blendFunc */

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");
    olua_check_object(L, 2, &arg1, "cc.BlendFunc");

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerRadialGradient_setCenter(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Vec2 *arg1;       /** center */

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setCenter(const cocos2d::Vec2 &center)
    self->setCenter(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerRadialGradient_setEndColor$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Color3B arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");
    olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void setEndColor(const cocos2d::Color3B &color)
    self->setEndColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerRadialGradient_setEndColor$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");
    olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void setEndColor(const cocos2d::Color4B &color)
    self->setEndColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerRadialGradient_setEndColor(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_object(L, 1, "cc.LayerRadialGradient")) && (olua_is_cocos2d_Color3B(L, 2))) {
            // void setEndColor(const cocos2d::Color3B &color)
            return _olua_fun_cocos2d_LayerRadialGradient_setEndColor$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.LayerRadialGradient")) && (olua_is_cocos2d_Color4B(L, 2))) {
            // void setEndColor(const cocos2d::Color4B &color)
            return _olua_fun_cocos2d_LayerRadialGradient_setEndColor$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerRadialGradient::setEndColor' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LayerRadialGradient_setEndOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    uint8_t arg1 = 0;       /** opacity */

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");
    olua_check_integer(L, 2, &arg1);

    // void setEndOpacity(uint8_t opacity)
    self->setEndOpacity(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerRadialGradient_setExpand(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    float arg1 = 0;       /** expand */

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");
    olua_check_number(L, 2, &arg1);

    // void setExpand(float expand)
    self->setExpand(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerRadialGradient_setRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    float arg1 = 0;       /** radius */

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");
    olua_check_number(L, 2, &arg1);

    // void setRadius(float radius)
    self->setRadius(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerRadialGradient_setStartColor$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Color3B arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");
    olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void setStartColor(const cocos2d::Color3B &color)
    self->setStartColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerRadialGradient_setStartColor$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");
    olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void setStartColor(const cocos2d::Color4B &color)
    self->setStartColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerRadialGradient_setStartColor(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_object(L, 1, "cc.LayerRadialGradient")) && (olua_is_cocos2d_Color3B(L, 2))) {
            // void setStartColor(const cocos2d::Color3B &color)
            return _olua_fun_cocos2d_LayerRadialGradient_setStartColor$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.LayerRadialGradient")) && (olua_is_cocos2d_Color4B(L, 2))) {
            // void setStartColor(const cocos2d::Color4B &color)
            return _olua_fun_cocos2d_LayerRadialGradient_setStartColor$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerRadialGradient::setStartColor' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LayerRadialGradient_setStartOpacity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerRadialGradient *self = nullptr;
    uint8_t arg1 = 0;       /** opacity */

    olua_to_object(L, 1, &self, "cc.LayerRadialGradient");
    olua_check_integer(L, 2, &arg1);

    // void setStartOpacity(uint8_t opacity)
    self->setStartOpacity(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_LayerRadialGradient(lua_State *L)
{
    oluacls_class<cocos2d::LayerRadialGradient, cocos2d::Layer>(L, "cc.LayerRadialGradient");
    oluacls_func(L, "create", _olua_fun_cocos2d_LayerRadialGradient_create);
    oluacls_func(L, "getBlendFunc", _olua_fun_cocos2d_LayerRadialGradient_getBlendFunc);
    oluacls_func(L, "getCenter", _olua_fun_cocos2d_LayerRadialGradient_getCenter);
    oluacls_func(L, "getEndColor", _olua_fun_cocos2d_LayerRadialGradient_getEndColor);
    oluacls_func(L, "getEndColor3B", _olua_fun_cocos2d_LayerRadialGradient_getEndColor3B);
    oluacls_func(L, "getEndOpacity", _olua_fun_cocos2d_LayerRadialGradient_getEndOpacity);
    oluacls_func(L, "getExpand", _olua_fun_cocos2d_LayerRadialGradient_getExpand);
    oluacls_func(L, "getRadius", _olua_fun_cocos2d_LayerRadialGradient_getRadius);
    oluacls_func(L, "getStartColor", _olua_fun_cocos2d_LayerRadialGradient_getStartColor);
    oluacls_func(L, "getStartColor3B", _olua_fun_cocos2d_LayerRadialGradient_getStartColor3B);
    oluacls_func(L, "getStartOpacity", _olua_fun_cocos2d_LayerRadialGradient_getStartOpacity);
    oluacls_func(L, "initWithColor", _olua_fun_cocos2d_LayerRadialGradient_initWithColor);
    oluacls_func(L, "new", _olua_fun_cocos2d_LayerRadialGradient_new);
    oluacls_func(L, "setBlendFunc", _olua_fun_cocos2d_LayerRadialGradient_setBlendFunc);
    oluacls_func(L, "setCenter", _olua_fun_cocos2d_LayerRadialGradient_setCenter);
    oluacls_func(L, "setEndColor", _olua_fun_cocos2d_LayerRadialGradient_setEndColor);
    oluacls_func(L, "setEndOpacity", _olua_fun_cocos2d_LayerRadialGradient_setEndOpacity);
    oluacls_func(L, "setExpand", _olua_fun_cocos2d_LayerRadialGradient_setExpand);
    oluacls_func(L, "setRadius", _olua_fun_cocos2d_LayerRadialGradient_setRadius);
    oluacls_func(L, "setStartColor", _olua_fun_cocos2d_LayerRadialGradient_setStartColor);
    oluacls_func(L, "setStartOpacity", _olua_fun_cocos2d_LayerRadialGradient_setStartOpacity);
    oluacls_prop(L, "blendFunc", _olua_fun_cocos2d_LayerRadialGradient_getBlendFunc, _olua_fun_cocos2d_LayerRadialGradient_setBlendFunc);
    oluacls_prop(L, "center", _olua_fun_cocos2d_LayerRadialGradient_getCenter, _olua_fun_cocos2d_LayerRadialGradient_setCenter);
    oluacls_prop(L, "endColor", _olua_fun_cocos2d_LayerRadialGradient_getEndColor, nullptr);
    oluacls_prop(L, "endColor3B", _olua_fun_cocos2d_LayerRadialGradient_getEndColor3B, nullptr);
    oluacls_prop(L, "endOpacity", _olua_fun_cocos2d_LayerRadialGradient_getEndOpacity, _olua_fun_cocos2d_LayerRadialGradient_setEndOpacity);
    oluacls_prop(L, "expand", _olua_fun_cocos2d_LayerRadialGradient_getExpand, _olua_fun_cocos2d_LayerRadialGradient_setExpand);
    oluacls_prop(L, "radius", _olua_fun_cocos2d_LayerRadialGradient_getRadius, _olua_fun_cocos2d_LayerRadialGradient_setRadius);
    oluacls_prop(L, "startColor", _olua_fun_cocos2d_LayerRadialGradient_getStartColor, nullptr);
    oluacls_prop(L, "startColor3B", _olua_fun_cocos2d_LayerRadialGradient_getStartColor3B, nullptr);
    oluacls_prop(L, "startOpacity", _olua_fun_cocos2d_LayerRadialGradient_getStartOpacity, _olua_fun_cocos2d_LayerRadialGradient_setStartOpacity);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_LayerRadialGradient(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.LayerRadialGradient")) {
        luaL_error(L, "class not found: cocos2d::LayerRadialGradient");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_LayerMultiplex_addLayer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerMultiplex *self = nullptr;
    cocos2d::Layer *arg1 = nullptr;       /** layer */

    olua_to_object(L, 1, &self, "cc.LayerMultiplex");
    olua_check_object(L, 2, &arg1, "cc.Layer");

    // void addLayer(cocos2d::Layer *layer)
    self->addLayer(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::LayerMultiplex *create()
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create();
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */

    olua_check_object(L, 1, &arg1, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$4(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$5(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$6(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$7(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */
    cocos2d::Layer *arg6 = nullptr;       /** layer_$5 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");
    olua_check_object(L, 6, &arg6, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, arg6, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$8(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */
    cocos2d::Layer *arg6 = nullptr;       /** layer_$5 */
    cocos2d::Layer *arg7 = nullptr;       /** layer_$6 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");
    olua_check_object(L, 6, &arg6, "cc.Layer");
    olua_check_object(L, 7, &arg7, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, arg6, arg7, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$9(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */
    cocos2d::Layer *arg6 = nullptr;       /** layer_$5 */
    cocos2d::Layer *arg7 = nullptr;       /** layer_$6 */
    cocos2d::Layer *arg8 = nullptr;       /** layer_$7 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");
    olua_check_object(L, 6, &arg6, "cc.Layer");
    olua_check_object(L, 7, &arg7, "cc.Layer");
    olua_check_object(L, 8, &arg8, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$10(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */
    cocos2d::Layer *arg6 = nullptr;       /** layer_$5 */
    cocos2d::Layer *arg7 = nullptr;       /** layer_$6 */
    cocos2d::Layer *arg8 = nullptr;       /** layer_$7 */
    cocos2d::Layer *arg9 = nullptr;       /** layer_$8 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");
    olua_check_object(L, 6, &arg6, "cc.Layer");
    olua_check_object(L, 7, &arg7, "cc.Layer");
    olua_check_object(L, 8, &arg8, "cc.Layer");
    olua_check_object(L, 9, &arg9, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$11(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */
    cocos2d::Layer *arg6 = nullptr;       /** layer_$5 */
    cocos2d::Layer *arg7 = nullptr;       /** layer_$6 */
    cocos2d::Layer *arg8 = nullptr;       /** layer_$7 */
    cocos2d::Layer *arg9 = nullptr;       /** layer_$8 */
    cocos2d::Layer *arg10 = nullptr;       /** layer_$9 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");
    olua_check_object(L, 6, &arg6, "cc.Layer");
    olua_check_object(L, 7, &arg7, "cc.Layer");
    olua_check_object(L, 8, &arg8, "cc.Layer");
    olua_check_object(L, 9, &arg9, "cc.Layer");
    olua_check_object(L, 10, &arg10, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$12(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */
    cocos2d::Layer *arg6 = nullptr;       /** layer_$5 */
    cocos2d::Layer *arg7 = nullptr;       /** layer_$6 */
    cocos2d::Layer *arg8 = nullptr;       /** layer_$7 */
    cocos2d::Layer *arg9 = nullptr;       /** layer_$8 */
    cocos2d::Layer *arg10 = nullptr;       /** layer_$9 */
    cocos2d::Layer *arg11 = nullptr;       /** layer_$10 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");
    olua_check_object(L, 6, &arg6, "cc.Layer");
    olua_check_object(L, 7, &arg7, "cc.Layer");
    olua_check_object(L, 8, &arg8, "cc.Layer");
    olua_check_object(L, 9, &arg9, "cc.Layer");
    olua_check_object(L, 10, &arg10, "cc.Layer");
    olua_check_object(L, 11, &arg11, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$13(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */
    cocos2d::Layer *arg6 = nullptr;       /** layer_$5 */
    cocos2d::Layer *arg7 = nullptr;       /** layer_$6 */
    cocos2d::Layer *arg8 = nullptr;       /** layer_$7 */
    cocos2d::Layer *arg9 = nullptr;       /** layer_$8 */
    cocos2d::Layer *arg10 = nullptr;       /** layer_$9 */
    cocos2d::Layer *arg11 = nullptr;       /** layer_$10 */
    cocos2d::Layer *arg12 = nullptr;       /** layer_$11 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");
    olua_check_object(L, 6, &arg6, "cc.Layer");
    olua_check_object(L, 7, &arg7, "cc.Layer");
    olua_check_object(L, 8, &arg8, "cc.Layer");
    olua_check_object(L, 9, &arg9, "cc.Layer");
    olua_check_object(L, 10, &arg10, "cc.Layer");
    olua_check_object(L, 11, &arg11, "cc.Layer");
    olua_check_object(L, 12, &arg12, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10, cocos2d::Layer *layer_$11)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$14(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */
    cocos2d::Layer *arg6 = nullptr;       /** layer_$5 */
    cocos2d::Layer *arg7 = nullptr;       /** layer_$6 */
    cocos2d::Layer *arg8 = nullptr;       /** layer_$7 */
    cocos2d::Layer *arg9 = nullptr;       /** layer_$8 */
    cocos2d::Layer *arg10 = nullptr;       /** layer_$9 */
    cocos2d::Layer *arg11 = nullptr;       /** layer_$10 */
    cocos2d::Layer *arg12 = nullptr;       /** layer_$11 */
    cocos2d::Layer *arg13 = nullptr;       /** layer_$12 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");
    olua_check_object(L, 6, &arg6, "cc.Layer");
    olua_check_object(L, 7, &arg7, "cc.Layer");
    olua_check_object(L, 8, &arg8, "cc.Layer");
    olua_check_object(L, 9, &arg9, "cc.Layer");
    olua_check_object(L, 10, &arg10, "cc.Layer");
    olua_check_object(L, 11, &arg11, "cc.Layer");
    olua_check_object(L, 12, &arg12, "cc.Layer");
    olua_check_object(L, 13, &arg13, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10, cocos2d::Layer *layer_$11, cocos2d::Layer *layer_$12)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$15(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */
    cocos2d::Layer *arg6 = nullptr;       /** layer_$5 */
    cocos2d::Layer *arg7 = nullptr;       /** layer_$6 */
    cocos2d::Layer *arg8 = nullptr;       /** layer_$7 */
    cocos2d::Layer *arg9 = nullptr;       /** layer_$8 */
    cocos2d::Layer *arg10 = nullptr;       /** layer_$9 */
    cocos2d::Layer *arg11 = nullptr;       /** layer_$10 */
    cocos2d::Layer *arg12 = nullptr;       /** layer_$11 */
    cocos2d::Layer *arg13 = nullptr;       /** layer_$12 */
    cocos2d::Layer *arg14 = nullptr;       /** layer_$13 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");
    olua_check_object(L, 6, &arg6, "cc.Layer");
    olua_check_object(L, 7, &arg7, "cc.Layer");
    olua_check_object(L, 8, &arg8, "cc.Layer");
    olua_check_object(L, 9, &arg9, "cc.Layer");
    olua_check_object(L, 10, &arg10, "cc.Layer");
    olua_check_object(L, 11, &arg11, "cc.Layer");
    olua_check_object(L, 12, &arg12, "cc.Layer");
    olua_check_object(L, 13, &arg13, "cc.Layer");
    olua_check_object(L, 14, &arg14, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10, cocos2d::Layer *layer_$11, cocos2d::Layer *layer_$12, cocos2d::Layer *layer_$13)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$16(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */
    cocos2d::Layer *arg6 = nullptr;       /** layer_$5 */
    cocos2d::Layer *arg7 = nullptr;       /** layer_$6 */
    cocos2d::Layer *arg8 = nullptr;       /** layer_$7 */
    cocos2d::Layer *arg9 = nullptr;       /** layer_$8 */
    cocos2d::Layer *arg10 = nullptr;       /** layer_$9 */
    cocos2d::Layer *arg11 = nullptr;       /** layer_$10 */
    cocos2d::Layer *arg12 = nullptr;       /** layer_$11 */
    cocos2d::Layer *arg13 = nullptr;       /** layer_$12 */
    cocos2d::Layer *arg14 = nullptr;       /** layer_$13 */
    cocos2d::Layer *arg15 = nullptr;       /** layer_$14 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");
    olua_check_object(L, 6, &arg6, "cc.Layer");
    olua_check_object(L, 7, &arg7, "cc.Layer");
    olua_check_object(L, 8, &arg8, "cc.Layer");
    olua_check_object(L, 9, &arg9, "cc.Layer");
    olua_check_object(L, 10, &arg10, "cc.Layer");
    olua_check_object(L, 11, &arg11, "cc.Layer");
    olua_check_object(L, 12, &arg12, "cc.Layer");
    olua_check_object(L, 13, &arg13, "cc.Layer");
    olua_check_object(L, 14, &arg14, "cc.Layer");
    olua_check_object(L, 15, &arg15, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10, cocos2d::Layer *layer_$11, cocos2d::Layer *layer_$12, cocos2d::Layer *layer_$13, cocos2d::Layer *layer_$14)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$17(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */
    cocos2d::Layer *arg6 = nullptr;       /** layer_$5 */
    cocos2d::Layer *arg7 = nullptr;       /** layer_$6 */
    cocos2d::Layer *arg8 = nullptr;       /** layer_$7 */
    cocos2d::Layer *arg9 = nullptr;       /** layer_$8 */
    cocos2d::Layer *arg10 = nullptr;       /** layer_$9 */
    cocos2d::Layer *arg11 = nullptr;       /** layer_$10 */
    cocos2d::Layer *arg12 = nullptr;       /** layer_$11 */
    cocos2d::Layer *arg13 = nullptr;       /** layer_$12 */
    cocos2d::Layer *arg14 = nullptr;       /** layer_$13 */
    cocos2d::Layer *arg15 = nullptr;       /** layer_$14 */
    cocos2d::Layer *arg16 = nullptr;       /** layer_$15 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");
    olua_check_object(L, 6, &arg6, "cc.Layer");
    olua_check_object(L, 7, &arg7, "cc.Layer");
    olua_check_object(L, 8, &arg8, "cc.Layer");
    olua_check_object(L, 9, &arg9, "cc.Layer");
    olua_check_object(L, 10, &arg10, "cc.Layer");
    olua_check_object(L, 11, &arg11, "cc.Layer");
    olua_check_object(L, 12, &arg12, "cc.Layer");
    olua_check_object(L, 13, &arg13, "cc.Layer");
    olua_check_object(L, 14, &arg14, "cc.Layer");
    olua_check_object(L, 15, &arg15, "cc.Layer");
    olua_check_object(L, 16, &arg16, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10, cocos2d::Layer *layer_$11, cocos2d::Layer *layer_$12, cocos2d::Layer *layer_$13, cocos2d::Layer *layer_$14, cocos2d::Layer *layer_$15)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create$18(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */
    cocos2d::Layer *arg2 = nullptr;       /** layer_$1 */
    cocos2d::Layer *arg3 = nullptr;       /** layer_$2 */
    cocos2d::Layer *arg4 = nullptr;       /** layer_$3 */
    cocos2d::Layer *arg5 = nullptr;       /** layer_$4 */
    cocos2d::Layer *arg6 = nullptr;       /** layer_$5 */
    cocos2d::Layer *arg7 = nullptr;       /** layer_$6 */
    cocos2d::Layer *arg8 = nullptr;       /** layer_$7 */
    cocos2d::Layer *arg9 = nullptr;       /** layer_$8 */
    cocos2d::Layer *arg10 = nullptr;       /** layer_$9 */
    cocos2d::Layer *arg11 = nullptr;       /** layer_$10 */
    cocos2d::Layer *arg12 = nullptr;       /** layer_$11 */
    cocos2d::Layer *arg13 = nullptr;       /** layer_$12 */
    cocos2d::Layer *arg14 = nullptr;       /** layer_$13 */
    cocos2d::Layer *arg15 = nullptr;       /** layer_$14 */
    cocos2d::Layer *arg16 = nullptr;       /** layer_$15 */
    cocos2d::Layer *arg17 = nullptr;       /** layer_$16 */

    olua_check_object(L, 1, &arg1, "cc.Layer");
    olua_check_object(L, 2, &arg2, "cc.Layer");
    olua_check_object(L, 3, &arg3, "cc.Layer");
    olua_check_object(L, 4, &arg4, "cc.Layer");
    olua_check_object(L, 5, &arg5, "cc.Layer");
    olua_check_object(L, 6, &arg6, "cc.Layer");
    olua_check_object(L, 7, &arg7, "cc.Layer");
    olua_check_object(L, 8, &arg8, "cc.Layer");
    olua_check_object(L, 9, &arg9, "cc.Layer");
    olua_check_object(L, 10, &arg10, "cc.Layer");
    olua_check_object(L, 11, &arg11, "cc.Layer");
    olua_check_object(L, 12, &arg12, "cc.Layer");
    olua_check_object(L, 13, &arg13, "cc.Layer");
    olua_check_object(L, 14, &arg14, "cc.Layer");
    olua_check_object(L, 15, &arg15, "cc.Layer");
    olua_check_object(L, 16, &arg16, "cc.Layer");
    olua_check_object(L, 17, &arg17, "cc.Layer");

    // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10, cocos2d::Layer *layer_$11, cocos2d::Layer *layer_$12, cocos2d::Layer *layer_$13, cocos2d::Layer *layer_$14, cocos2d::Layer *layer_$15, cocos2d::Layer *layer_$16)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::create(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, nullptr);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::LayerMultiplex *create()
        return _olua_fun_cocos2d_LayerMultiplex_create$1(L);
    }

    if (num_args == 1) {
        // if ((olua_is_object(L, 1, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer)
            return _olua_fun_cocos2d_LayerMultiplex_create$2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1)
            return _olua_fun_cocos2d_LayerMultiplex_create$3(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2)
            return _olua_fun_cocos2d_LayerMultiplex_create$4(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3)
            return _olua_fun_cocos2d_LayerMultiplex_create$5(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4)
            return _olua_fun_cocos2d_LayerMultiplex_create$6(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer")) && (olua_is_object(L, 6, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5)
            return _olua_fun_cocos2d_LayerMultiplex_create$7(L);
        // }
    }

    if (num_args == 7) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer")) && (olua_is_object(L, 6, "cc.Layer")) && (olua_is_object(L, 7, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6)
            return _olua_fun_cocos2d_LayerMultiplex_create$8(L);
        // }
    }

    if (num_args == 8) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer")) && (olua_is_object(L, 6, "cc.Layer")) && (olua_is_object(L, 7, "cc.Layer")) && (olua_is_object(L, 8, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7)
            return _olua_fun_cocos2d_LayerMultiplex_create$9(L);
        // }
    }

    if (num_args == 9) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer")) && (olua_is_object(L, 6, "cc.Layer")) && (olua_is_object(L, 7, "cc.Layer")) && (olua_is_object(L, 8, "cc.Layer")) && (olua_is_object(L, 9, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8)
            return _olua_fun_cocos2d_LayerMultiplex_create$10(L);
        // }
    }

    if (num_args == 10) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer")) && (olua_is_object(L, 6, "cc.Layer")) && (olua_is_object(L, 7, "cc.Layer")) && (olua_is_object(L, 8, "cc.Layer")) && (olua_is_object(L, 9, "cc.Layer")) && (olua_is_object(L, 10, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9)
            return _olua_fun_cocos2d_LayerMultiplex_create$11(L);
        // }
    }

    if (num_args == 11) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer")) && (olua_is_object(L, 6, "cc.Layer")) && (olua_is_object(L, 7, "cc.Layer")) && (olua_is_object(L, 8, "cc.Layer")) && (olua_is_object(L, 9, "cc.Layer")) && (olua_is_object(L, 10, "cc.Layer")) && (olua_is_object(L, 11, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10)
            return _olua_fun_cocos2d_LayerMultiplex_create$12(L);
        // }
    }

    if (num_args == 12) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer")) && (olua_is_object(L, 6, "cc.Layer")) && (olua_is_object(L, 7, "cc.Layer")) && (olua_is_object(L, 8, "cc.Layer")) && (olua_is_object(L, 9, "cc.Layer")) && (olua_is_object(L, 10, "cc.Layer")) && (olua_is_object(L, 11, "cc.Layer")) && (olua_is_object(L, 12, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10, cocos2d::Layer *layer_$11)
            return _olua_fun_cocos2d_LayerMultiplex_create$13(L);
        // }
    }

    if (num_args == 13) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer")) && (olua_is_object(L, 6, "cc.Layer")) && (olua_is_object(L, 7, "cc.Layer")) && (olua_is_object(L, 8, "cc.Layer")) && (olua_is_object(L, 9, "cc.Layer")) && (olua_is_object(L, 10, "cc.Layer")) && (olua_is_object(L, 11, "cc.Layer")) && (olua_is_object(L, 12, "cc.Layer")) && (olua_is_object(L, 13, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10, cocos2d::Layer *layer_$11, cocos2d::Layer *layer_$12)
            return _olua_fun_cocos2d_LayerMultiplex_create$14(L);
        // }
    }

    if (num_args == 14) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer")) && (olua_is_object(L, 6, "cc.Layer")) && (olua_is_object(L, 7, "cc.Layer")) && (olua_is_object(L, 8, "cc.Layer")) && (olua_is_object(L, 9, "cc.Layer")) && (olua_is_object(L, 10, "cc.Layer")) && (olua_is_object(L, 11, "cc.Layer")) && (olua_is_object(L, 12, "cc.Layer")) && (olua_is_object(L, 13, "cc.Layer")) && (olua_is_object(L, 14, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10, cocos2d::Layer *layer_$11, cocos2d::Layer *layer_$12, cocos2d::Layer *layer_$13)
            return _olua_fun_cocos2d_LayerMultiplex_create$15(L);
        // }
    }

    if (num_args == 15) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer")) && (olua_is_object(L, 6, "cc.Layer")) && (olua_is_object(L, 7, "cc.Layer")) && (olua_is_object(L, 8, "cc.Layer")) && (olua_is_object(L, 9, "cc.Layer")) && (olua_is_object(L, 10, "cc.Layer")) && (olua_is_object(L, 11, "cc.Layer")) && (olua_is_object(L, 12, "cc.Layer")) && (olua_is_object(L, 13, "cc.Layer")) && (olua_is_object(L, 14, "cc.Layer")) && (olua_is_object(L, 15, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10, cocos2d::Layer *layer_$11, cocos2d::Layer *layer_$12, cocos2d::Layer *layer_$13, cocos2d::Layer *layer_$14)
            return _olua_fun_cocos2d_LayerMultiplex_create$16(L);
        // }
    }

    if (num_args == 16) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer")) && (olua_is_object(L, 6, "cc.Layer")) && (olua_is_object(L, 7, "cc.Layer")) && (olua_is_object(L, 8, "cc.Layer")) && (olua_is_object(L, 9, "cc.Layer")) && (olua_is_object(L, 10, "cc.Layer")) && (olua_is_object(L, 11, "cc.Layer")) && (olua_is_object(L, 12, "cc.Layer")) && (olua_is_object(L, 13, "cc.Layer")) && (olua_is_object(L, 14, "cc.Layer")) && (olua_is_object(L, 15, "cc.Layer")) && (olua_is_object(L, 16, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10, cocos2d::Layer *layer_$11, cocos2d::Layer *layer_$12, cocos2d::Layer *layer_$13, cocos2d::Layer *layer_$14, cocos2d::Layer *layer_$15)
            return _olua_fun_cocos2d_LayerMultiplex_create$17(L);
        // }
    }

    if (num_args == 17) {
        // if ((olua_is_object(L, 1, "cc.Layer")) && (olua_is_object(L, 2, "cc.Layer")) && (olua_is_object(L, 3, "cc.Layer")) && (olua_is_object(L, 4, "cc.Layer")) && (olua_is_object(L, 5, "cc.Layer")) && (olua_is_object(L, 6, "cc.Layer")) && (olua_is_object(L, 7, "cc.Layer")) && (olua_is_object(L, 8, "cc.Layer")) && (olua_is_object(L, 9, "cc.Layer")) && (olua_is_object(L, 10, "cc.Layer")) && (olua_is_object(L, 11, "cc.Layer")) && (olua_is_object(L, 12, "cc.Layer")) && (olua_is_object(L, 13, "cc.Layer")) && (olua_is_object(L, 14, "cc.Layer")) && (olua_is_object(L, 15, "cc.Layer")) && (olua_is_object(L, 16, "cc.Layer")) && (olua_is_object(L, 17, "cc.Layer"))) {
            // @variadic static cocos2d::LayerMultiplex *create(cocos2d::Layer *layer, cocos2d::Layer *layer_$1, cocos2d::Layer *layer_$2, cocos2d::Layer *layer_$3, cocos2d::Layer *layer_$4, cocos2d::Layer *layer_$5, cocos2d::Layer *layer_$6, cocos2d::Layer *layer_$7, cocos2d::Layer *layer_$8, cocos2d::Layer *layer_$9, cocos2d::Layer *layer_$10, cocos2d::Layer *layer_$11, cocos2d::Layer *layer_$12, cocos2d::Layer *layer_$13, cocos2d::Layer *layer_$14, cocos2d::Layer *layer_$15, cocos2d::Layer *layer_$16)
            return _olua_fun_cocos2d_LayerMultiplex_create$18(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerMultiplex::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LayerMultiplex_createWithArray(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vector<cocos2d::Layer *> arg1;       /** arrayOfLayers */

    olua_check_array<cocos2d::Layer *>(L, 1, arg1, [L](cocos2d::Layer **arg1) {
        olua_check_object(L, -1, arg1, "cc.Layer");
    });

    // static cocos2d::LayerMultiplex *createWithArray(const cocos2d::Vector<cocos2d::Layer *> &arrayOfLayers)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::createWithArray(arg1);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_createWithLayer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Layer *arg1 = nullptr;       /** layer */

    olua_check_object(L, 1, &arg1, "cc.Layer");

    // static cocos2d::LayerMultiplex *createWithLayer(cocos2d::Layer *layer)
    cocos2d::LayerMultiplex *ret = cocos2d::LayerMultiplex::createWithLayer(arg1);
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_initWithArray(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerMultiplex *self = nullptr;
    cocos2d::Vector<cocos2d::Layer *> arg1;       /** arrayOfLayers */

    olua_to_object(L, 1, &self, "cc.LayerMultiplex");
    olua_check_array<cocos2d::Layer *>(L, 2, arg1, [L](cocos2d::Layer **arg1) {
        olua_check_object(L, -1, arg1, "cc.Layer");
    });

    // bool initWithArray(const cocos2d::Vector<cocos2d::Layer *> &arrayOfLayers)
    bool ret = self->initWithArray(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::LayerMultiplex()
    cocos2d::LayerMultiplex *ret = new cocos2d::LayerMultiplex();
    int num_ret = olua_push_object(L, ret, "cc.LayerMultiplex");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_LayerMultiplex_switchTo$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerMultiplex *self = nullptr;
    int arg1 = 0;       /** n */

    olua_to_object(L, 1, &self, "cc.LayerMultiplex");
    olua_check_integer(L, 2, &arg1);

    // void switchTo(int n)
    self->switchTo(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerMultiplex_switchTo$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerMultiplex *self = nullptr;
    int arg1 = 0;       /** n */
    bool arg2 = false;       /** cleanup */

    olua_to_object(L, 1, &self, "cc.LayerMultiplex");
    olua_check_integer(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void switchTo(int n, bool cleanup)
    self->switchTo(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_LayerMultiplex_switchTo(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.LayerMultiplex")) && (olua_is_integer(L, 2))) {
            // void switchTo(int n)
            return _olua_fun_cocos2d_LayerMultiplex_switchTo$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.LayerMultiplex")) && (olua_is_integer(L, 2)) && (olua_is_bool(L, 3))) {
            // void switchTo(int n, bool cleanup)
            return _olua_fun_cocos2d_LayerMultiplex_switchTo$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::LayerMultiplex::switchTo' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_LayerMultiplex_switchToAndReleaseMe(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::LayerMultiplex *self = nullptr;
    int arg1 = 0;       /** n */

    olua_to_object(L, 1, &self, "cc.LayerMultiplex");
    olua_check_integer(L, 2, &arg1);

    // void switchToAndReleaseMe(int n)
    self->switchToAndReleaseMe(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_LayerMultiplex(lua_State *L)
{
    oluacls_class<cocos2d::LayerMultiplex, cocos2d::Layer>(L, "cc.LayerMultiplex");
    oluacls_func(L, "addLayer", _olua_fun_cocos2d_LayerMultiplex_addLayer);
    oluacls_func(L, "create", _olua_fun_cocos2d_LayerMultiplex_create);
    oluacls_func(L, "createWithArray", _olua_fun_cocos2d_LayerMultiplex_createWithArray);
    oluacls_func(L, "createWithLayer", _olua_fun_cocos2d_LayerMultiplex_createWithLayer);
    oluacls_func(L, "initWithArray", _olua_fun_cocos2d_LayerMultiplex_initWithArray);
    oluacls_func(L, "new", _olua_fun_cocos2d_LayerMultiplex_new);
    oluacls_func(L, "switchTo", _olua_fun_cocos2d_LayerMultiplex_switchTo);
    oluacls_func(L, "switchToAndReleaseMe", _olua_fun_cocos2d_LayerMultiplex_switchToAndReleaseMe);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_LayerMultiplex(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.LayerMultiplex")) {
        luaL_error(L, "class not found: cocos2d::LayerMultiplex");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_TransitionScene_Orientation(lua_State *L)
{
    oluacls_class<cocos2d::TransitionScene::Orientation>(L, "cc.TransitionScene.Orientation");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "DOWN_OVER", (lua_Integer)cocos2d::TransitionScene::Orientation::DOWN_OVER);
    oluacls_enum(L, "LEFT_OVER", (lua_Integer)cocos2d::TransitionScene::Orientation::LEFT_OVER);
    oluacls_enum(L, "RIGHT_OVER", (lua_Integer)cocos2d::TransitionScene::Orientation::RIGHT_OVER);
    oluacls_enum(L, "UP_OVER", (lua_Integer)cocos2d::TransitionScene::Orientation::UP_OVER);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionScene_Orientation(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionScene.Orientation")) {
        luaL_error(L, "class not found: cocos2d::TransitionScene::Orientation");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionScene_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionScene *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionScene *ret = cocos2d::TransitionScene::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionScene");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionScene_finish(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionScene *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TransitionScene");

    // void finish()
    self->finish();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TransitionScene_getDuration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionScene *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TransitionScene");

    // float getDuration()
    float ret = self->getDuration();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionScene_getInScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionScene *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TransitionScene");

    // cocos2d::Scene *getInScene()
    cocos2d::Scene *ret = self->getInScene();
    int num_ret = olua_push_object(L, ret, "cc.Scene");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionScene_hideOutShowIn(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionScene *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TransitionScene");

    // void hideOutShowIn()
    self->hideOutShowIn();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TransitionScene_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionScene()
    cocos2d::TransitionScene *ret = new cocos2d::TransitionScene();
    int num_ret = olua_push_object(L, ret, "cc.TransitionScene");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionScene(lua_State *L)
{
    oluacls_class<cocos2d::TransitionScene, cocos2d::Scene>(L, "cc.TransitionScene");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionScene_create);
    oluacls_func(L, "finish", _olua_fun_cocos2d_TransitionScene_finish);
    oluacls_func(L, "getDuration", _olua_fun_cocos2d_TransitionScene_getDuration);
    oluacls_func(L, "getInScene", _olua_fun_cocos2d_TransitionScene_getInScene);
    oluacls_func(L, "hideOutShowIn", _olua_fun_cocos2d_TransitionScene_hideOutShowIn);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionScene_new);
    oluacls_prop(L, "duration", _olua_fun_cocos2d_TransitionScene_getDuration, nullptr);
    oluacls_prop(L, "inScene", _olua_fun_cocos2d_TransitionScene_getInScene, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionScene(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionScene")) {
        luaL_error(L, "class not found: cocos2d::TransitionScene");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionEaseScene___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TransitionEaseScene *)olua_toobj(L, 1, "cc.TransitionEaseScene");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TransitionEaseScene_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionEaseScene *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_object(L, 1, &self, "cc.TransitionEaseScene");
    olua_check_object(L, 2, &arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@addref(action ^) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = self->easeActionWithAction(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ActionInterval");

    // insert code after call
    olua_addref(L, 1, "action", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionEaseScene(lua_State *L)
{
    oluacls_class<cocos2d::TransitionEaseScene>(L, "cc.TransitionEaseScene");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_TransitionEaseScene___gc);
    oluacls_func(L, "easeActionWithAction", _olua_fun_cocos2d_TransitionEaseScene_easeActionWithAction);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionEaseScene(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionEaseScene")) {
        luaL_error(L, "class not found: cocos2d::TransitionEaseScene");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionSceneOriented_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */
    cocos2d::TransitionScene::Orientation arg3 = (cocos2d::TransitionScene::Orientation)0;       /** orientation */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");
    olua_check_enum(L, 3, &arg3);

    // static cocos2d::TransitionSceneOriented *create(float t, @addref(scenes |) cocos2d::Scene *scene, cocos2d::TransitionScene::Orientation orientation)
    cocos2d::TransitionSceneOriented *ret = cocos2d::TransitionSceneOriented::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.TransitionSceneOriented");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionSceneOriented_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionSceneOriented()
    cocos2d::TransitionSceneOriented *ret = new cocos2d::TransitionSceneOriented();
    int num_ret = olua_push_object(L, ret, "cc.TransitionSceneOriented");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionSceneOriented(lua_State *L)
{
    oluacls_class<cocos2d::TransitionSceneOriented, cocos2d::TransitionScene>(L, "cc.TransitionSceneOriented");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionSceneOriented_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionSceneOriented_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionSceneOriented(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionSceneOriented")) {
        luaL_error(L, "class not found: cocos2d::TransitionSceneOriented");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionRotoZoom_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionRotoZoom *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionRotoZoom *ret = cocos2d::TransitionRotoZoom::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionRotoZoom");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionRotoZoom_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionRotoZoom()
    cocos2d::TransitionRotoZoom *ret = new cocos2d::TransitionRotoZoom();
    int num_ret = olua_push_object(L, ret, "cc.TransitionRotoZoom");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionRotoZoom(lua_State *L)
{
    oluacls_class<cocos2d::TransitionRotoZoom, cocos2d::TransitionScene>(L, "cc.TransitionRotoZoom");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionRotoZoom_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionRotoZoom_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionRotoZoom(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionRotoZoom")) {
        luaL_error(L, "class not found: cocos2d::TransitionRotoZoom");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionJumpZoom_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionJumpZoom *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionJumpZoom *ret = cocos2d::TransitionJumpZoom::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionJumpZoom");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionJumpZoom_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionJumpZoom()
    cocos2d::TransitionJumpZoom *ret = new cocos2d::TransitionJumpZoom();
    int num_ret = olua_push_object(L, ret, "cc.TransitionJumpZoom");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionJumpZoom(lua_State *L)
{
    oluacls_class<cocos2d::TransitionJumpZoom, cocos2d::TransitionScene>(L, "cc.TransitionJumpZoom");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionJumpZoom_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionJumpZoom_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionJumpZoom(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionJumpZoom")) {
        luaL_error(L, "class not found: cocos2d::TransitionJumpZoom");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionMoveInL_action(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionMoveInL *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TransitionMoveInL");

    // cocos2d::ActionInterval *action()
    cocos2d::ActionInterval *ret = self->action();
    int num_ret = olua_push_object(L, ret, "cc.ActionInterval");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionMoveInL_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionMoveInL *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.TransitionMoveInL");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.TransitionEaseScene")) {
            olua_pushobj_as<cocos2d::TransitionEaseScene>(L, 1, self, "as.cc.TransitionEaseScene");
            break;
        }

        luaL_error(L, "'cocos2d::TransitionMoveInL' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_TransitionMoveInL_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionMoveInL *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionMoveInL *ret = cocos2d::TransitionMoveInL::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionMoveInL");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionMoveInL_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionMoveInL *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_object(L, 1, &self, "cc.TransitionMoveInL");
    olua_check_object(L, 2, &arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@addref(action ^) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = self->easeActionWithAction(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ActionInterval");

    // insert code after call
    olua_addref(L, 1, "action", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionMoveInL_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionMoveInL()
    cocos2d::TransitionMoveInL *ret = new cocos2d::TransitionMoveInL();
    int num_ret = olua_push_object(L, ret, "cc.TransitionMoveInL");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionMoveInL(lua_State *L)
{
    oluacls_class<cocos2d::TransitionMoveInL, cocos2d::TransitionScene>(L, "cc.TransitionMoveInL");
    oluacls_func(L, "action", _olua_fun_cocos2d_TransitionMoveInL_action);
    oluacls_func(L, "as", _olua_fun_cocos2d_TransitionMoveInL_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionMoveInL_create);
    oluacls_func(L, "easeActionWithAction", _olua_fun_cocos2d_TransitionMoveInL_easeActionWithAction);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionMoveInL_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionMoveInL(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionMoveInL")) {
        luaL_error(L, "class not found: cocos2d::TransitionMoveInL");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionMoveInR_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionMoveInR *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionMoveInR *ret = cocos2d::TransitionMoveInR::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionMoveInR");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionMoveInR_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionMoveInR()
    cocos2d::TransitionMoveInR *ret = new cocos2d::TransitionMoveInR();
    int num_ret = olua_push_object(L, ret, "cc.TransitionMoveInR");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionMoveInR(lua_State *L)
{
    oluacls_class<cocos2d::TransitionMoveInR, cocos2d::TransitionMoveInL>(L, "cc.TransitionMoveInR");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionMoveInR_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionMoveInR_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionMoveInR(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionMoveInR")) {
        luaL_error(L, "class not found: cocos2d::TransitionMoveInR");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionMoveInT_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionMoveInT *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionMoveInT *ret = cocos2d::TransitionMoveInT::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionMoveInT");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionMoveInT_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionMoveInT()
    cocos2d::TransitionMoveInT *ret = new cocos2d::TransitionMoveInT();
    int num_ret = olua_push_object(L, ret, "cc.TransitionMoveInT");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionMoveInT(lua_State *L)
{
    oluacls_class<cocos2d::TransitionMoveInT, cocos2d::TransitionMoveInL>(L, "cc.TransitionMoveInT");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionMoveInT_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionMoveInT_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionMoveInT(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionMoveInT")) {
        luaL_error(L, "class not found: cocos2d::TransitionMoveInT");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionMoveInB_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionMoveInB *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionMoveInB *ret = cocos2d::TransitionMoveInB::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionMoveInB");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionMoveInB_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionMoveInB()
    cocos2d::TransitionMoveInB *ret = new cocos2d::TransitionMoveInB();
    int num_ret = olua_push_object(L, ret, "cc.TransitionMoveInB");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionMoveInB(lua_State *L)
{
    oluacls_class<cocos2d::TransitionMoveInB, cocos2d::TransitionMoveInL>(L, "cc.TransitionMoveInB");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionMoveInB_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionMoveInB_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionMoveInB(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionMoveInB")) {
        luaL_error(L, "class not found: cocos2d::TransitionMoveInB");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionSlideInL_action(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionSlideInL *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TransitionSlideInL");

    // cocos2d::ActionInterval *action()
    cocos2d::ActionInterval *ret = self->action();
    int num_ret = olua_push_object(L, ret, "cc.ActionInterval");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionSlideInL_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionSlideInL *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.TransitionSlideInL");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.TransitionEaseScene")) {
            olua_pushobj_as<cocos2d::TransitionEaseScene>(L, 1, self, "as.cc.TransitionEaseScene");
            break;
        }

        luaL_error(L, "'cocos2d::TransitionSlideInL' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_TransitionSlideInL_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionSlideInL *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionSlideInL *ret = cocos2d::TransitionSlideInL::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionSlideInL");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionSlideInL_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionSlideInL *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_object(L, 1, &self, "cc.TransitionSlideInL");
    olua_check_object(L, 2, &arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@addref(action ^) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = self->easeActionWithAction(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ActionInterval");

    // insert code after call
    olua_addref(L, 1, "action", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionSlideInL_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionSlideInL()
    cocos2d::TransitionSlideInL *ret = new cocos2d::TransitionSlideInL();
    int num_ret = olua_push_object(L, ret, "cc.TransitionSlideInL");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionSlideInL(lua_State *L)
{
    oluacls_class<cocos2d::TransitionSlideInL, cocos2d::TransitionScene>(L, "cc.TransitionSlideInL");
    oluacls_func(L, "action", _olua_fun_cocos2d_TransitionSlideInL_action);
    oluacls_func(L, "as", _olua_fun_cocos2d_TransitionSlideInL_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionSlideInL_create);
    oluacls_func(L, "easeActionWithAction", _olua_fun_cocos2d_TransitionSlideInL_easeActionWithAction);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionSlideInL_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionSlideInL(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionSlideInL")) {
        luaL_error(L, "class not found: cocos2d::TransitionSlideInL");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionSlideInR_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionSlideInR *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionSlideInR *ret = cocos2d::TransitionSlideInR::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionSlideInR");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionSlideInR_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionSlideInR()
    cocos2d::TransitionSlideInR *ret = new cocos2d::TransitionSlideInR();
    int num_ret = olua_push_object(L, ret, "cc.TransitionSlideInR");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionSlideInR(lua_State *L)
{
    oluacls_class<cocos2d::TransitionSlideInR, cocos2d::TransitionSlideInL>(L, "cc.TransitionSlideInR");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionSlideInR_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionSlideInR_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionSlideInR(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionSlideInR")) {
        luaL_error(L, "class not found: cocos2d::TransitionSlideInR");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionSlideInB_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionSlideInB *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionSlideInB *ret = cocos2d::TransitionSlideInB::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionSlideInB");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionSlideInB_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionSlideInB()
    cocos2d::TransitionSlideInB *ret = new cocos2d::TransitionSlideInB();
    int num_ret = olua_push_object(L, ret, "cc.TransitionSlideInB");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionSlideInB(lua_State *L)
{
    oluacls_class<cocos2d::TransitionSlideInB, cocos2d::TransitionSlideInL>(L, "cc.TransitionSlideInB");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionSlideInB_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionSlideInB_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionSlideInB(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionSlideInB")) {
        luaL_error(L, "class not found: cocos2d::TransitionSlideInB");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionSlideInT_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionSlideInT *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionSlideInT *ret = cocos2d::TransitionSlideInT::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionSlideInT");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionSlideInT_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionSlideInT()
    cocos2d::TransitionSlideInT *ret = new cocos2d::TransitionSlideInT();
    int num_ret = olua_push_object(L, ret, "cc.TransitionSlideInT");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionSlideInT(lua_State *L)
{
    oluacls_class<cocos2d::TransitionSlideInT, cocos2d::TransitionSlideInL>(L, "cc.TransitionSlideInT");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionSlideInT_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionSlideInT_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionSlideInT(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionSlideInT")) {
        luaL_error(L, "class not found: cocos2d::TransitionSlideInT");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionShrinkGrow_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionShrinkGrow *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.TransitionShrinkGrow");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.TransitionEaseScene")) {
            olua_pushobj_as<cocos2d::TransitionEaseScene>(L, 1, self, "as.cc.TransitionEaseScene");
            break;
        }

        luaL_error(L, "'cocos2d::TransitionShrinkGrow' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_TransitionShrinkGrow_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionShrinkGrow *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionShrinkGrow *ret = cocos2d::TransitionShrinkGrow::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionShrinkGrow");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionShrinkGrow_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionShrinkGrow *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_object(L, 1, &self, "cc.TransitionShrinkGrow");
    olua_check_object(L, 2, &arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@addref(action ^) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = self->easeActionWithAction(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ActionInterval");

    // insert code after call
    olua_addref(L, 1, "action", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionShrinkGrow_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionShrinkGrow()
    cocos2d::TransitionShrinkGrow *ret = new cocos2d::TransitionShrinkGrow();
    int num_ret = olua_push_object(L, ret, "cc.TransitionShrinkGrow");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionShrinkGrow(lua_State *L)
{
    oluacls_class<cocos2d::TransitionShrinkGrow, cocos2d::TransitionScene>(L, "cc.TransitionShrinkGrow");
    oluacls_func(L, "as", _olua_fun_cocos2d_TransitionShrinkGrow_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionShrinkGrow_create);
    oluacls_func(L, "easeActionWithAction", _olua_fun_cocos2d_TransitionShrinkGrow_easeActionWithAction);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionShrinkGrow_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionShrinkGrow(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionShrinkGrow")) {
        luaL_error(L, "class not found: cocos2d::TransitionShrinkGrow");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionFlipX_create$1(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */
    cocos2d::TransitionScene::Orientation arg3 = (cocos2d::TransitionScene::Orientation)0;       /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");
    olua_check_enum(L, 3, &arg3);

    // static cocos2d::TransitionFlipX *create(float t, @addref(scenes |) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
    cocos2d::TransitionFlipX *ret = cocos2d::TransitionFlipX::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.TransitionFlipX");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFlipX_create$2(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionFlipX *create(float t, @addref(scenes |) cocos2d::Scene *s)
    cocos2d::TransitionFlipX *ret = cocos2d::TransitionFlipX::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionFlipX");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFlipX_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionFlipX *create(float t, @addref(scenes |) cocos2d::Scene *s)
            return _olua_fun_cocos2d_TransitionFlipX_create$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene")) && (olua_is_enum(L, 3))) {
            // static cocos2d::TransitionFlipX *create(float t, @addref(scenes |) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
            return _olua_fun_cocos2d_TransitionFlipX_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionFlipX::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TransitionFlipX_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionFlipX()
    cocos2d::TransitionFlipX *ret = new cocos2d::TransitionFlipX();
    int num_ret = olua_push_object(L, ret, "cc.TransitionFlipX");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionFlipX(lua_State *L)
{
    oluacls_class<cocos2d::TransitionFlipX, cocos2d::TransitionSceneOriented>(L, "cc.TransitionFlipX");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionFlipX_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionFlipX_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionFlipX(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionFlipX")) {
        luaL_error(L, "class not found: cocos2d::TransitionFlipX");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionFlipY_create$1(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */
    cocos2d::TransitionScene::Orientation arg3 = (cocos2d::TransitionScene::Orientation)0;       /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");
    olua_check_enum(L, 3, &arg3);

    // static cocos2d::TransitionFlipY *create(float t, @addref(scenes |) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
    cocos2d::TransitionFlipY *ret = cocos2d::TransitionFlipY::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.TransitionFlipY");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFlipY_create$2(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionFlipY *create(float t, @addref(scenes |) cocos2d::Scene *s)
    cocos2d::TransitionFlipY *ret = cocos2d::TransitionFlipY::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionFlipY");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFlipY_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionFlipY *create(float t, @addref(scenes |) cocos2d::Scene *s)
            return _olua_fun_cocos2d_TransitionFlipY_create$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene")) && (olua_is_enum(L, 3))) {
            // static cocos2d::TransitionFlipY *create(float t, @addref(scenes |) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
            return _olua_fun_cocos2d_TransitionFlipY_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionFlipY::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TransitionFlipY_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionFlipY()
    cocos2d::TransitionFlipY *ret = new cocos2d::TransitionFlipY();
    int num_ret = olua_push_object(L, ret, "cc.TransitionFlipY");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionFlipY(lua_State *L)
{
    oluacls_class<cocos2d::TransitionFlipY, cocos2d::TransitionSceneOriented>(L, "cc.TransitionFlipY");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionFlipY_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionFlipY_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionFlipY(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionFlipY")) {
        luaL_error(L, "class not found: cocos2d::TransitionFlipY");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionFlipAngular_create$1(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */
    cocos2d::TransitionScene::Orientation arg3 = (cocos2d::TransitionScene::Orientation)0;       /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");
    olua_check_enum(L, 3, &arg3);

    // static cocos2d::TransitionFlipAngular *create(float t, @addref(scenes |) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
    cocos2d::TransitionFlipAngular *ret = cocos2d::TransitionFlipAngular::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.TransitionFlipAngular");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFlipAngular_create$2(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionFlipAngular *create(float t, @addref(scenes |) cocos2d::Scene *s)
    cocos2d::TransitionFlipAngular *ret = cocos2d::TransitionFlipAngular::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionFlipAngular");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFlipAngular_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionFlipAngular *create(float t, @addref(scenes |) cocos2d::Scene *s)
            return _olua_fun_cocos2d_TransitionFlipAngular_create$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene")) && (olua_is_enum(L, 3))) {
            // static cocos2d::TransitionFlipAngular *create(float t, @addref(scenes |) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
            return _olua_fun_cocos2d_TransitionFlipAngular_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionFlipAngular::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TransitionFlipAngular_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionFlipAngular()
    cocos2d::TransitionFlipAngular *ret = new cocos2d::TransitionFlipAngular();
    int num_ret = olua_push_object(L, ret, "cc.TransitionFlipAngular");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionFlipAngular(lua_State *L)
{
    oluacls_class<cocos2d::TransitionFlipAngular, cocos2d::TransitionSceneOriented>(L, "cc.TransitionFlipAngular");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionFlipAngular_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionFlipAngular_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionFlipAngular(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionFlipAngular")) {
        luaL_error(L, "class not found: cocos2d::TransitionFlipAngular");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionZoomFlipX_create$1(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */
    cocos2d::TransitionScene::Orientation arg3 = (cocos2d::TransitionScene::Orientation)0;       /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");
    olua_check_enum(L, 3, &arg3);

    // static cocos2d::TransitionZoomFlipX *create(float t, @addref(scenes |) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
    cocos2d::TransitionZoomFlipX *ret = cocos2d::TransitionZoomFlipX::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.TransitionZoomFlipX");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionZoomFlipX_create$2(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionZoomFlipX *create(float t, @addref(scenes |) cocos2d::Scene *s)
    cocos2d::TransitionZoomFlipX *ret = cocos2d::TransitionZoomFlipX::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionZoomFlipX");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionZoomFlipX_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionZoomFlipX *create(float t, @addref(scenes |) cocos2d::Scene *s)
            return _olua_fun_cocos2d_TransitionZoomFlipX_create$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene")) && (olua_is_enum(L, 3))) {
            // static cocos2d::TransitionZoomFlipX *create(float t, @addref(scenes |) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
            return _olua_fun_cocos2d_TransitionZoomFlipX_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionZoomFlipX::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TransitionZoomFlipX_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionZoomFlipX()
    cocos2d::TransitionZoomFlipX *ret = new cocos2d::TransitionZoomFlipX();
    int num_ret = olua_push_object(L, ret, "cc.TransitionZoomFlipX");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionZoomFlipX(lua_State *L)
{
    oluacls_class<cocos2d::TransitionZoomFlipX, cocos2d::TransitionSceneOriented>(L, "cc.TransitionZoomFlipX");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionZoomFlipX_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionZoomFlipX_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionZoomFlipX(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionZoomFlipX")) {
        luaL_error(L, "class not found: cocos2d::TransitionZoomFlipX");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionZoomFlipY_create$1(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */
    cocos2d::TransitionScene::Orientation arg3 = (cocos2d::TransitionScene::Orientation)0;       /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");
    olua_check_enum(L, 3, &arg3);

    // static cocos2d::TransitionZoomFlipY *create(float t, @addref(scenes |) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
    cocos2d::TransitionZoomFlipY *ret = cocos2d::TransitionZoomFlipY::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.TransitionZoomFlipY");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionZoomFlipY_create$2(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionZoomFlipY *create(float t, @addref(scenes |) cocos2d::Scene *s)
    cocos2d::TransitionZoomFlipY *ret = cocos2d::TransitionZoomFlipY::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionZoomFlipY");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionZoomFlipY_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionZoomFlipY *create(float t, @addref(scenes |) cocos2d::Scene *s)
            return _olua_fun_cocos2d_TransitionZoomFlipY_create$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene")) && (olua_is_enum(L, 3))) {
            // static cocos2d::TransitionZoomFlipY *create(float t, @addref(scenes |) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
            return _olua_fun_cocos2d_TransitionZoomFlipY_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionZoomFlipY::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TransitionZoomFlipY_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionZoomFlipY()
    cocos2d::TransitionZoomFlipY *ret = new cocos2d::TransitionZoomFlipY();
    int num_ret = olua_push_object(L, ret, "cc.TransitionZoomFlipY");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionZoomFlipY(lua_State *L)
{
    oluacls_class<cocos2d::TransitionZoomFlipY, cocos2d::TransitionSceneOriented>(L, "cc.TransitionZoomFlipY");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionZoomFlipY_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionZoomFlipY_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionZoomFlipY(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionZoomFlipY")) {
        luaL_error(L, "class not found: cocos2d::TransitionZoomFlipY");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionZoomFlipAngular_create$1(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */
    cocos2d::TransitionScene::Orientation arg3 = (cocos2d::TransitionScene::Orientation)0;       /** o */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");
    olua_check_enum(L, 3, &arg3);

    // static cocos2d::TransitionZoomFlipAngular *create(float t, @addref(scenes |) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
    cocos2d::TransitionZoomFlipAngular *ret = cocos2d::TransitionZoomFlipAngular::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.TransitionZoomFlipAngular");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionZoomFlipAngular_create$2(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** s */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionZoomFlipAngular *create(float t, @addref(scenes |) cocos2d::Scene *s)
    cocos2d::TransitionZoomFlipAngular *ret = cocos2d::TransitionZoomFlipAngular::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionZoomFlipAngular");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionZoomFlipAngular_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionZoomFlipAngular *create(float t, @addref(scenes |) cocos2d::Scene *s)
            return _olua_fun_cocos2d_TransitionZoomFlipAngular_create$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene")) && (olua_is_enum(L, 3))) {
            // static cocos2d::TransitionZoomFlipAngular *create(float t, @addref(scenes |) cocos2d::Scene *s, cocos2d::TransitionScene::Orientation o)
            return _olua_fun_cocos2d_TransitionZoomFlipAngular_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionZoomFlipAngular::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TransitionZoomFlipAngular_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionZoomFlipAngular()
    cocos2d::TransitionZoomFlipAngular *ret = new cocos2d::TransitionZoomFlipAngular();
    int num_ret = olua_push_object(L, ret, "cc.TransitionZoomFlipAngular");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionZoomFlipAngular(lua_State *L)
{
    oluacls_class<cocos2d::TransitionZoomFlipAngular, cocos2d::TransitionSceneOriented>(L, "cc.TransitionZoomFlipAngular");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionZoomFlipAngular_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionZoomFlipAngular_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionZoomFlipAngular(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionZoomFlipAngular")) {
        luaL_error(L, "class not found: cocos2d::TransitionZoomFlipAngular");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionFade_create$1(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** duration */
    cocos2d::Scene *arg2 = nullptr;       /** scene */
    cocos2d::Color3B arg3;       /** color */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");
    olua_check_cocos2d_Color3B(L, 3, &arg3);

    // static cocos2d::TransitionFade *create(float duration, @addref(scenes |) cocos2d::Scene *scene, const cocos2d::Color3B &color)
    cocos2d::TransitionFade *ret = cocos2d::TransitionFade::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.TransitionFade");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFade_create$2(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** duration */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionFade *create(float duration, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionFade *ret = cocos2d::TransitionFade::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionFade");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFade_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene"))) {
            // static cocos2d::TransitionFade *create(float duration, @addref(scenes |) cocos2d::Scene *scene)
            return _olua_fun_cocos2d_TransitionFade_create$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_number(L, 1)) && (olua_is_object(L, 2, "cc.Scene")) && (olua_is_cocos2d_Color3B(L, 3))) {
            // static cocos2d::TransitionFade *create(float duration, @addref(scenes |) cocos2d::Scene *scene, const cocos2d::Color3B &color)
            return _olua_fun_cocos2d_TransitionFade_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TransitionFade::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TransitionFade_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionFade()
    cocos2d::TransitionFade *ret = new cocos2d::TransitionFade();
    int num_ret = olua_push_object(L, ret, "cc.TransitionFade");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionFade(lua_State *L)
{
    oluacls_class<cocos2d::TransitionFade, cocos2d::TransitionScene>(L, "cc.TransitionFade");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionFade_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionFade_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionFade(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionFade")) {
        luaL_error(L, "class not found: cocos2d::TransitionFade");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionCrossFade_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionCrossFade *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionCrossFade *ret = cocos2d::TransitionCrossFade::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionCrossFade");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionCrossFade_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionCrossFade()
    cocos2d::TransitionCrossFade *ret = new cocos2d::TransitionCrossFade();
    int num_ret = olua_push_object(L, ret, "cc.TransitionCrossFade");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionCrossFade(lua_State *L)
{
    oluacls_class<cocos2d::TransitionCrossFade, cocos2d::TransitionScene>(L, "cc.TransitionCrossFade");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionCrossFade_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionCrossFade_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionCrossFade(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionCrossFade")) {
        luaL_error(L, "class not found: cocos2d::TransitionCrossFade");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionTurnOffTiles_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionTurnOffTiles *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.TransitionTurnOffTiles");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.TransitionEaseScene")) {
            olua_pushobj_as<cocos2d::TransitionEaseScene>(L, 1, self, "as.cc.TransitionEaseScene");
            break;
        }

        luaL_error(L, "'cocos2d::TransitionTurnOffTiles' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_TransitionTurnOffTiles_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionTurnOffTiles *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionTurnOffTiles *ret = cocos2d::TransitionTurnOffTiles::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionTurnOffTiles");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionTurnOffTiles_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionTurnOffTiles *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_object(L, 1, &self, "cc.TransitionTurnOffTiles");
    olua_check_object(L, 2, &arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@addref(action ^) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = self->easeActionWithAction(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ActionInterval");

    // insert code after call
    olua_addref(L, 1, "action", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionTurnOffTiles_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionTurnOffTiles()
    cocos2d::TransitionTurnOffTiles *ret = new cocos2d::TransitionTurnOffTiles();
    int num_ret = olua_push_object(L, ret, "cc.TransitionTurnOffTiles");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionTurnOffTiles(lua_State *L)
{
    oluacls_class<cocos2d::TransitionTurnOffTiles, cocos2d::TransitionScene>(L, "cc.TransitionTurnOffTiles");
    oluacls_func(L, "as", _olua_fun_cocos2d_TransitionTurnOffTiles_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionTurnOffTiles_create);
    oluacls_func(L, "easeActionWithAction", _olua_fun_cocos2d_TransitionTurnOffTiles_easeActionWithAction);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionTurnOffTiles_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionTurnOffTiles(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionTurnOffTiles")) {
        luaL_error(L, "class not found: cocos2d::TransitionTurnOffTiles");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionSplitCols_action(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionSplitCols *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TransitionSplitCols");

    // cocos2d::ActionInterval *action()
    cocos2d::ActionInterval *ret = self->action();
    int num_ret = olua_push_object(L, ret, "cc.ActionInterval");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionSplitCols_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionSplitCols *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.TransitionSplitCols");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.TransitionEaseScene")) {
            olua_pushobj_as<cocos2d::TransitionEaseScene>(L, 1, self, "as.cc.TransitionEaseScene");
            break;
        }

        luaL_error(L, "'cocos2d::TransitionSplitCols' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_TransitionSplitCols_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionSplitCols *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionSplitCols *ret = cocos2d::TransitionSplitCols::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionSplitCols");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionSplitCols_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionSplitCols *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_object(L, 1, &self, "cc.TransitionSplitCols");
    olua_check_object(L, 2, &arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@addref(action ^) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = self->easeActionWithAction(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ActionInterval");

    // insert code after call
    olua_addref(L, 1, "action", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionSplitCols_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionSplitCols()
    cocos2d::TransitionSplitCols *ret = new cocos2d::TransitionSplitCols();
    int num_ret = olua_push_object(L, ret, "cc.TransitionSplitCols");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionSplitCols(lua_State *L)
{
    oluacls_class<cocos2d::TransitionSplitCols, cocos2d::TransitionScene>(L, "cc.TransitionSplitCols");
    oluacls_func(L, "action", _olua_fun_cocos2d_TransitionSplitCols_action);
    oluacls_func(L, "as", _olua_fun_cocos2d_TransitionSplitCols_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionSplitCols_create);
    oluacls_func(L, "easeActionWithAction", _olua_fun_cocos2d_TransitionSplitCols_easeActionWithAction);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionSplitCols_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionSplitCols(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionSplitCols")) {
        luaL_error(L, "class not found: cocos2d::TransitionSplitCols");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionSplitRows_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionSplitRows *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionSplitRows *ret = cocos2d::TransitionSplitRows::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionSplitRows");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionSplitRows_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionSplitRows()
    cocos2d::TransitionSplitRows *ret = new cocos2d::TransitionSplitRows();
    int num_ret = olua_push_object(L, ret, "cc.TransitionSplitRows");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionSplitRows(lua_State *L)
{
    oluacls_class<cocos2d::TransitionSplitRows, cocos2d::TransitionSplitCols>(L, "cc.TransitionSplitRows");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionSplitRows_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionSplitRows_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionSplitRows(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionSplitRows")) {
        luaL_error(L, "class not found: cocos2d::TransitionSplitRows");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionFadeTR_actionWithSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionFadeTR *self = nullptr;
    cocos2d::Size *arg1;       /** size */

    olua_to_object(L, 1, &self, "cc.TransitionFadeTR");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // cocos2d::ActionInterval *actionWithSize(const cocos2d::Size &size)
    cocos2d::ActionInterval *ret = self->actionWithSize(*arg1);
    int num_ret = olua_push_object(L, ret, "cc.ActionInterval");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFadeTR_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionFadeTR *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.TransitionFadeTR");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.TransitionEaseScene")) {
            olua_pushobj_as<cocos2d::TransitionEaseScene>(L, 1, self, "as.cc.TransitionEaseScene");
            break;
        }

        luaL_error(L, "'cocos2d::TransitionFadeTR' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_TransitionFadeTR_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionFadeTR *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionFadeTR *ret = cocos2d::TransitionFadeTR::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionFadeTR");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFadeTR_easeActionWithAction(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionFadeTR *self = nullptr;
    cocos2d::ActionInterval *arg1 = nullptr;       /** action */

    olua_to_object(L, 1, &self, "cc.TransitionFadeTR");
    olua_check_object(L, 2, &arg1, "cc.ActionInterval");

    // cocos2d::ActionInterval *easeActionWithAction(@addref(action ^) cocos2d::ActionInterval *action)
    cocos2d::ActionInterval *ret = self->easeActionWithAction(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ActionInterval");

    // insert code after call
    olua_addref(L, 1, "action", 2, OLUA_REF_ALONE);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFadeTR_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionFadeTR()
    cocos2d::TransitionFadeTR *ret = new cocos2d::TransitionFadeTR();
    int num_ret = olua_push_object(L, ret, "cc.TransitionFadeTR");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionFadeTR(lua_State *L)
{
    oluacls_class<cocos2d::TransitionFadeTR, cocos2d::TransitionScene>(L, "cc.TransitionFadeTR");
    oluacls_func(L, "actionWithSize", _olua_fun_cocos2d_TransitionFadeTR_actionWithSize);
    oluacls_func(L, "as", _olua_fun_cocos2d_TransitionFadeTR_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionFadeTR_create);
    oluacls_func(L, "easeActionWithAction", _olua_fun_cocos2d_TransitionFadeTR_easeActionWithAction);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionFadeTR_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionFadeTR(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionFadeTR")) {
        luaL_error(L, "class not found: cocos2d::TransitionFadeTR");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionFadeBL_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionFadeBL *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionFadeBL *ret = cocos2d::TransitionFadeBL::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionFadeBL");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFadeBL_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionFadeBL()
    cocos2d::TransitionFadeBL *ret = new cocos2d::TransitionFadeBL();
    int num_ret = olua_push_object(L, ret, "cc.TransitionFadeBL");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionFadeBL(lua_State *L)
{
    oluacls_class<cocos2d::TransitionFadeBL, cocos2d::TransitionFadeTR>(L, "cc.TransitionFadeBL");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionFadeBL_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionFadeBL_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionFadeBL(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionFadeBL")) {
        luaL_error(L, "class not found: cocos2d::TransitionFadeBL");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionFadeUp_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionFadeUp *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionFadeUp *ret = cocos2d::TransitionFadeUp::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionFadeUp");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFadeUp_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionFadeUp()
    cocos2d::TransitionFadeUp *ret = new cocos2d::TransitionFadeUp();
    int num_ret = olua_push_object(L, ret, "cc.TransitionFadeUp");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionFadeUp(lua_State *L)
{
    oluacls_class<cocos2d::TransitionFadeUp, cocos2d::TransitionFadeTR>(L, "cc.TransitionFadeUp");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionFadeUp_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionFadeUp_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionFadeUp(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionFadeUp")) {
        luaL_error(L, "class not found: cocos2d::TransitionFadeUp");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionFadeDown_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionFadeDown *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionFadeDown *ret = cocos2d::TransitionFadeDown::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionFadeDown");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionFadeDown_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionFadeDown()
    cocos2d::TransitionFadeDown *ret = new cocos2d::TransitionFadeDown();
    int num_ret = olua_push_object(L, ret, "cc.TransitionFadeDown");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionFadeDown(lua_State *L)
{
    oluacls_class<cocos2d::TransitionFadeDown, cocos2d::TransitionFadeTR>(L, "cc.TransitionFadeDown");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionFadeDown_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionFadeDown_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionFadeDown(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionFadeDown")) {
        luaL_error(L, "class not found: cocos2d::TransitionFadeDown");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionPageTurn_actionWithSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TransitionPageTurn *self = nullptr;
    cocos2d::Size *arg1;       /** vector */

    olua_to_object(L, 1, &self, "cc.TransitionPageTurn");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // cocos2d::ActionInterval *actionWithSize(const cocos2d::Size &vector)
    cocos2d::ActionInterval *ret = self->actionWithSize(*arg1);
    int num_ret = olua_push_object(L, ret, "cc.ActionInterval");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionPageTurn_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */
    bool arg3 = false;       /** backwards */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");
    olua_check_bool(L, 3, &arg3);

    // static cocos2d::TransitionPageTurn *create(float t, @addref(scenes |) cocos2d::Scene *scene, bool backwards)
    cocos2d::TransitionPageTurn *ret = cocos2d::TransitionPageTurn::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.TransitionPageTurn");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionPageTurn_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionPageTurn()
    cocos2d::TransitionPageTurn *ret = new cocos2d::TransitionPageTurn();
    int num_ret = olua_push_object(L, ret, "cc.TransitionPageTurn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionPageTurn(lua_State *L)
{
    oluacls_class<cocos2d::TransitionPageTurn, cocos2d::TransitionScene>(L, "cc.TransitionPageTurn");
    oluacls_func(L, "actionWithSize", _olua_fun_cocos2d_TransitionPageTurn_actionWithSize);
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionPageTurn_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionPageTurn_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionPageTurn(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionPageTurn")) {
        luaL_error(L, "class not found: cocos2d::TransitionPageTurn");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionProgress_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionProgress *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionProgress *ret = cocos2d::TransitionProgress::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgress");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionProgress_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionProgress()
    cocos2d::TransitionProgress *ret = new cocos2d::TransitionProgress();
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgress");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionProgress(lua_State *L)
{
    oluacls_class<cocos2d::TransitionProgress, cocos2d::TransitionScene>(L, "cc.TransitionProgress");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionProgress_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionProgress_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionProgress(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionProgress")) {
        luaL_error(L, "class not found: cocos2d::TransitionProgress");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionProgressRadialCCW_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionProgressRadialCCW *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionProgressRadialCCW *ret = cocos2d::TransitionProgressRadialCCW::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgressRadialCCW");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionProgressRadialCCW_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionProgressRadialCCW()
    cocos2d::TransitionProgressRadialCCW *ret = new cocos2d::TransitionProgressRadialCCW();
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgressRadialCCW");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionProgressRadialCCW(lua_State *L)
{
    oluacls_class<cocos2d::TransitionProgressRadialCCW, cocos2d::TransitionProgress>(L, "cc.TransitionProgressRadialCCW");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionProgressRadialCCW_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionProgressRadialCCW_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionProgressRadialCCW(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionProgressRadialCCW")) {
        luaL_error(L, "class not found: cocos2d::TransitionProgressRadialCCW");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionProgressRadialCW_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionProgressRadialCW *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionProgressRadialCW *ret = cocos2d::TransitionProgressRadialCW::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgressRadialCW");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionProgressRadialCW_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionProgressRadialCW()
    cocos2d::TransitionProgressRadialCW *ret = new cocos2d::TransitionProgressRadialCW();
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgressRadialCW");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionProgressRadialCW(lua_State *L)
{
    oluacls_class<cocos2d::TransitionProgressRadialCW, cocos2d::TransitionProgress>(L, "cc.TransitionProgressRadialCW");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionProgressRadialCW_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionProgressRadialCW_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionProgressRadialCW(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionProgressRadialCW")) {
        luaL_error(L, "class not found: cocos2d::TransitionProgressRadialCW");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionProgressHorizontal_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionProgressHorizontal *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionProgressHorizontal *ret = cocos2d::TransitionProgressHorizontal::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgressHorizontal");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionProgressHorizontal_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionProgressHorizontal()
    cocos2d::TransitionProgressHorizontal *ret = new cocos2d::TransitionProgressHorizontal();
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgressHorizontal");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionProgressHorizontal(lua_State *L)
{
    oluacls_class<cocos2d::TransitionProgressHorizontal, cocos2d::TransitionProgress>(L, "cc.TransitionProgressHorizontal");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionProgressHorizontal_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionProgressHorizontal_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionProgressHorizontal(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionProgressHorizontal")) {
        luaL_error(L, "class not found: cocos2d::TransitionProgressHorizontal");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionProgressVertical_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionProgressVertical *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionProgressVertical *ret = cocos2d::TransitionProgressVertical::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgressVertical");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionProgressVertical_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionProgressVertical()
    cocos2d::TransitionProgressVertical *ret = new cocos2d::TransitionProgressVertical();
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgressVertical");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionProgressVertical(lua_State *L)
{
    oluacls_class<cocos2d::TransitionProgressVertical, cocos2d::TransitionProgress>(L, "cc.TransitionProgressVertical");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionProgressVertical_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionProgressVertical_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionProgressVertical(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionProgressVertical")) {
        luaL_error(L, "class not found: cocos2d::TransitionProgressVertical");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionProgressInOut_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionProgressInOut *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionProgressInOut *ret = cocos2d::TransitionProgressInOut::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgressInOut");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionProgressInOut_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionProgressInOut()
    cocos2d::TransitionProgressInOut *ret = new cocos2d::TransitionProgressInOut();
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgressInOut");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionProgressInOut(lua_State *L)
{
    oluacls_class<cocos2d::TransitionProgressInOut, cocos2d::TransitionProgress>(L, "cc.TransitionProgressInOut");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionProgressInOut_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionProgressInOut_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionProgressInOut(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionProgressInOut")) {
        luaL_error(L, "class not found: cocos2d::TransitionProgressInOut");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TransitionProgressOutIn_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** t */
    cocos2d::Scene *arg2 = nullptr;       /** scene */

    olua_check_number(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Scene");

    // static cocos2d::TransitionProgressOutIn *create(float t, @addref(scenes |) cocos2d::Scene *scene)
    cocos2d::TransitionProgressOutIn *ret = cocos2d::TransitionProgressOutIn::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgressOutIn");

    // insert code after call
    olua_addref(L, -1, "scenes", 2, OLUA_REF_MULTI);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TransitionProgressOutIn_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TransitionProgressOutIn()
    cocos2d::TransitionProgressOutIn *ret = new cocos2d::TransitionProgressOutIn();
    int num_ret = olua_push_object(L, ret, "cc.TransitionProgressOutIn");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TransitionProgressOutIn(lua_State *L)
{
    oluacls_class<cocos2d::TransitionProgressOutIn, cocos2d::TransitionProgress>(L, "cc.TransitionProgressOutIn");
    oluacls_func(L, "create", _olua_fun_cocos2d_TransitionProgressOutIn_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_TransitionProgressOutIn_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TransitionProgressOutIn(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TransitionProgressOutIn")) {
        luaL_error(L, "class not found: cocos2d::TransitionProgressOutIn");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_IMEDelegate___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::IMEDelegate *)olua_toobj(L, 1, "cc.IMEDelegate");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_IMEDelegate_attachWithIME(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::IMEDelegate *self = nullptr;

    olua_to_object(L, 1, &self, "cc.IMEDelegate");

    // bool attachWithIME()
    bool ret = self->attachWithIME();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_IMEDelegate_detachWithIME(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::IMEDelegate *self = nullptr;

    olua_to_object(L, 1, &self, "cc.IMEDelegate");

    // bool detachWithIME()
    bool ret = self->detachWithIME();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_IMEDelegate(lua_State *L)
{
    oluacls_class<cocos2d::IMEDelegate>(L, "cc.IMEDelegate");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_IMEDelegate___gc);
    oluacls_func(L, "attachWithIME", _olua_fun_cocos2d_IMEDelegate_attachWithIME);
    oluacls_func(L, "detachWithIME", _olua_fun_cocos2d_IMEDelegate_detachWithIME);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_IMEDelegate(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.IMEDelegate")) {
        luaL_error(L, "class not found: cocos2d::IMEDelegate");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TextFieldDelegate___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::TextFieldDelegate *)olua_toobj(L, 1, "cc.TextFieldDelegate");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldDelegate_onTextFieldAttachWithIME(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldDelegate *self = nullptr;
    cocos2d::TextFieldTTF *arg1 = nullptr;       /** sender */

    olua_to_object(L, 1, &self, "cc.TextFieldDelegate");
    olua_check_object(L, 2, &arg1, "cc.TextFieldTTF");

    // bool onTextFieldAttachWithIME(cocos2d::TextFieldTTF *sender)
    bool ret = self->onTextFieldAttachWithIME(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldDelegate_onTextFieldDeleteBackward(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldDelegate *self = nullptr;
    cocos2d::TextFieldTTF *arg1 = nullptr;       /** sender */
    const char *arg2 = nullptr;       /** delText */
    size_t arg3 = 0;       /** nLen */

    olua_to_object(L, 1, &self, "cc.TextFieldDelegate");
    olua_check_object(L, 2, &arg1, "cc.TextFieldTTF");
    olua_check_string(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // bool onTextFieldDeleteBackward(cocos2d::TextFieldTTF *sender, const char *delText, size_t nLen)
    bool ret = self->onTextFieldDeleteBackward(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldDelegate_onTextFieldDetachWithIME(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldDelegate *self = nullptr;
    cocos2d::TextFieldTTF *arg1 = nullptr;       /** sender */

    olua_to_object(L, 1, &self, "cc.TextFieldDelegate");
    olua_check_object(L, 2, &arg1, "cc.TextFieldTTF");

    // bool onTextFieldDetachWithIME(cocos2d::TextFieldTTF *sender)
    bool ret = self->onTextFieldDetachWithIME(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldDelegate_onTextFieldInsertText(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldDelegate *self = nullptr;
    cocos2d::TextFieldTTF *arg1 = nullptr;       /** sender */
    const char *arg2 = nullptr;       /** text */
    size_t arg3 = 0;       /** nLen */

    olua_to_object(L, 1, &self, "cc.TextFieldDelegate");
    olua_check_object(L, 2, &arg1, "cc.TextFieldTTF");
    olua_check_string(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // bool onTextFieldInsertText(cocos2d::TextFieldTTF *sender, const char *text, size_t nLen)
    bool ret = self->onTextFieldInsertText(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldDelegate_onVisit(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldDelegate *self = nullptr;
    cocos2d::TextFieldTTF *arg1 = nullptr;       /** sender */
    cocos2d::Renderer *arg2 = nullptr;       /** renderer */
    cocos2d::Mat4 *arg3;       /** transform */
    uint32_t arg4 = 0;       /** flags */

    olua_to_object(L, 1, &self, "cc.TextFieldDelegate");
    olua_check_object(L, 2, &arg1, "cc.TextFieldTTF");
    olua_check_object(L, 3, &arg2, "cc.Renderer");
    olua_check_object(L, 4, &arg3, "cc.Mat4");
    olua_check_integer(L, 5, &arg4);

    // bool onVisit(cocos2d::TextFieldTTF *sender, cocos2d::Renderer *renderer, const cocos2d::Mat4 &transform, uint32_t flags)
    bool ret = self->onVisit(arg1, arg2, *arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TextFieldDelegate(lua_State *L)
{
    oluacls_class<cocos2d::TextFieldDelegate>(L, "cc.TextFieldDelegate");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_TextFieldDelegate___gc);
    oluacls_func(L, "onTextFieldAttachWithIME", _olua_fun_cocos2d_TextFieldDelegate_onTextFieldAttachWithIME);
    oluacls_func(L, "onTextFieldDeleteBackward", _olua_fun_cocos2d_TextFieldDelegate_onTextFieldDeleteBackward);
    oluacls_func(L, "onTextFieldDetachWithIME", _olua_fun_cocos2d_TextFieldDelegate_onTextFieldDetachWithIME);
    oluacls_func(L, "onTextFieldInsertText", _olua_fun_cocos2d_TextFieldDelegate_onTextFieldInsertText);
    oluacls_func(L, "onVisit", _olua_fun_cocos2d_TextFieldDelegate_onVisit);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TextFieldDelegate(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TextFieldDelegate")) {
        luaL_error(L, "class not found: cocos2d::TextFieldDelegate");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TextFieldTTF_appendString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    std::string arg1;       /** text */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_string(L, 2, &arg1);

    // void appendString(const std::string &text)
    self->appendString(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.BlendProtocol")) {
            olua_pushobj_as<cocos2d::BlendProtocol>(L, 1, self, "as.cc.BlendProtocol");
            break;
        }
        if (olua_strequal(arg1, "cc.IMEDelegate")) {
            olua_pushobj_as<cocos2d::IMEDelegate>(L, 1, self, "as.cc.IMEDelegate");
            break;
        }
        if (olua_strequal(arg1, "cc.LabelProtocol")) {
            olua_pushobj_as<cocos2d::LabelProtocol>(L, 1, self, "as.cc.LabelProtocol");
            break;
        }

        luaL_error(L, "'cocos2d::TextFieldTTF' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_TextFieldTTF_attachWithIME(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");

    // bool attachWithIME()
    bool ret = self->attachWithIME();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_detachWithIME(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");

    // bool detachWithIME()
    bool ret = self->detachWithIME();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_getCharCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");

    // std::size_t getCharCount()
    std::size_t ret = self->getCharCount();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_getColorSpaceHolder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");

    // const cocos2d::Color4B &getColorSpaceHolder()
    const cocos2d::Color4B &ret = self->getColorSpaceHolder();
    int num_ret = olua_push_cocos2d_Color4B(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_getDelegate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");

    // cocos2d::TextFieldDelegate *getDelegate()
    cocos2d::TextFieldDelegate *ret = self->getDelegate();
    int num_ret = olua_push_object(L, ret, "cc.TextFieldDelegate");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_getPasswordTextStyle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");

    // const std::string &getPasswordTextStyle()
    const std::string &ret = self->getPasswordTextStyle();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_getPlaceHolder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");

    // const std::string &getPlaceHolder()
    const std::string &ret = self->getPlaceHolder();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_initWithPlaceHolder$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    std::string arg1;       /** placeholder */
    cocos2d::Size *arg2;       /** dimensions */
    cocos2d::TextHAlignment arg3 = (cocos2d::TextHAlignment)0;       /** alignment */
    std::string arg4;       /** fontName */
    float arg5 = 0;       /** fontSize */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_string(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Size");
    olua_check_enum(L, 4, &arg3);
    olua_check_string(L, 5, &arg4);
    olua_check_number(L, 6, &arg5);

    // bool initWithPlaceHolder(const std::string &placeholder, const cocos2d::Size &dimensions, cocos2d::TextHAlignment alignment, const std::string &fontName, float fontSize)
    bool ret = self->initWithPlaceHolder(arg1, *arg2, arg3, arg4, arg5);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_initWithPlaceHolder$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    std::string arg1;       /** placeholder */
    std::string arg2;       /** fontName */
    float arg3 = 0;       /** fontSize */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);

    // bool initWithPlaceHolder(const std::string &placeholder, const std::string &fontName, float fontSize)
    bool ret = self->initWithPlaceHolder(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_initWithPlaceHolder(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.TextFieldTTF")) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_number(L, 4))) {
            // bool initWithPlaceHolder(const std::string &placeholder, const std::string &fontName, float fontSize)
            return _olua_fun_cocos2d_TextFieldTTF_initWithPlaceHolder$2(L);
        // }
    }

    if (num_args == 6) {
        // if ((olua_is_object(L, 1, "cc.TextFieldTTF")) && (olua_is_string(L, 2)) && (olua_is_object(L, 3, "cc.Size")) && (olua_is_enum(L, 4)) && (olua_is_string(L, 5)) && (olua_is_number(L, 6))) {
            // bool initWithPlaceHolder(const std::string &placeholder, const cocos2d::Size &dimensions, cocos2d::TextHAlignment alignment, const std::string &fontName, float fontSize)
            return _olua_fun_cocos2d_TextFieldTTF_initWithPlaceHolder$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextFieldTTF::initWithPlaceHolder' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_isSecureTextEntry(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");

    // bool isSecureTextEntry()
    bool ret = self->isSecureTextEntry();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TextFieldTTF()
    cocos2d::TextFieldTTF *ret = new cocos2d::TextFieldTTF();
    int num_ret = olua_push_object(L, ret, "cc.TextFieldTTF");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_setColorSpaceHolder$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    cocos2d::Color3B arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_cocos2d_Color3B(L, 2, &arg1);

    // void setColorSpaceHolder(const cocos2d::Color3B &color)
    self->setColorSpaceHolder(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_setColorSpaceHolder$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    cocos2d::Color4B arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_cocos2d_Color4B(L, 2, &arg1);

    // void setColorSpaceHolder(const cocos2d::Color4B &color)
    self->setColorSpaceHolder(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_setColorSpaceHolder(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        if ((olua_is_object(L, 1, "cc.TextFieldTTF")) && (olua_is_cocos2d_Color3B(L, 2))) {
            // void setColorSpaceHolder(const cocos2d::Color3B &color)
            return _olua_fun_cocos2d_TextFieldTTF_setColorSpaceHolder$1(L);
        }

        // if ((olua_is_object(L, 1, "cc.TextFieldTTF")) && (olua_is_cocos2d_Color4B(L, 2))) {
            // void setColorSpaceHolder(const cocos2d::Color4B &color)
            return _olua_fun_cocos2d_TextFieldTTF_setColorSpaceHolder$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextFieldTTF::setColorSpaceHolder' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_setCursorChar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    char arg1 = 0;       /** cursor */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_integer(L, 2, &arg1);

    // void setCursorChar(char cursor)
    self->setCursorChar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_setCursorEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_bool(L, 2, &arg1);

    // void setCursorEnabled(bool enabled)
    self->setCursorEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_setCursorFromPoint(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    cocos2d::Vec2 *arg1;       /** point */
    cocos2d::Camera *arg2 = nullptr;       /** camera */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_object(L, 3, &arg2, "cc.Camera");

    // void setCursorFromPoint(const cocos2d::Vec2 &point, const cocos2d::Camera *camera)
    self->setCursorFromPoint(*arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_setCursorPosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    std::size_t arg1 = 0;       /** cursorPosition */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_integer(L, 2, &arg1);

    // void setCursorPosition(std::size_t cursorPosition)
    self->setCursorPosition(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_setDelegate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    cocos2d::TextFieldDelegate *arg1 = nullptr;       /** delegate */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_object(L, 2, &arg1, "cc.TextFieldDelegate");

    // void setDelegate(cocos2d::TextFieldDelegate *delegate)
    self->setDelegate(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_setPasswordTextStyle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    std::string arg1;       /** text */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_string(L, 2, &arg1);

    // void setPasswordTextStyle(const std::string &text)
    self->setPasswordTextStyle(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_setPlaceHolder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    std::string arg1;       /** text */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_string(L, 2, &arg1);

    // void setPlaceHolder(const std::string &text)
    self->setPlaceHolder(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_setSecureTextEntry(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TextFieldTTF *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_object(L, 1, &self, "cc.TextFieldTTF");
    olua_check_bool(L, 2, &arg1);

    // void setSecureTextEntry(bool value)
    self->setSecureTextEntry(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TextFieldTTF_textFieldWithPlaceHolder$1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** placeholder */
    cocos2d::Size *arg2;       /** dimensions */
    cocos2d::TextHAlignment arg3 = (cocos2d::TextHAlignment)0;       /** alignment */
    std::string arg4;       /** fontName */
    float arg5 = 0;       /** fontSize */

    olua_check_string(L, 1, &arg1);
    olua_check_object(L, 2, &arg2, "cc.Size");
    olua_check_enum(L, 3, &arg3);
    olua_check_string(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);

    // static cocos2d::TextFieldTTF *textFieldWithPlaceHolder(const std::string &placeholder, const cocos2d::Size &dimensions, cocos2d::TextHAlignment alignment, const std::string &fontName, float fontSize)
    cocos2d::TextFieldTTF *ret = cocos2d::TextFieldTTF::textFieldWithPlaceHolder(arg1, *arg2, arg3, arg4, arg5);
    int num_ret = olua_push_object(L, ret, "cc.TextFieldTTF");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_textFieldWithPlaceHolder$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** placeholder */
    std::string arg2;       /** fontName */
    float arg3 = 0;       /** fontSize */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::TextFieldTTF *textFieldWithPlaceHolder(const std::string &placeholder, const std::string &fontName, float fontSize)
    cocos2d::TextFieldTTF *ret = cocos2d::TextFieldTTF::textFieldWithPlaceHolder(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.TextFieldTTF");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TextFieldTTF_textFieldWithPlaceHolder(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_number(L, 3))) {
            // static cocos2d::TextFieldTTF *textFieldWithPlaceHolder(const std::string &placeholder, const std::string &fontName, float fontSize)
            return _olua_fun_cocos2d_TextFieldTTF_textFieldWithPlaceHolder$2(L);
        // }
    }

    if (num_args == 5) {
        // if ((olua_is_string(L, 1)) && (olua_is_object(L, 2, "cc.Size")) && (olua_is_enum(L, 3)) && (olua_is_string(L, 4)) && (olua_is_number(L, 5))) {
            // static cocos2d::TextFieldTTF *textFieldWithPlaceHolder(const std::string &placeholder, const cocos2d::Size &dimensions, cocos2d::TextHAlignment alignment, const std::string &fontName, float fontSize)
            return _olua_fun_cocos2d_TextFieldTTF_textFieldWithPlaceHolder$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TextFieldTTF::textFieldWithPlaceHolder' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_TextFieldTTF(lua_State *L)
{
    oluacls_class<cocos2d::TextFieldTTF, cocos2d::Label>(L, "cc.TextFieldTTF");
    oluacls_func(L, "appendString", _olua_fun_cocos2d_TextFieldTTF_appendString);
    oluacls_func(L, "as", _olua_fun_cocos2d_TextFieldTTF_as);
    oluacls_func(L, "attachWithIME", _olua_fun_cocos2d_TextFieldTTF_attachWithIME);
    oluacls_func(L, "detachWithIME", _olua_fun_cocos2d_TextFieldTTF_detachWithIME);
    oluacls_func(L, "getCharCount", _olua_fun_cocos2d_TextFieldTTF_getCharCount);
    oluacls_func(L, "getColorSpaceHolder", _olua_fun_cocos2d_TextFieldTTF_getColorSpaceHolder);
    oluacls_func(L, "getDelegate", _olua_fun_cocos2d_TextFieldTTF_getDelegate);
    oluacls_func(L, "getPasswordTextStyle", _olua_fun_cocos2d_TextFieldTTF_getPasswordTextStyle);
    oluacls_func(L, "getPlaceHolder", _olua_fun_cocos2d_TextFieldTTF_getPlaceHolder);
    oluacls_func(L, "initWithPlaceHolder", _olua_fun_cocos2d_TextFieldTTF_initWithPlaceHolder);
    oluacls_func(L, "isSecureTextEntry", _olua_fun_cocos2d_TextFieldTTF_isSecureTextEntry);
    oluacls_func(L, "new", _olua_fun_cocos2d_TextFieldTTF_new);
    oluacls_func(L, "setColorSpaceHolder", _olua_fun_cocos2d_TextFieldTTF_setColorSpaceHolder);
    oluacls_func(L, "setCursorChar", _olua_fun_cocos2d_TextFieldTTF_setCursorChar);
    oluacls_func(L, "setCursorEnabled", _olua_fun_cocos2d_TextFieldTTF_setCursorEnabled);
    oluacls_func(L, "setCursorFromPoint", _olua_fun_cocos2d_TextFieldTTF_setCursorFromPoint);
    oluacls_func(L, "setCursorPosition", _olua_fun_cocos2d_TextFieldTTF_setCursorPosition);
    oluacls_func(L, "setDelegate", _olua_fun_cocos2d_TextFieldTTF_setDelegate);
    oluacls_func(L, "setPasswordTextStyle", _olua_fun_cocos2d_TextFieldTTF_setPasswordTextStyle);
    oluacls_func(L, "setPlaceHolder", _olua_fun_cocos2d_TextFieldTTF_setPlaceHolder);
    oluacls_func(L, "setSecureTextEntry", _olua_fun_cocos2d_TextFieldTTF_setSecureTextEntry);
    oluacls_func(L, "textFieldWithPlaceHolder", _olua_fun_cocos2d_TextFieldTTF_textFieldWithPlaceHolder);
    oluacls_prop(L, "charCount", _olua_fun_cocos2d_TextFieldTTF_getCharCount, nullptr);
    oluacls_prop(L, "colorSpaceHolder", _olua_fun_cocos2d_TextFieldTTF_getColorSpaceHolder, nullptr);
    oluacls_prop(L, "delegate", _olua_fun_cocos2d_TextFieldTTF_getDelegate, _olua_fun_cocos2d_TextFieldTTF_setDelegate);
    oluacls_prop(L, "passwordTextStyle", _olua_fun_cocos2d_TextFieldTTF_getPasswordTextStyle, _olua_fun_cocos2d_TextFieldTTF_setPasswordTextStyle);
    oluacls_prop(L, "placeHolder", _olua_fun_cocos2d_TextFieldTTF_getPlaceHolder, _olua_fun_cocos2d_TextFieldTTF_setPlaceHolder);
    oluacls_prop(L, "secureTextEntry", _olua_fun_cocos2d_TextFieldTTF_isSecureTextEntry, _olua_fun_cocos2d_TextFieldTTF_setSecureTextEntry);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TextFieldTTF(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TextFieldTTF")) {
        luaL_error(L, "class not found: cocos2d::TextFieldTTF");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_LightType(lua_State *L)
{
    oluacls_class<cocos2d::LightType>(L, "cc.LightType");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "AMBIENT", (lua_Integer)cocos2d::LightType::AMBIENT);
    oluacls_enum(L, "DIRECTIONAL", (lua_Integer)cocos2d::LightType::DIRECTIONAL);
    oluacls_enum(L, "POINT", (lua_Integer)cocos2d::LightType::POINT);
    oluacls_enum(L, "SPOT", (lua_Integer)cocos2d::LightType::SPOT);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_LightType(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.LightType")) {
        luaL_error(L, "class not found: cocos2d::LightType");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_LightFlag(lua_State *L)
{
    oluacls_class<cocos2d::LightFlag>(L, "cc.LightFlag");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "LIGHT0", (lua_Integer)cocos2d::LightFlag::LIGHT0);
    oluacls_enum(L, "LIGHT1", (lua_Integer)cocos2d::LightFlag::LIGHT1);
    oluacls_enum(L, "LIGHT10", (lua_Integer)cocos2d::LightFlag::LIGHT10);
    oluacls_enum(L, "LIGHT11", (lua_Integer)cocos2d::LightFlag::LIGHT11);
    oluacls_enum(L, "LIGHT12", (lua_Integer)cocos2d::LightFlag::LIGHT12);
    oluacls_enum(L, "LIGHT13", (lua_Integer)cocos2d::LightFlag::LIGHT13);
    oluacls_enum(L, "LIGHT14", (lua_Integer)cocos2d::LightFlag::LIGHT14);
    oluacls_enum(L, "LIGHT15", (lua_Integer)cocos2d::LightFlag::LIGHT15);
    oluacls_enum(L, "LIGHT2", (lua_Integer)cocos2d::LightFlag::LIGHT2);
    oluacls_enum(L, "LIGHT3", (lua_Integer)cocos2d::LightFlag::LIGHT3);
    oluacls_enum(L, "LIGHT4", (lua_Integer)cocos2d::LightFlag::LIGHT4);
    oluacls_enum(L, "LIGHT5", (lua_Integer)cocos2d::LightFlag::LIGHT5);
    oluacls_enum(L, "LIGHT6", (lua_Integer)cocos2d::LightFlag::LIGHT6);
    oluacls_enum(L, "LIGHT7", (lua_Integer)cocos2d::LightFlag::LIGHT7);
    oluacls_enum(L, "LIGHT8", (lua_Integer)cocos2d::LightFlag::LIGHT8);
    oluacls_enum(L, "LIGHT9", (lua_Integer)cocos2d::LightFlag::LIGHT9);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_LightFlag(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.LightFlag")) {
        luaL_error(L, "class not found: cocos2d::LightFlag");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_BaseLight_getIntensity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.BaseLight");

    // float getIntensity()
    float ret = self->getIntensity();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_BaseLight_getLightFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.BaseLight");

    // cocos2d::LightFlag getLightFlag()
    cocos2d::LightFlag ret = self->getLightFlag();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_BaseLight_getLightType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.BaseLight");

    // cocos2d::LightType getLightType()
    cocos2d::LightType ret = self->getLightType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_BaseLight_isEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.BaseLight");

    // bool isEnabled()
    bool ret = self->isEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_BaseLight_setEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;
    bool arg1 = false;       /** enabled */

    olua_to_object(L, 1, &self, "cc.BaseLight");
    olua_check_bool(L, 2, &arg1);

    // void setEnabled(bool enabled)
    self->setEnabled(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_BaseLight_setIntensity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;
    float arg1 = 0;       /** intensity */

    olua_to_object(L, 1, &self, "cc.BaseLight");
    olua_check_number(L, 2, &arg1);

    // void setIntensity(float intensity)
    self->setIntensity(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_BaseLight_setLightFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::BaseLight *self = nullptr;
    cocos2d::LightFlag arg1 = (cocos2d::LightFlag)0;       /** flag */

    olua_to_object(L, 1, &self, "cc.BaseLight");
    olua_check_enum(L, 2, &arg1);

    // void setLightFlag(cocos2d::LightFlag flag)
    self->setLightFlag(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_BaseLight(lua_State *L)
{
    oluacls_class<cocos2d::BaseLight, cocos2d::Node>(L, "cc.BaseLight");
    oluacls_func(L, "getIntensity", _olua_fun_cocos2d_BaseLight_getIntensity);
    oluacls_func(L, "getLightFlag", _olua_fun_cocos2d_BaseLight_getLightFlag);
    oluacls_func(L, "getLightType", _olua_fun_cocos2d_BaseLight_getLightType);
    oluacls_func(L, "isEnabled", _olua_fun_cocos2d_BaseLight_isEnabled);
    oluacls_func(L, "setEnabled", _olua_fun_cocos2d_BaseLight_setEnabled);
    oluacls_func(L, "setIntensity", _olua_fun_cocos2d_BaseLight_setIntensity);
    oluacls_func(L, "setLightFlag", _olua_fun_cocos2d_BaseLight_setLightFlag);
    oluacls_prop(L, "enabled", _olua_fun_cocos2d_BaseLight_isEnabled, _olua_fun_cocos2d_BaseLight_setEnabled);
    oluacls_prop(L, "intensity", _olua_fun_cocos2d_BaseLight_getIntensity, _olua_fun_cocos2d_BaseLight_setIntensity);
    oluacls_prop(L, "lightFlag", _olua_fun_cocos2d_BaseLight_getLightFlag, _olua_fun_cocos2d_BaseLight_setLightFlag);
    oluacls_prop(L, "lightType", _olua_fun_cocos2d_BaseLight_getLightType, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_BaseLight(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.BaseLight")) {
        luaL_error(L, "class not found: cocos2d::BaseLight");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_DirectionLight_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vec3 *arg1;       /** direction */
    cocos2d::Color3B arg2;       /** color */

    olua_check_object(L, 1, &arg1, "cc.Vec3");
    olua_check_cocos2d_Color3B(L, 2, &arg2);

    // static cocos2d::DirectionLight *create(const cocos2d::Vec3 &direction, const cocos2d::Color3B &color)
    cocos2d::DirectionLight *ret = cocos2d::DirectionLight::create(*arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.DirectionLight");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_DirectionLight_getDirection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DirectionLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.DirectionLight");

    // cocos2d::Vec3 getDirection()
    cocos2d::Vec3 ret = self->getDirection();
    int num_ret = olua_copy_object(L, ret, "cc.Vec3");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_DirectionLight_getDirectionInWorld(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DirectionLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.DirectionLight");

    // cocos2d::Vec3 getDirectionInWorld()
    cocos2d::Vec3 ret = self->getDirectionInWorld();
    int num_ret = olua_copy_object(L, ret, "cc.Vec3");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_DirectionLight_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::DirectionLight()
    cocos2d::DirectionLight *ret = new cocos2d::DirectionLight();
    int num_ret = olua_push_object(L, ret, "cc.DirectionLight");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_DirectionLight_setDirection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::DirectionLight *self = nullptr;
    cocos2d::Vec3 *arg1;       /** dir */

    olua_to_object(L, 1, &self, "cc.DirectionLight");
    olua_check_object(L, 2, &arg1, "cc.Vec3");

    // void setDirection(const cocos2d::Vec3 &dir)
    self->setDirection(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_DirectionLight(lua_State *L)
{
    oluacls_class<cocos2d::DirectionLight, cocos2d::BaseLight>(L, "cc.DirectionLight");
    oluacls_func(L, "create", _olua_fun_cocos2d_DirectionLight_create);
    oluacls_func(L, "getDirection", _olua_fun_cocos2d_DirectionLight_getDirection);
    oluacls_func(L, "getDirectionInWorld", _olua_fun_cocos2d_DirectionLight_getDirectionInWorld);
    oluacls_func(L, "new", _olua_fun_cocos2d_DirectionLight_new);
    oluacls_func(L, "setDirection", _olua_fun_cocos2d_DirectionLight_setDirection);
    oluacls_prop(L, "direction", _olua_fun_cocos2d_DirectionLight_getDirection, _olua_fun_cocos2d_DirectionLight_setDirection);
    oluacls_prop(L, "directionInWorld", _olua_fun_cocos2d_DirectionLight_getDirectionInWorld, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_DirectionLight(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.DirectionLight")) {
        luaL_error(L, "class not found: cocos2d::DirectionLight");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_PointLight_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vec3 *arg1;       /** position */
    cocos2d::Color3B arg2;       /** color */
    float arg3 = 0;       /** range */

    olua_check_object(L, 1, &arg1, "cc.Vec3");
    olua_check_cocos2d_Color3B(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);

    // static cocos2d::PointLight *create(const cocos2d::Vec3 &position, const cocos2d::Color3B &color, float range)
    cocos2d::PointLight *ret = cocos2d::PointLight::create(*arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.PointLight");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_PointLight_getRange(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.PointLight");

    // float getRange()
    float ret = self->getRange();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_PointLight_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::PointLight()
    cocos2d::PointLight *ret = new cocos2d::PointLight();
    int num_ret = olua_push_object(L, ret, "cc.PointLight");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_PointLight_setRange(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PointLight *self = nullptr;
    float arg1 = 0;       /** range */

    olua_to_object(L, 1, &self, "cc.PointLight");
    olua_check_number(L, 2, &arg1);

    // void setRange(float range)
    self->setRange(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_PointLight(lua_State *L)
{
    oluacls_class<cocos2d::PointLight, cocos2d::BaseLight>(L, "cc.PointLight");
    oluacls_func(L, "create", _olua_fun_cocos2d_PointLight_create);
    oluacls_func(L, "getRange", _olua_fun_cocos2d_PointLight_getRange);
    oluacls_func(L, "new", _olua_fun_cocos2d_PointLight_new);
    oluacls_func(L, "setRange", _olua_fun_cocos2d_PointLight_setRange);
    oluacls_prop(L, "range", _olua_fun_cocos2d_PointLight_getRange, _olua_fun_cocos2d_PointLight_setRange);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_PointLight(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.PointLight")) {
        luaL_error(L, "class not found: cocos2d::PointLight");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_SpotLight_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Vec3 *arg1;       /** direction */
    cocos2d::Vec3 *arg2;       /** position */
    cocos2d::Color3B arg3;       /** color */
    float arg4 = 0;       /** innerAngle */
    float arg5 = 0;       /** outerAngle */
    float arg6 = 0;       /** range */

    olua_check_object(L, 1, &arg1, "cc.Vec3");
    olua_check_object(L, 2, &arg2, "cc.Vec3");
    olua_check_cocos2d_Color3B(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);
    olua_check_number(L, 5, &arg5);
    olua_check_number(L, 6, &arg6);

    // static cocos2d::SpotLight *create(const cocos2d::Vec3 &direction, const cocos2d::Vec3 &position, const cocos2d::Color3B &color, float innerAngle, float outerAngle, float range)
    cocos2d::SpotLight *ret = cocos2d::SpotLight::create(*arg1, *arg2, arg3, arg4, arg5, arg6);
    int num_ret = olua_push_object(L, ret, "cc.SpotLight");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpotLight_getCosInnerAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpotLight");

    // float getCosInnerAngle()
    float ret = self->getCosInnerAngle();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpotLight_getCosOuterAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpotLight");

    // float getCosOuterAngle()
    float ret = self->getCosOuterAngle();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpotLight_getDirection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpotLight");

    // cocos2d::Vec3 getDirection()
    cocos2d::Vec3 ret = self->getDirection();
    int num_ret = olua_copy_object(L, ret, "cc.Vec3");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpotLight_getDirectionInWorld(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpotLight");

    // cocos2d::Vec3 getDirectionInWorld()
    cocos2d::Vec3 ret = self->getDirectionInWorld();
    int num_ret = olua_copy_object(L, ret, "cc.Vec3");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpotLight_getInnerAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpotLight");

    // float getInnerAngle()
    float ret = self->getInnerAngle();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpotLight_getOuterAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpotLight");

    // float getOuterAngle()
    float ret = self->getOuterAngle();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpotLight_getRange(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;

    olua_to_object(L, 1, &self, "cc.SpotLight");

    // float getRange()
    float ret = self->getRange();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpotLight_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::SpotLight()
    cocos2d::SpotLight *ret = new cocos2d::SpotLight();
    int num_ret = olua_push_object(L, ret, "cc.SpotLight");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_SpotLight_setDirection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;
    cocos2d::Vec3 *arg1;       /** dir */

    olua_to_object(L, 1, &self, "cc.SpotLight");
    olua_check_object(L, 2, &arg1, "cc.Vec3");

    // void setDirection(const cocos2d::Vec3 &dir)
    self->setDirection(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpotLight_setInnerAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;
    float arg1 = 0;       /** angle */

    olua_to_object(L, 1, &self, "cc.SpotLight");
    olua_check_number(L, 2, &arg1);

    // void setInnerAngle(float angle)
    self->setInnerAngle(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpotLight_setOuterAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;
    float arg1 = 0;       /** outerAngle */

    olua_to_object(L, 1, &self, "cc.SpotLight");
    olua_check_number(L, 2, &arg1);

    // void setOuterAngle(float outerAngle)
    self->setOuterAngle(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SpotLight_setRange(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SpotLight *self = nullptr;
    float arg1 = 0;       /** range */

    olua_to_object(L, 1, &self, "cc.SpotLight");
    olua_check_number(L, 2, &arg1);

    // void setRange(float range)
    self->setRange(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_SpotLight(lua_State *L)
{
    oluacls_class<cocos2d::SpotLight, cocos2d::BaseLight>(L, "cc.SpotLight");
    oluacls_func(L, "create", _olua_fun_cocos2d_SpotLight_create);
    oluacls_func(L, "getCosInnerAngle", _olua_fun_cocos2d_SpotLight_getCosInnerAngle);
    oluacls_func(L, "getCosOuterAngle", _olua_fun_cocos2d_SpotLight_getCosOuterAngle);
    oluacls_func(L, "getDirection", _olua_fun_cocos2d_SpotLight_getDirection);
    oluacls_func(L, "getDirectionInWorld", _olua_fun_cocos2d_SpotLight_getDirectionInWorld);
    oluacls_func(L, "getInnerAngle", _olua_fun_cocos2d_SpotLight_getInnerAngle);
    oluacls_func(L, "getOuterAngle", _olua_fun_cocos2d_SpotLight_getOuterAngle);
    oluacls_func(L, "getRange", _olua_fun_cocos2d_SpotLight_getRange);
    oluacls_func(L, "new", _olua_fun_cocos2d_SpotLight_new);
    oluacls_func(L, "setDirection", _olua_fun_cocos2d_SpotLight_setDirection);
    oluacls_func(L, "setInnerAngle", _olua_fun_cocos2d_SpotLight_setInnerAngle);
    oluacls_func(L, "setOuterAngle", _olua_fun_cocos2d_SpotLight_setOuterAngle);
    oluacls_func(L, "setRange", _olua_fun_cocos2d_SpotLight_setRange);
    oluacls_prop(L, "cosInnerAngle", _olua_fun_cocos2d_SpotLight_getCosInnerAngle, nullptr);
    oluacls_prop(L, "cosOuterAngle", _olua_fun_cocos2d_SpotLight_getCosOuterAngle, nullptr);
    oluacls_prop(L, "direction", _olua_fun_cocos2d_SpotLight_getDirection, _olua_fun_cocos2d_SpotLight_setDirection);
    oluacls_prop(L, "directionInWorld", _olua_fun_cocos2d_SpotLight_getDirectionInWorld, nullptr);
    oluacls_prop(L, "innerAngle", _olua_fun_cocos2d_SpotLight_getInnerAngle, _olua_fun_cocos2d_SpotLight_setInnerAngle);
    oluacls_prop(L, "outerAngle", _olua_fun_cocos2d_SpotLight_getOuterAngle, _olua_fun_cocos2d_SpotLight_setOuterAngle);
    oluacls_prop(L, "range", _olua_fun_cocos2d_SpotLight_getRange, _olua_fun_cocos2d_SpotLight_setRange);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_SpotLight(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.SpotLight")) {
        luaL_error(L, "class not found: cocos2d::SpotLight");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_AmbientLight_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color3B arg1;       /** color */

    olua_check_cocos2d_Color3B(L, 1, &arg1);

    // static cocos2d::AmbientLight *create(const cocos2d::Color3B &color)
    cocos2d::AmbientLight *ret = cocos2d::AmbientLight::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.AmbientLight");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_AmbientLight_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::AmbientLight()
    cocos2d::AmbientLight *ret = new cocos2d::AmbientLight();
    int num_ret = olua_push_object(L, ret, "cc.AmbientLight");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_AmbientLight(lua_State *L)
{
    oluacls_class<cocos2d::AmbientLight, cocos2d::BaseLight>(L, "cc.AmbientLight");
    oluacls_func(L, "create", _olua_fun_cocos2d_AmbientLight_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_AmbientLight_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_AmbientLight(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.AmbientLight")) {
        luaL_error(L, "class not found: cocos2d::AmbientLight");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_CameraFlag(lua_State *L)
{
    oluacls_class<cocos2d::CameraFlag>(L, "cc.CameraFlag");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "DEFAULT", (lua_Integer)cocos2d::CameraFlag::DEFAULT);
    oluacls_enum(L, "USER1", (lua_Integer)cocos2d::CameraFlag::USER1);
    oluacls_enum(L, "USER2", (lua_Integer)cocos2d::CameraFlag::USER2);
    oluacls_enum(L, "USER3", (lua_Integer)cocos2d::CameraFlag::USER3);
    oluacls_enum(L, "USER4", (lua_Integer)cocos2d::CameraFlag::USER4);
    oluacls_enum(L, "USER5", (lua_Integer)cocos2d::CameraFlag::USER5);
    oluacls_enum(L, "USER6", (lua_Integer)cocos2d::CameraFlag::USER6);
    oluacls_enum(L, "USER7", (lua_Integer)cocos2d::CameraFlag::USER7);
    oluacls_enum(L, "USER8", (lua_Integer)cocos2d::CameraFlag::USER8);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_CameraFlag(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.CameraFlag")) {
        luaL_error(L, "class not found: cocos2d::CameraFlag");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_Camera_Type(lua_State *L)
{
    oluacls_class<cocos2d::Camera::Type>(L, "cc.Camera.Type");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "ORTHOGRAPHIC", (lua_Integer)cocos2d::Camera::Type::ORTHOGRAPHIC);
    oluacls_enum(L, "PERSPECTIVE", (lua_Integer)cocos2d::Camera::Type::PERSPECTIVE);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Camera_Type(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Camera.Type")) {
        luaL_error(L, "class not found: cocos2d::Camera::Type");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_Camera_apply(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // void apply()
    self->apply();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_applyViewport(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // void applyViewport()
    self->applyViewport();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_clearBackground(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // void clearBackground()
    self->clearBackground();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Camera *create()
    cocos2d::Camera *ret = cocos2d::Camera::create();
    int num_ret = olua_push_object(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_createOrthographic(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** zoomX */
    float arg2 = 0;       /** zoomY */
    float arg3 = 0;       /** nearPlane */
    float arg4 = 0;       /** farPlane */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static cocos2d::Camera *createOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)
    cocos2d::Camera *ret = cocos2d::Camera::createOrthographic(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_object(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_createPerspective(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** fieldOfView */
    float arg2 = 0;       /** aspectRatio */
    float arg3 = 0;       /** nearPlane */
    float arg4 = 0;       /** farPlane */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);
    olua_check_number(L, 3, &arg3);
    olua_check_number(L, 4, &arg4);

    // static cocos2d::Camera *createPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)
    cocos2d::Camera *ret = cocos2d::Camera::createPerspective(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_object(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getBackgroundBrush(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // cocos2d::CameraBackgroundBrush *getBackgroundBrush()
    cocos2d::CameraBackgroundBrush *ret = self->getBackgroundBrush();
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getCameraFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // cocos2d::CameraFlag getCameraFlag()
    cocos2d::CameraFlag ret = self->getCameraFlag();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getDefaultCamera(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Camera *getDefaultCamera()
    cocos2d::Camera *ret = cocos2d::Camera::getDefaultCamera();
    int num_ret = olua_push_object(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getDefaultViewport(lua_State *L)
{
    olua_startinvoke(L);

    // static const cocos2d::Viewport &getDefaultViewport()
    const cocos2d::Viewport &ret = cocos2d::Camera::getDefaultViewport();
    int num_ret = olua_push_object(L, ret, "cc.Viewport");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // int8_t getDepth()
    int8_t ret = self->getDepth();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getDepthInView(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Mat4 *arg1;       /** transform */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_object(L, 2, &arg1, "cc.Mat4");

    // float getDepthInView(const cocos2d::Mat4 &transform)
    float ret = self->getDepthInView(*arg1);
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getFarPlane(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // float getFarPlane()
    float ret = self->getFarPlane();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getNearPlane(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // float getNearPlane()
    float ret = self->getNearPlane();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getProjectionMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // const cocos2d::Mat4 &getProjectionMatrix()
    const cocos2d::Mat4 &ret = self->getProjectionMatrix();
    int num_ret = olua_push_object(L, ret, "cc.Mat4");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getRenderOrder(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // int getRenderOrder()
    int ret = self->getRenderOrder();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // cocos2d::Camera::Type getType()
    cocos2d::Camera::Type ret = self->getType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getViewMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // const cocos2d::Mat4 &getViewMatrix()
    const cocos2d::Mat4 &ret = self->getViewMatrix();
    int num_ret = olua_push_object(L, ret, "cc.Mat4");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getViewProjectionMatrix(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // const cocos2d::Mat4 &getViewProjectionMatrix()
    const cocos2d::Mat4 &ret = self->getViewProjectionMatrix();
    int num_ret = olua_push_object(L, ret, "cc.Mat4");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_getVisitingCamera(lua_State *L)
{
    olua_startinvoke(L);

    // static const cocos2d::Camera *getVisitingCamera()
    const cocos2d::Camera *ret = cocos2d::Camera::getVisitingCamera();
    int num_ret = olua_push_object(L, ret, "cc.Camera");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_initDefault(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // bool initDefault()
    bool ret = self->initDefault();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_initOrthographic(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    float arg1 = 0;       /** zoomX */
    float arg2 = 0;       /** zoomY */
    float arg3 = 0;       /** nearPlane */
    float arg4 = 0;       /** farPlane */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // bool initOrthographic(float zoomX, float zoomY, float nearPlane, float farPlane)
    bool ret = self->initOrthographic(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_initPerspective(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    float arg1 = 0;       /** fieldOfView */
    float arg2 = 0;       /** aspectRatio */
    float arg3 = 0;       /** nearPlane */
    float arg4 = 0;       /** farPlane */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);
    olua_check_number(L, 4, &arg3);
    olua_check_number(L, 5, &arg4);

    // bool initPerspective(float fieldOfView, float aspectRatio, float nearPlane, float farPlane)
    bool ret = self->initPerspective(arg1, arg2, arg3, arg4);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_isBrushValid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // bool isBrushValid()
    bool ret = self->isBrushValid();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_isViewProjectionUpdated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;

    olua_to_object(L, 1, &self, "cc.Camera");

    // bool isViewProjectionUpdated()
    bool ret = self->isViewProjectionUpdated();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_lookAt$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Vec3 *arg1;       /** target */
    cocos2d::Vec3 *arg2;       /** up */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_object(L, 2, &arg1, "cc.Vec3");
    olua_check_object(L, 3, &arg2, "cc.Vec3");

    // void lookAt(const cocos2d::Vec3 &target, @optional const cocos2d::Vec3 &up)
    self->lookAt(*arg1, *arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_lookAt$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Vec3 *arg1;       /** target */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_object(L, 2, &arg1, "cc.Vec3");

    // void lookAt(const cocos2d::Vec3 &target)
    self->lookAt(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_lookAt(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Camera")) && (olua_is_object(L, 2, "cc.Vec3"))) {
            // void lookAt(const cocos2d::Vec3 &target)
            return _olua_fun_cocos2d_Camera_lookAt$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.Camera")) && (olua_is_object(L, 2, "cc.Vec3")) && (olua_is_object(L, 3, "cc.Vec3"))) {
            // void lookAt(const cocos2d::Vec3 &target, @optional const cocos2d::Vec3 &up)
            return _olua_fun_cocos2d_Camera_lookAt$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Camera::lookAt' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Camera_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::Camera()
    cocos2d::Camera *ret = new cocos2d::Camera();
    int num_ret = olua_push_object(L, ret, "cc.Camera");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_project(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Vec3 *arg1;       /** src */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_object(L, 2, &arg1, "cc.Vec3");

    // cocos2d::Vec2 project(const cocos2d::Vec3 &src)
    cocos2d::Vec2 ret = self->project(*arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_projectGL(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Vec3 *arg1;       /** src */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_object(L, 2, &arg1, "cc.Vec3");

    // cocos2d::Vec2 projectGL(const cocos2d::Vec3 &src)
    cocos2d::Vec2 ret = self->projectGL(*arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_setAdditionalProjection(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Mat4 *arg1;       /** mat */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_object(L, 2, &arg1, "cc.Mat4");

    // void setAdditionalProjection(const cocos2d::Mat4 &mat)
    self->setAdditionalProjection(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_setBackgroundBrush(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::CameraBackgroundBrush *arg1 = nullptr;       /** clearBrush */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_object(L, 2, &arg1, "cc.CameraBackgroundBrush");

    // void setBackgroundBrush(cocos2d::CameraBackgroundBrush *clearBrush)
    self->setBackgroundBrush(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_setCameraFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::CameraFlag arg1 = (cocos2d::CameraFlag)0;       /** flag */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_enum(L, 2, &arg1);

    // void setCameraFlag(cocos2d::CameraFlag flag)
    self->setCameraFlag(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_setDefaultViewport(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Viewport *arg1;       /** vp */

    olua_check_object(L, 1, &arg1, "cc.Viewport");

    // static void setDefaultViewport(const cocos2d::Viewport &vp)
    cocos2d::Camera::setDefaultViewport(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_setDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    int8_t arg1 = 0;       /** depth */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_integer(L, 2, &arg1);

    // void setDepth(int8_t depth)
    self->setDepth(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_setScene(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Scene *arg1 = nullptr;       /** scene */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_object(L, 2, &arg1, "cc.Scene");

    // void setScene(cocos2d::Scene *scene)
    self->setScene(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_unproject$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Vec3 *arg1;       /** src */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_object(L, 2, &arg1, "cc.Vec3");

    // cocos2d::Vec3 unproject(const cocos2d::Vec3 &src)
    cocos2d::Vec3 ret = self->unproject(*arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec3");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_unproject$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Size *arg1;       /** size */
    cocos2d::Vec3 *arg2 = nullptr;       /** src */
    cocos2d::Vec3 *arg3 = nullptr;       /** dst */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_object(L, 2, &arg1, "cc.Size");
    olua_check_object(L, 3, &arg2, "cc.Vec3");
    olua_check_object(L, 4, &arg3, "cc.Vec3");

    // void unproject(const cocos2d::Size &size, const cocos2d::Vec3 *src, cocos2d::Vec3 *dst)
    self->unproject(*arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_unproject(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Camera")) && (olua_is_object(L, 2, "cc.Vec3"))) {
            // cocos2d::Vec3 unproject(const cocos2d::Vec3 &src)
            return _olua_fun_cocos2d_Camera_unproject$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Camera")) && (olua_is_object(L, 2, "cc.Size")) && (olua_is_object(L, 3, "cc.Vec3")) && (olua_is_object(L, 4, "cc.Vec3"))) {
            // void unproject(const cocos2d::Size &size, const cocos2d::Vec3 *src, cocos2d::Vec3 *dst)
            return _olua_fun_cocos2d_Camera_unproject$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Camera::unproject' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_Camera_unprojectGL$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Vec3 *arg1;       /** src */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_object(L, 2, &arg1, "cc.Vec3");

    // cocos2d::Vec3 unprojectGL(const cocos2d::Vec3 &src)
    cocos2d::Vec3 ret = self->unprojectGL(*arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec3");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_Camera_unprojectGL$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Camera *self = nullptr;
    cocos2d::Size *arg1;       /** size */
    cocos2d::Vec3 *arg2 = nullptr;       /** src */
    cocos2d::Vec3 *arg3 = nullptr;       /** dst */

    olua_to_object(L, 1, &self, "cc.Camera");
    olua_check_object(L, 2, &arg1, "cc.Size");
    olua_check_object(L, 3, &arg2, "cc.Vec3");
    olua_check_object(L, 4, &arg3, "cc.Vec3");

    // void unprojectGL(const cocos2d::Size &size, const cocos2d::Vec3 *src, cocos2d::Vec3 *dst)
    self->unprojectGL(*arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_Camera_unprojectGL(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Camera")) && (olua_is_object(L, 2, "cc.Vec3"))) {
            // cocos2d::Vec3 unprojectGL(const cocos2d::Vec3 &src)
            return _olua_fun_cocos2d_Camera_unprojectGL$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.Camera")) && (olua_is_object(L, 2, "cc.Size")) && (olua_is_object(L, 3, "cc.Vec3")) && (olua_is_object(L, 4, "cc.Vec3"))) {
            // void unprojectGL(const cocos2d::Size &size, const cocos2d::Vec3 *src, cocos2d::Vec3 *dst)
            return _olua_fun_cocos2d_Camera_unprojectGL$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::Camera::unprojectGL' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_cls_cc_Camera(lua_State *L)
{
    oluacls_class<cocos2d::Camera, cocos2d::Node>(L, "cc.Camera");
    oluacls_func(L, "apply", _olua_fun_cocos2d_Camera_apply);
    oluacls_func(L, "applyViewport", _olua_fun_cocos2d_Camera_applyViewport);
    oluacls_func(L, "clearBackground", _olua_fun_cocos2d_Camera_clearBackground);
    oluacls_func(L, "create", _olua_fun_cocos2d_Camera_create);
    oluacls_func(L, "createOrthographic", _olua_fun_cocos2d_Camera_createOrthographic);
    oluacls_func(L, "createPerspective", _olua_fun_cocos2d_Camera_createPerspective);
    oluacls_func(L, "getBackgroundBrush", _olua_fun_cocos2d_Camera_getBackgroundBrush);
    oluacls_func(L, "getCameraFlag", _olua_fun_cocos2d_Camera_getCameraFlag);
    oluacls_func(L, "getDefaultCamera", _olua_fun_cocos2d_Camera_getDefaultCamera);
    oluacls_func(L, "getDefaultViewport", _olua_fun_cocos2d_Camera_getDefaultViewport);
    oluacls_func(L, "getDepth", _olua_fun_cocos2d_Camera_getDepth);
    oluacls_func(L, "getDepthInView", _olua_fun_cocos2d_Camera_getDepthInView);
    oluacls_func(L, "getFarPlane", _olua_fun_cocos2d_Camera_getFarPlane);
    oluacls_func(L, "getNearPlane", _olua_fun_cocos2d_Camera_getNearPlane);
    oluacls_func(L, "getProjectionMatrix", _olua_fun_cocos2d_Camera_getProjectionMatrix);
    oluacls_func(L, "getRenderOrder", _olua_fun_cocos2d_Camera_getRenderOrder);
    oluacls_func(L, "getType", _olua_fun_cocos2d_Camera_getType);
    oluacls_func(L, "getViewMatrix", _olua_fun_cocos2d_Camera_getViewMatrix);
    oluacls_func(L, "getViewProjectionMatrix", _olua_fun_cocos2d_Camera_getViewProjectionMatrix);
    oluacls_func(L, "getVisitingCamera", _olua_fun_cocos2d_Camera_getVisitingCamera);
    oluacls_func(L, "initDefault", _olua_fun_cocos2d_Camera_initDefault);
    oluacls_func(L, "initOrthographic", _olua_fun_cocos2d_Camera_initOrthographic);
    oluacls_func(L, "initPerspective", _olua_fun_cocos2d_Camera_initPerspective);
    oluacls_func(L, "isBrushValid", _olua_fun_cocos2d_Camera_isBrushValid);
    oluacls_func(L, "isViewProjectionUpdated", _olua_fun_cocos2d_Camera_isViewProjectionUpdated);
    oluacls_func(L, "lookAt", _olua_fun_cocos2d_Camera_lookAt);
    oluacls_func(L, "new", _olua_fun_cocos2d_Camera_new);
    oluacls_func(L, "project", _olua_fun_cocos2d_Camera_project);
    oluacls_func(L, "projectGL", _olua_fun_cocos2d_Camera_projectGL);
    oluacls_func(L, "setAdditionalProjection", _olua_fun_cocos2d_Camera_setAdditionalProjection);
    oluacls_func(L, "setBackgroundBrush", _olua_fun_cocos2d_Camera_setBackgroundBrush);
    oluacls_func(L, "setCameraFlag", _olua_fun_cocos2d_Camera_setCameraFlag);
    oluacls_func(L, "setDefaultViewport", _olua_fun_cocos2d_Camera_setDefaultViewport);
    oluacls_func(L, "setDepth", _olua_fun_cocos2d_Camera_setDepth);
    oluacls_func(L, "setScene", _olua_fun_cocos2d_Camera_setScene);
    oluacls_func(L, "unproject", _olua_fun_cocos2d_Camera_unproject);
    oluacls_func(L, "unprojectGL", _olua_fun_cocos2d_Camera_unprojectGL);
    oluacls_prop(L, "backgroundBrush", _olua_fun_cocos2d_Camera_getBackgroundBrush, _olua_fun_cocos2d_Camera_setBackgroundBrush);
    oluacls_prop(L, "brushValid", _olua_fun_cocos2d_Camera_isBrushValid, nullptr);
    oluacls_prop(L, "cameraFlag", _olua_fun_cocos2d_Camera_getCameraFlag, _olua_fun_cocos2d_Camera_setCameraFlag);
    oluacls_prop(L, "defaultCamera", _olua_fun_cocos2d_Camera_getDefaultCamera, nullptr);
    oluacls_prop(L, "defaultViewport", _olua_fun_cocos2d_Camera_getDefaultViewport, _olua_fun_cocos2d_Camera_setDefaultViewport);
    oluacls_prop(L, "depth", _olua_fun_cocos2d_Camera_getDepth, _olua_fun_cocos2d_Camera_setDepth);
    oluacls_prop(L, "farPlane", _olua_fun_cocos2d_Camera_getFarPlane, nullptr);
    oluacls_prop(L, "nearPlane", _olua_fun_cocos2d_Camera_getNearPlane, nullptr);
    oluacls_prop(L, "projectionMatrix", _olua_fun_cocos2d_Camera_getProjectionMatrix, nullptr);
    oluacls_prop(L, "renderOrder", _olua_fun_cocos2d_Camera_getRenderOrder, nullptr);
    oluacls_prop(L, "type", _olua_fun_cocos2d_Camera_getType, nullptr);
    oluacls_prop(L, "viewMatrix", _olua_fun_cocos2d_Camera_getViewMatrix, nullptr);
    oluacls_prop(L, "viewProjectionMatrix", _olua_fun_cocos2d_Camera_getViewProjectionMatrix, nullptr);
    oluacls_prop(L, "viewProjectionUpdated", _olua_fun_cocos2d_Camera_isViewProjectionUpdated, nullptr);
    oluacls_prop(L, "visitingCamera", _olua_fun_cocos2d_Camera_getVisitingCamera, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_Camera(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.Camera")) {
        luaL_error(L, "class not found: cocos2d::Camera");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_CameraBackgroundBrush_BrushType(lua_State *L)
{
    oluacls_class<cocos2d::CameraBackgroundBrush::BrushType>(L, "cc.CameraBackgroundBrush.BrushType");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "COLOR", (lua_Integer)cocos2d::CameraBackgroundBrush::BrushType::COLOR);
    oluacls_enum(L, "DEPTH", (lua_Integer)cocos2d::CameraBackgroundBrush::BrushType::DEPTH);
    oluacls_enum(L, "NONE", (lua_Integer)cocos2d::CameraBackgroundBrush::BrushType::NONE);
    oluacls_enum(L, "SKYBOX", (lua_Integer)cocos2d::CameraBackgroundBrush::BrushType::SKYBOX);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_CameraBackgroundBrush_BrushType(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.CameraBackgroundBrush.BrushType")) {
        luaL_error(L, "class not found: cocos2d::CameraBackgroundBrush::BrushType");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_CameraBackgroundBrush_createColorBrush(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4F arg1;       /** color */
    float arg2 = 0;       /** depth */

    olua_check_cocos2d_Color4F(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static cocos2d::CameraBackgroundColorBrush *createColorBrush(const cocos2d::Color4F &color, float depth)
    cocos2d::CameraBackgroundColorBrush *ret = cocos2d::CameraBackgroundBrush::createColorBrush(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundColorBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundBrush_createDepthBrush$1(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** depth */

    olua_check_number(L, 1, &arg1);

    // static cocos2d::CameraBackgroundDepthBrush *createDepthBrush(@optional float depth)
    cocos2d::CameraBackgroundDepthBrush *ret = cocos2d::CameraBackgroundBrush::createDepthBrush(arg1);
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundDepthBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundBrush_createDepthBrush$2(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::CameraBackgroundDepthBrush *createDepthBrush()
    cocos2d::CameraBackgroundDepthBrush *ret = cocos2d::CameraBackgroundBrush::createDepthBrush();
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundDepthBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundBrush_createDepthBrush(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::CameraBackgroundDepthBrush *createDepthBrush()
        return _olua_fun_cocos2d_CameraBackgroundBrush_createDepthBrush$2(L);
    }

    if (num_args == 1) {
        // if ((olua_is_number(L, 1))) {
            // static cocos2d::CameraBackgroundDepthBrush *createDepthBrush(@optional float depth)
            return _olua_fun_cocos2d_CameraBackgroundBrush_createDepthBrush$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::CameraBackgroundBrush::createDepthBrush' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_CameraBackgroundBrush_createNoneBrush(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::CameraBackgroundBrush *createNoneBrush()
    cocos2d::CameraBackgroundBrush *ret = cocos2d::CameraBackgroundBrush::createNoneBrush();
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundBrush_createSkyboxBrush(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** positive_x */
    std::string arg2;       /** negative_x */
    std::string arg3;       /** positive_y */
    std::string arg4;       /** negative_y */
    std::string arg5;       /** positive_z */
    std::string arg6;       /** negative_z */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_string(L, 3, &arg3);
    olua_check_string(L, 4, &arg4);
    olua_check_string(L, 5, &arg5);
    olua_check_string(L, 6, &arg6);

    // static cocos2d::CameraBackgroundSkyBoxBrush *createSkyboxBrush(const std::string &positive_x, const std::string &negative_x, const std::string &positive_y, const std::string &negative_y, const std::string &positive_z, const std::string &negative_z)
    cocos2d::CameraBackgroundSkyBoxBrush *ret = cocos2d::CameraBackgroundBrush::createSkyboxBrush(arg1, arg2, arg3, arg4, arg5, arg6);
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundSkyBoxBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundBrush_drawBackground(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundBrush *self = nullptr;
    cocos2d::Camera *arg1 = nullptr;       /** arg1 */

    olua_to_object(L, 1, &self, "cc.CameraBackgroundBrush");
    olua_check_object(L, 2, &arg1, "cc.Camera");

    // void drawBackground(cocos2d::Camera *arg1)
    self->drawBackground(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CameraBackgroundBrush_getBrushType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundBrush *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CameraBackgroundBrush");

    // cocos2d::CameraBackgroundBrush::BrushType getBrushType()
    cocos2d::CameraBackgroundBrush::BrushType ret = self->getBrushType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundBrush_init(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundBrush *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CameraBackgroundBrush");

    // bool init()
    bool ret = self->init();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundBrush_isValid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundBrush *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CameraBackgroundBrush");

    // bool isValid()
    bool ret = self->isValid();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundBrush_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::CameraBackgroundBrush()
    cocos2d::CameraBackgroundBrush *ret = new cocos2d::CameraBackgroundBrush();
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundBrush");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_CameraBackgroundBrush(lua_State *L)
{
    oluacls_class<cocos2d::CameraBackgroundBrush, cocos2d::Ref>(L, "cc.CameraBackgroundBrush");
    oluacls_func(L, "createColorBrush", _olua_fun_cocos2d_CameraBackgroundBrush_createColorBrush);
    oluacls_func(L, "createDepthBrush", _olua_fun_cocos2d_CameraBackgroundBrush_createDepthBrush);
    oluacls_func(L, "createNoneBrush", _olua_fun_cocos2d_CameraBackgroundBrush_createNoneBrush);
    oluacls_func(L, "createSkyboxBrush", _olua_fun_cocos2d_CameraBackgroundBrush_createSkyboxBrush);
    oluacls_func(L, "drawBackground", _olua_fun_cocos2d_CameraBackgroundBrush_drawBackground);
    oluacls_func(L, "getBrushType", _olua_fun_cocos2d_CameraBackgroundBrush_getBrushType);
    oluacls_func(L, "init", _olua_fun_cocos2d_CameraBackgroundBrush_init);
    oluacls_func(L, "isValid", _olua_fun_cocos2d_CameraBackgroundBrush_isValid);
    oluacls_func(L, "new", _olua_fun_cocos2d_CameraBackgroundBrush_new);
    oluacls_prop(L, "brushType", _olua_fun_cocos2d_CameraBackgroundBrush_getBrushType, nullptr);
    oluacls_prop(L, "valid", _olua_fun_cocos2d_CameraBackgroundBrush_isValid, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_CameraBackgroundBrush(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.CameraBackgroundBrush")) {
        luaL_error(L, "class not found: cocos2d::CameraBackgroundBrush");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_CameraBackgroundDepthBrush_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** depth */

    olua_check_number(L, 1, &arg1);

    // static cocos2d::CameraBackgroundDepthBrush *create(float depth)
    cocos2d::CameraBackgroundDepthBrush *ret = cocos2d::CameraBackgroundDepthBrush::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundDepthBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundDepthBrush_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::CameraBackgroundDepthBrush()
    cocos2d::CameraBackgroundDepthBrush *ret = new cocos2d::CameraBackgroundDepthBrush();
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundDepthBrush");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundDepthBrush_setDepth(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundDepthBrush *self = nullptr;
    float arg1 = 0;       /** depth */

    olua_to_object(L, 1, &self, "cc.CameraBackgroundDepthBrush");
    olua_check_number(L, 2, &arg1);

    // void setDepth(float depth)
    self->setDepth(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_CameraBackgroundDepthBrush(lua_State *L)
{
    oluacls_class<cocos2d::CameraBackgroundDepthBrush, cocos2d::CameraBackgroundBrush>(L, "cc.CameraBackgroundDepthBrush");
    oluacls_func(L, "create", _olua_fun_cocos2d_CameraBackgroundDepthBrush_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_CameraBackgroundDepthBrush_new);
    oluacls_func(L, "setDepth", _olua_fun_cocos2d_CameraBackgroundDepthBrush_setDepth);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_CameraBackgroundDepthBrush(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.CameraBackgroundDepthBrush")) {
        luaL_error(L, "class not found: cocos2d::CameraBackgroundDepthBrush");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_CameraBackgroundColorBrush_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Color4F arg1;       /** color */
    float arg2 = 0;       /** depth */

    olua_check_cocos2d_Color4F(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static cocos2d::CameraBackgroundColorBrush *create(const cocos2d::Color4F &color, float depth)
    cocos2d::CameraBackgroundColorBrush *ret = cocos2d::CameraBackgroundColorBrush::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundColorBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundColorBrush_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::CameraBackgroundColorBrush()
    cocos2d::CameraBackgroundColorBrush *ret = new cocos2d::CameraBackgroundColorBrush();
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundColorBrush");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundColorBrush_setColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundColorBrush *self = nullptr;
    cocos2d::Color4F arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.CameraBackgroundColorBrush");
    olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setColor(const cocos2d::Color4F &color)
    self->setColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_CameraBackgroundColorBrush(lua_State *L)
{
    oluacls_class<cocos2d::CameraBackgroundColorBrush, cocos2d::CameraBackgroundDepthBrush>(L, "cc.CameraBackgroundColorBrush");
    oluacls_func(L, "create", _olua_fun_cocos2d_CameraBackgroundColorBrush_create);
    oluacls_func(L, "new", _olua_fun_cocos2d_CameraBackgroundColorBrush_new);
    oluacls_func(L, "setColor", _olua_fun_cocos2d_CameraBackgroundColorBrush_setColor);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_CameraBackgroundColorBrush(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.CameraBackgroundColorBrush")) {
        luaL_error(L, "class not found: cocos2d::CameraBackgroundColorBrush");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_create$1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** positive_x */
    std::string arg2;       /** negative_x */
    std::string arg3;       /** positive_y */
    std::string arg4;       /** negative_y */
    std::string arg5;       /** positive_z */
    std::string arg6;       /** negative_z */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);
    olua_check_string(L, 3, &arg3);
    olua_check_string(L, 4, &arg4);
    olua_check_string(L, 5, &arg5);
    olua_check_string(L, 6, &arg6);

    // static cocos2d::CameraBackgroundSkyBoxBrush *create(const std::string &positive_x, const std::string &negative_x, const std::string &positive_y, const std::string &negative_y, const std::string &positive_z, const std::string &negative_z)
    cocos2d::CameraBackgroundSkyBoxBrush *ret = cocos2d::CameraBackgroundSkyBoxBrush::create(arg1, arg2, arg3, arg4, arg5, arg6);
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundSkyBoxBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_create$2(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::CameraBackgroundSkyBoxBrush *create()
    cocos2d::CameraBackgroundSkyBoxBrush *ret = cocos2d::CameraBackgroundSkyBoxBrush::create();
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundSkyBoxBrush");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::CameraBackgroundSkyBoxBrush *create()
        return _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_create$2(L);
    }

    if (num_args == 6) {
        // if ((olua_is_string(L, 1)) && (olua_is_string(L, 2)) && (olua_is_string(L, 3)) && (olua_is_string(L, 4)) && (olua_is_string(L, 5)) && (olua_is_string(L, 6))) {
            // static cocos2d::CameraBackgroundSkyBoxBrush *create(const std::string &positive_x, const std::string &negative_x, const std::string &positive_y, const std::string &negative_y, const std::string &positive_z, const std::string &negative_z)
            return _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::CameraBackgroundSkyBoxBrush::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_isActived(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundSkyBoxBrush *self = nullptr;

    olua_to_object(L, 1, &self, "cc.CameraBackgroundSkyBoxBrush");

    // bool isActived()
    bool ret = self->isActived();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::CameraBackgroundSkyBoxBrush()
    cocos2d::CameraBackgroundSkyBoxBrush *ret = new cocos2d::CameraBackgroundSkyBoxBrush();
    int num_ret = olua_push_object(L, ret, "cc.CameraBackgroundSkyBoxBrush");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_setActived(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundSkyBoxBrush *self = nullptr;
    bool arg1 = false;       /** actived */

    olua_to_object(L, 1, &self, "cc.CameraBackgroundSkyBoxBrush");
    olua_check_bool(L, 2, &arg1);

    // void setActived(bool actived)
    self->setActived(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundSkyBoxBrush *self = nullptr;
    cocos2d::TextureCube *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.CameraBackgroundSkyBoxBrush");
    olua_check_object(L, 2, &arg1, "cc.TextureCube");

    // void setTexture(cocos2d::TextureCube *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_setTextureValid(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::CameraBackgroundSkyBoxBrush *self = nullptr;
    bool arg1 = false;       /** valid */

    olua_to_object(L, 1, &self, "cc.CameraBackgroundSkyBoxBrush");
    olua_check_bool(L, 2, &arg1);

    // void setTextureValid(bool valid)
    self->setTextureValid(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_CameraBackgroundSkyBoxBrush(lua_State *L)
{
    oluacls_class<cocos2d::CameraBackgroundSkyBoxBrush, cocos2d::CameraBackgroundBrush>(L, "cc.CameraBackgroundSkyBoxBrush");
    oluacls_func(L, "create", _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_create);
    oluacls_func(L, "isActived", _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_isActived);
    oluacls_func(L, "new", _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_new);
    oluacls_func(L, "setActived", _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_setActived);
    oluacls_func(L, "setTexture", _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_setTexture);
    oluacls_func(L, "setTextureValid", _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_setTextureValid);
    oluacls_prop(L, "actived", _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_isActived, _olua_fun_cocos2d_CameraBackgroundSkyBoxBrush_setActived);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_CameraBackgroundSkyBoxBrush(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.CameraBackgroundSkyBoxBrush")) {
        luaL_error(L, "class not found: cocos2d::CameraBackgroundSkyBoxBrush");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_PlayableProtocol___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::PlayableProtocol *)olua_toobj(L, 1, "cc.PlayableProtocol");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_PlayableProtocol_start(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PlayableProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.PlayableProtocol");

    // void start()
    self->start();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_PlayableProtocol_stop(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::PlayableProtocol *self = nullptr;

    olua_to_object(L, 1, &self, "cc.PlayableProtocol");

    // void stop()
    self->stop();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_PlayableProtocol(lua_State *L)
{
    oluacls_class<cocos2d::PlayableProtocol>(L, "cc.PlayableProtocol");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_PlayableProtocol___gc);
    oluacls_func(L, "start", _olua_fun_cocos2d_PlayableProtocol_start);
    oluacls_func(L, "stop", _olua_fun_cocos2d_PlayableProtocol_stop);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_PlayableProtocol(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.PlayableProtocol")) {
        luaL_error(L, "class not found: cocos2d::PlayableProtocol");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleBatchNode_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.ParticleBatchNode");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.BlendProtocol")) {
            olua_pushobj_as<cocos2d::BlendProtocol>(L, 1, self, "as.cc.BlendProtocol");
            break;
        }
        if (olua_strequal(arg1, "cc.TextureProtocol")) {
            olua_pushobj_as<cocos2d::TextureProtocol>(L, 1, self, "as.cc.TextureProtocol");
            break;
        }

        luaL_error(L, "'cocos2d::ParticleBatchNode' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_ParticleBatchNode_create$1(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** fileImage */
    int arg2 = 0;       /** capacity */

    olua_check_string(L, 1, &arg1);
    olua_check_integer(L, 2, &arg2);

    // static cocos2d::ParticleBatchNode *create(const std::string &fileImage, @optional int capacity)
    cocos2d::ParticleBatchNode *ret = cocos2d::ParticleBatchNode::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.ParticleBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleBatchNode_create$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** fileImage */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::ParticleBatchNode *create(const std::string &fileImage)
    cocos2d::ParticleBatchNode *ret = cocos2d::ParticleBatchNode::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleBatchNode_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_string(L, 1))) {
            // static cocos2d::ParticleBatchNode *create(const std::string &fileImage)
            return _olua_fun_cocos2d_ParticleBatchNode_create$2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_string(L, 1)) && (olua_is_integer(L, 2))) {
            // static cocos2d::ParticleBatchNode *create(const std::string &fileImage, @optional int capacity)
            return _olua_fun_cocos2d_ParticleBatchNode_create$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ParticleBatchNode::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_ParticleBatchNode_createWithTexture$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** tex */
    int arg2 = 0;       /** capacity */

    olua_check_object(L, 1, &arg1, "cc.Texture2D");
    olua_check_integer(L, 2, &arg2);

    // static cocos2d::ParticleBatchNode *createWithTexture(cocos2d::Texture2D *tex, @optional int capacity)
    cocos2d::ParticleBatchNode *ret = cocos2d::ParticleBatchNode::createWithTexture(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.ParticleBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleBatchNode_createWithTexture$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::Texture2D *arg1 = nullptr;       /** tex */

    olua_check_object(L, 1, &arg1, "cc.Texture2D");

    // static cocos2d::ParticleBatchNode *createWithTexture(cocos2d::Texture2D *tex)
    cocos2d::ParticleBatchNode *ret = cocos2d::ParticleBatchNode::createWithTexture(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleBatchNode_createWithTexture(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 1) {
        // if ((olua_is_object(L, 1, "cc.Texture2D"))) {
            // static cocos2d::ParticleBatchNode *createWithTexture(cocos2d::Texture2D *tex)
            return _olua_fun_cocos2d_ParticleBatchNode_createWithTexture$2(L);
        // }
    }

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.Texture2D")) && (olua_is_integer(L, 2))) {
            // static cocos2d::ParticleBatchNode *createWithTexture(cocos2d::Texture2D *tex, @optional int capacity)
            return _olua_fun_cocos2d_ParticleBatchNode_createWithTexture$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ParticleBatchNode::createWithTexture' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_ParticleBatchNode_disableParticle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    int arg1 = 0;       /** particleIndex */

    olua_to_object(L, 1, &self, "cc.ParticleBatchNode");
    olua_check_integer(L, 2, &arg1);

    // void disableParticle(int particleIndex)
    self->disableParticle(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleBatchNode_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleBatchNode");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = self->getBlendFunc();
    int num_ret = olua_push_object(L, ret, "cc.BlendFunc");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleBatchNode_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleBatchNode");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = self->getTexture();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleBatchNode_getTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleBatchNode");

    // cocos2d::TextureAtlas *getTextureAtlas()
    cocos2d::TextureAtlas *ret = self->getTextureAtlas();
    int num_ret = olua_push_object(L, ret, "cc.TextureAtlas");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleBatchNode_initWithFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    std::string arg1;       /** fileImage */
    int arg2 = 0;       /** capacity */

    olua_to_object(L, 1, &self, "cc.ParticleBatchNode");
    olua_check_string(L, 2, &arg1);
    olua_check_integer(L, 3, &arg2);

    // bool initWithFile(const std::string &fileImage, int capacity)
    bool ret = self->initWithFile(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleBatchNode_initWithTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** tex */
    int arg2 = 0;       /** capacity */

    olua_to_object(L, 1, &self, "cc.ParticleBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");
    olua_check_integer(L, 3, &arg2);

    // bool initWithTexture(cocos2d::Texture2D *tex, int capacity)
    bool ret = self->initWithTexture(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleBatchNode_insertChild(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    cocos2d::ParticleSystem *arg1 = nullptr;       /** system */
    int arg2 = 0;       /** index */

    olua_to_object(L, 1, &self, "cc.ParticleBatchNode");
    olua_check_object(L, 2, &arg1, "cc.ParticleSystem");
    olua_check_integer(L, 3, &arg2);

    // void insertChild(cocos2d::ParticleSystem *system, int index)
    self->insertChild(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleBatchNode_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleBatchNode()
    cocos2d::ParticleBatchNode *ret = new cocos2d::ParticleBatchNode();
    int num_ret = olua_push_object(L, ret, "cc.ParticleBatchNode");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleBatchNode_removeChildAtIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    int arg1 = 0;       /** index */
    bool arg2 = false;       /** doCleanup */

    olua_to_object(L, 1, &self, "cc.ParticleBatchNode");
    olua_check_integer(L, 2, &arg1);
    olua_check_bool(L, 3, &arg2);

    // void removeChildAtIndex(int index, bool doCleanup)
    self->removeChildAtIndex(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleBatchNode_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    cocos2d::BlendFunc *arg1;       /** blendFunc */

    olua_to_object(L, 1, &self, "cc.ParticleBatchNode");
    olua_check_object(L, 2, &arg1, "cc.BlendFunc");

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleBatchNode_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.ParticleBatchNode");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleBatchNode_setTextureAtlas(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleBatchNode *self = nullptr;
    cocos2d::TextureAtlas *arg1 = nullptr;       /** atlas */

    olua_to_object(L, 1, &self, "cc.ParticleBatchNode");
    olua_check_object(L, 2, &arg1, "cc.TextureAtlas");

    // void setTextureAtlas(cocos2d::TextureAtlas *atlas)
    self->setTextureAtlas(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_ParticleBatchNode(lua_State *L)
{
    oluacls_class<cocos2d::ParticleBatchNode, cocos2d::Node>(L, "cc.ParticleBatchNode");
    oluacls_func(L, "as", _olua_fun_cocos2d_ParticleBatchNode_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleBatchNode_create);
    oluacls_func(L, "createWithTexture", _olua_fun_cocos2d_ParticleBatchNode_createWithTexture);
    oluacls_func(L, "disableParticle", _olua_fun_cocos2d_ParticleBatchNode_disableParticle);
    oluacls_func(L, "getBlendFunc", _olua_fun_cocos2d_ParticleBatchNode_getBlendFunc);
    oluacls_func(L, "getTexture", _olua_fun_cocos2d_ParticleBatchNode_getTexture);
    oluacls_func(L, "getTextureAtlas", _olua_fun_cocos2d_ParticleBatchNode_getTextureAtlas);
    oluacls_func(L, "initWithFile", _olua_fun_cocos2d_ParticleBatchNode_initWithFile);
    oluacls_func(L, "initWithTexture", _olua_fun_cocos2d_ParticleBatchNode_initWithTexture);
    oluacls_func(L, "insertChild", _olua_fun_cocos2d_ParticleBatchNode_insertChild);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleBatchNode_new);
    oluacls_func(L, "removeChildAtIndex", _olua_fun_cocos2d_ParticleBatchNode_removeChildAtIndex);
    oluacls_func(L, "setBlendFunc", _olua_fun_cocos2d_ParticleBatchNode_setBlendFunc);
    oluacls_func(L, "setTexture", _olua_fun_cocos2d_ParticleBatchNode_setTexture);
    oluacls_func(L, "setTextureAtlas", _olua_fun_cocos2d_ParticleBatchNode_setTextureAtlas);
    oluacls_prop(L, "blendFunc", _olua_fun_cocos2d_ParticleBatchNode_getBlendFunc, _olua_fun_cocos2d_ParticleBatchNode_setBlendFunc);
    oluacls_prop(L, "texture", _olua_fun_cocos2d_ParticleBatchNode_getTexture, _olua_fun_cocos2d_ParticleBatchNode_setTexture);
    oluacls_prop(L, "textureAtlas", _olua_fun_cocos2d_ParticleBatchNode_getTextureAtlas, _olua_fun_cocos2d_ParticleBatchNode_setTextureAtlas);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleBatchNode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleBatchNode")) {
        luaL_error(L, "class not found: cocos2d::ParticleBatchNode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_ParticleSystem_Mode(lua_State *L)
{
    oluacls_class<cocos2d::ParticleSystem::Mode>(L, "cc.ParticleSystem.Mode");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "GRAVITY", (lua_Integer)cocos2d::ParticleSystem::Mode::GRAVITY);
    oluacls_enum(L, "RADIUS", (lua_Integer)cocos2d::ParticleSystem::Mode::RADIUS);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleSystem_Mode(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleSystem.Mode")) {
        luaL_error(L, "class not found: cocos2d::ParticleSystem::Mode");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_ParticleSystem_PositionType(lua_State *L)
{
    oluacls_class<cocos2d::ParticleSystem::PositionType>(L, "cc.ParticleSystem.PositionType");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "FREE", (lua_Integer)cocos2d::ParticleSystem::PositionType::FREE);
    oluacls_enum(L, "GROUPED", (lua_Integer)cocos2d::ParticleSystem::PositionType::GROUPED);
    oluacls_enum(L, "RELATIVE", (lua_Integer)cocos2d::ParticleSystem::PositionType::RELATIVE);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleSystem_PositionType(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleSystem.PositionType")) {
        luaL_error(L, "class not found: cocos2d::ParticleSystem::PositionType");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleSystem_addParticles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    int arg1 = 0;       /** count */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_integer(L, 2, &arg1);

    // void addParticles(int count)
    self->addParticles(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.BlendProtocol")) {
            olua_pushobj_as<cocos2d::BlendProtocol>(L, 1, self, "as.cc.BlendProtocol");
            break;
        }
        if (olua_strequal(arg1, "cc.PlayableProtocol")) {
            olua_pushobj_as<cocos2d::PlayableProtocol>(L, 1, self, "as.cc.PlayableProtocol");
            break;
        }
        if (olua_strequal(arg1, "cc.TextureProtocol")) {
            olua_pushobj_as<cocos2d::TextureProtocol>(L, 1, self, "as.cc.TextureProtocol");
            break;
        }

        luaL_error(L, "'cocos2d::ParticleSystem' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_ParticleSystem_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** plistFile */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::ParticleSystem *create(const std::string &plistFile)
    cocos2d::ParticleSystem *ret = cocos2d::ParticleSystem::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleSystem");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleSystem *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleSystem *ret = cocos2d::ParticleSystem::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleSystem");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getAllParticleSystems(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::Vector<cocos2d::ParticleSystem *> &getAllParticleSystems()
    cocos2d::Vector<cocos2d::ParticleSystem *> &ret = cocos2d::ParticleSystem::getAllParticleSystems();
    int num_ret = olua_push_array<cocos2d::ParticleSystem *>(L, ret, [L](cocos2d::ParticleSystem *arg1) {
        olua_push_object(L, arg1, "cc.ParticleSystem");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getAngle()
    float ret = self->getAngle();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getAngleVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getAngleVar()
    float ret = self->getAngleVar();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getAtlasIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // int getAtlasIndex()
    int ret = self->getAtlasIndex();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getBatchNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // cocos2d::ParticleBatchNode *getBatchNode()
    cocos2d::ParticleBatchNode *ret = self->getBatchNode();
    int num_ret = olua_push_object(L, ret, "cc.ParticleBatchNode");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // const cocos2d::BlendFunc &getBlendFunc()
    const cocos2d::BlendFunc &ret = self->getBlendFunc();
    int num_ret = olua_push_object(L, ret, "cc.BlendFunc");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getDuration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getDuration()
    float ret = self->getDuration();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getEmissionRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getEmissionRate()
    float ret = self->getEmissionRate();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getEmitterMode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // cocos2d::ParticleSystem::Mode getEmitterMode()
    cocos2d::ParticleSystem::Mode ret = self->getEmitterMode();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getEndColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // const cocos2d::Color4F &getEndColor()
    const cocos2d::Color4F &ret = self->getEndColor();
    int num_ret = olua_push_cocos2d_Color4F(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getEndColorVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // const cocos2d::Color4F &getEndColorVar()
    const cocos2d::Color4F &ret = self->getEndColorVar();
    int num_ret = olua_push_cocos2d_Color4F(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getEndRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getEndRadius()
    float ret = self->getEndRadius();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getEndRadiusVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getEndRadiusVar()
    float ret = self->getEndRadiusVar();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getEndSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getEndSize()
    float ret = self->getEndSize();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getEndSizeVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getEndSizeVar()
    float ret = self->getEndSizeVar();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getEndSpin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getEndSpin()
    float ret = self->getEndSpin();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getEndSpinVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getEndSpinVar()
    float ret = self->getEndSpinVar();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getGravity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // const cocos2d::Vec2 &getGravity()
    const cocos2d::Vec2 &ret = self->getGravity();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getLife(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getLife()
    float ret = self->getLife();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getLifeVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getLifeVar()
    float ret = self->getLifeVar();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getParticleCount(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // unsigned int getParticleCount()
    unsigned int ret = self->getParticleCount();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getPosVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // const cocos2d::Vec2 &getPosVar()
    const cocos2d::Vec2 &ret = self->getPosVar();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getPositionType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // cocos2d::ParticleSystem::PositionType getPositionType()
    cocos2d::ParticleSystem::PositionType ret = self->getPositionType();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getRadialAccel(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getRadialAccel()
    float ret = self->getRadialAccel();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getRadialAccelVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getRadialAccelVar()
    float ret = self->getRadialAccelVar();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getResourceFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // const std::string &getResourceFile()
    const std::string &ret = self->getResourceFile();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getRotatePerSecond(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getRotatePerSecond()
    float ret = self->getRotatePerSecond();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getRotatePerSecondVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getRotatePerSecondVar()
    float ret = self->getRotatePerSecondVar();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getRotationIsDir(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // bool getRotationIsDir()
    bool ret = self->getRotationIsDir();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getSourcePosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // const cocos2d::Vec2 &getSourcePosition()
    const cocos2d::Vec2 &ret = self->getSourcePosition();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getSpeed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getSpeed()
    float ret = self->getSpeed();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getSpeedVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getSpeedVar()
    float ret = self->getSpeedVar();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getStartColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // const cocos2d::Color4F &getStartColor()
    const cocos2d::Color4F &ret = self->getStartColor();
    int num_ret = olua_push_cocos2d_Color4F(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getStartColorVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // const cocos2d::Color4F &getStartColorVar()
    const cocos2d::Color4F &ret = self->getStartColorVar();
    int num_ret = olua_push_cocos2d_Color4F(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getStartRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getStartRadius()
    float ret = self->getStartRadius();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getStartRadiusVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getStartRadiusVar()
    float ret = self->getStartRadiusVar();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getStartSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getStartSize()
    float ret = self->getStartSize();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getStartSizeVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getStartSizeVar()
    float ret = self->getStartSizeVar();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getStartSpin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getStartSpin()
    float ret = self->getStartSpin();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getStartSpinVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getStartSpinVar()
    float ret = self->getStartSpinVar();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getTangentialAccel(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getTangentialAccel()
    float ret = self->getTangentialAccel();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getTangentialAccelVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // float getTangentialAccelVar()
    float ret = self->getTangentialAccelVar();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // cocos2d::Texture2D *getTexture()
    cocos2d::Texture2D *ret = self->getTexture();
    int num_ret = olua_push_object(L, ret, "cc.Texture2D");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_getTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // int getTotalParticles()
    int ret = self->getTotalParticles();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_initWithDictionary$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::ValueMap *arg1 = nullptr;       /** dictionary */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_pointer(L, 2, &arg1, "cc.types.ValueMap");

    // bool initWithDictionary(cocos2d::ValueMap &dictionary)
    bool ret = self->initWithDictionary(*arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_initWithDictionary$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::ValueMap *arg1 = nullptr;       /** dictionary */
    std::string arg2;       /** dirname */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_pointer(L, 2, &arg1, "cc.types.ValueMap");
    olua_check_string(L, 3, &arg2);

    // bool initWithDictionary(cocos2d::ValueMap &dictionary, const std::string &dirname)
    bool ret = self->initWithDictionary(*arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_initWithDictionary(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.ParticleSystem")) && (olua_is_pointer(L, 2, "cc.types.ValueMap"))) {
            // bool initWithDictionary(cocos2d::ValueMap &dictionary)
            return _olua_fun_cocos2d_ParticleSystem_initWithDictionary$1(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.ParticleSystem")) && (olua_is_pointer(L, 2, "cc.types.ValueMap")) && (olua_is_string(L, 3))) {
            // bool initWithDictionary(cocos2d::ValueMap &dictionary, const std::string &dirname)
            return _olua_fun_cocos2d_ParticleSystem_initWithDictionary$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ParticleSystem::initWithDictionary' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_initWithFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    std::string arg1;       /** plistFile */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_string(L, 2, &arg1);

    // bool initWithFile(const std::string &plistFile)
    bool ret = self->initWithFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_initWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    int arg1 = 0;       /** numberOfParticles */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_integer(L, 2, &arg1);

    // bool initWithTotalParticles(int numberOfParticles)
    bool ret = self->initWithTotalParticles(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_isActive(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // bool isActive()
    bool ret = self->isActive();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_isAutoRemoveOnFinish(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // bool isAutoRemoveOnFinish()
    bool ret = self->isAutoRemoveOnFinish();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_isBlendAdditive(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // bool isBlendAdditive()
    bool ret = self->isBlendAdditive();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_isFull(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // bool isFull()
    bool ret = self->isFull();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_isPaused(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // bool isPaused()
    bool ret = self->isPaused();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_isSourcePositionCompatible(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // bool isSourcePositionCompatible()
    bool ret = self->isSourcePositionCompatible();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleSystem()
    cocos2d::ParticleSystem *ret = new cocos2d::ParticleSystem();
    int num_ret = olua_push_object(L, ret, "cc.ParticleSystem");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystem_pauseEmissions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // void pauseEmissions()
    self->pauseEmissions();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_postStep(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // void postStep()
    self->postStep();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_resetSystem(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // void resetSystem()
    self->resetSystem();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_resumeEmissions(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // void resumeEmissions()
    self->resumeEmissions();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setAngle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** angle */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setAngle(float angle)
    self->setAngle(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setAngleVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** angleVar */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setAngleVar(float angleVar)
    self->setAngleVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setAtlasIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    int arg1 = 0;       /** index */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_integer(L, 2, &arg1);

    // void setAtlasIndex(int index)
    self->setAtlasIndex(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setAutoRemoveOnFinish(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    bool arg1 = false;       /** var */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_bool(L, 2, &arg1);

    // void setAutoRemoveOnFinish(bool var)
    self->setAutoRemoveOnFinish(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setBatchNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::ParticleBatchNode *arg1 = nullptr;       /** batchNode */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_object(L, 2, &arg1, "cc.ParticleBatchNode");

    // void setBatchNode(cocos2d::ParticleBatchNode *batchNode)
    self->setBatchNode(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setBlendAdditive(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    bool arg1 = false;       /** value */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_bool(L, 2, &arg1);

    // void setBlendAdditive(bool value)
    self->setBlendAdditive(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setBlendFunc(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::BlendFunc *arg1;       /** blendFunc */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_object(L, 2, &arg1, "cc.BlendFunc");

    // void setBlendFunc(const cocos2d::BlendFunc &blendFunc)
    self->setBlendFunc(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setDuration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** duration */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setDuration(float duration)
    self->setDuration(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setEmissionRate(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** rate */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEmissionRate(float rate)
    self->setEmissionRate(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setEmitterMode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::ParticleSystem::Mode arg1 = (cocos2d::ParticleSystem::Mode)0;       /** mode */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_enum(L, 2, &arg1);

    // void setEmitterMode(cocos2d::ParticleSystem::Mode mode)
    self->setEmitterMode(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setEndColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Color4F arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setEndColor(const cocos2d::Color4F &color)
    self->setEndColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setEndColorVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Color4F arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setEndColorVar(const cocos2d::Color4F &color)
    self->setEndColorVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setEndRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** endRadius */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEndRadius(float endRadius)
    self->setEndRadius(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setEndRadiusVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** endRadiusVar */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEndRadiusVar(float endRadiusVar)
    self->setEndRadiusVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setEndSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** endSize */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEndSize(float endSize)
    self->setEndSize(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setEndSizeVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** sizeVar */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEndSizeVar(float sizeVar)
    self->setEndSizeVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setEndSpin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** endSpin */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEndSpin(float endSpin)
    self->setEndSpin(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setEndSpinVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** endSpinVar */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setEndSpinVar(float endSpinVar)
    self->setEndSpinVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setGravity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Vec2 *arg1;       /** g */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setGravity(const cocos2d::Vec2 &g)
    self->setGravity(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setLife(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** life */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setLife(float life)
    self->setLife(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setLifeVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** lifeVar */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setLifeVar(float lifeVar)
    self->setLifeVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setPosVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Vec2 *arg1;       /** pos */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setPosVar(const cocos2d::Vec2 &pos)
    self->setPosVar(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setPositionType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::ParticleSystem::PositionType arg1 = (cocos2d::ParticleSystem::PositionType)0;       /** type */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_enum(L, 2, &arg1);

    // void setPositionType(cocos2d::ParticleSystem::PositionType type)
    self->setPositionType(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setRadialAccel(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** t */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setRadialAccel(float t)
    self->setRadialAccel(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setRadialAccelVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** t */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setRadialAccelVar(float t)
    self->setRadialAccelVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setRotatePerSecond(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** degrees */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setRotatePerSecond(float degrees)
    self->setRotatePerSecond(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setRotatePerSecondVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** degrees */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setRotatePerSecondVar(float degrees)
    self->setRotatePerSecondVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setRotationIsDir(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    bool arg1 = false;       /** t */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_bool(L, 2, &arg1);

    // void setRotationIsDir(bool t)
    self->setRotationIsDir(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setSourcePosition(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Vec2 *arg1;       /** pos */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setSourcePosition(const cocos2d::Vec2 &pos)
    self->setSourcePosition(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setSourcePositionCompatible(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    bool arg1 = false;       /** sourcePositionCompatible */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_bool(L, 2, &arg1);

    // void setSourcePositionCompatible(bool sourcePositionCompatible)
    self->setSourcePositionCompatible(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setSpeed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** speed */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setSpeed(float speed)
    self->setSpeed(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setSpeedVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** speed */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setSpeedVar(float speed)
    self->setSpeedVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setStartColor(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Color4F arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setStartColor(const cocos2d::Color4F &color)
    self->setStartColor(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setStartColorVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Color4F arg1;       /** color */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_cocos2d_Color4F(L, 2, &arg1);

    // void setStartColorVar(const cocos2d::Color4F &color)
    self->setStartColorVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setStartRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** startRadius */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setStartRadius(float startRadius)
    self->setStartRadius(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setStartRadiusVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** startRadiusVar */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setStartRadiusVar(float startRadiusVar)
    self->setStartRadiusVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setStartSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** startSize */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setStartSize(float startSize)
    self->setStartSize(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setStartSizeVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** sizeVar */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setStartSizeVar(float sizeVar)
    self->setStartSizeVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setStartSpin(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** spin */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setStartSpin(float spin)
    self->setStartSpin(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setStartSpinVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** pinVar */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setStartSpinVar(float pinVar)
    self->setStartSpinVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setTangentialAccel(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** t */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setTangentialAccel(float t)
    self->setTangentialAccel(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setTangentialAccelVar(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    float arg1 = 0;       /** t */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_number(L, 2, &arg1);

    // void setTangentialAccelVar(float t)
    self->setTangentialAccelVar(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setTexture(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");

    // void setTexture(cocos2d::Texture2D *texture)
    self->setTexture(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_setTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;
    int arg1 = 0;       /** totalParticles */

    olua_to_object(L, 1, &self, "cc.ParticleSystem");
    olua_check_integer(L, 2, &arg1);

    // void setTotalParticles(int totalParticles)
    self->setTotalParticles(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_start(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // void start()
    self->start();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_stop(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // void stop()
    self->stop();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_stopSystem(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // void stopSystem()
    self->stopSystem();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_updateParticleQuads(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // void updateParticleQuads()
    self->updateParticleQuads();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystem_updateWithNoTime(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystem *self = nullptr;

    olua_to_object(L, 1, &self, "cc.ParticleSystem");

    // void updateWithNoTime()
    self->updateWithNoTime();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_ParticleSystem(lua_State *L)
{
    oluacls_class<cocos2d::ParticleSystem, cocos2d::Node>(L, "cc.ParticleSystem");
    oluacls_func(L, "addParticles", _olua_fun_cocos2d_ParticleSystem_addParticles);
    oluacls_func(L, "as", _olua_fun_cocos2d_ParticleSystem_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleSystem_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleSystem_createWithTotalParticles);
    oluacls_func(L, "getAllParticleSystems", _olua_fun_cocos2d_ParticleSystem_getAllParticleSystems);
    oluacls_func(L, "getAngle", _olua_fun_cocos2d_ParticleSystem_getAngle);
    oluacls_func(L, "getAngleVar", _olua_fun_cocos2d_ParticleSystem_getAngleVar);
    oluacls_func(L, "getAtlasIndex", _olua_fun_cocos2d_ParticleSystem_getAtlasIndex);
    oluacls_func(L, "getBatchNode", _olua_fun_cocos2d_ParticleSystem_getBatchNode);
    oluacls_func(L, "getBlendFunc", _olua_fun_cocos2d_ParticleSystem_getBlendFunc);
    oluacls_func(L, "getDuration", _olua_fun_cocos2d_ParticleSystem_getDuration);
    oluacls_func(L, "getEmissionRate", _olua_fun_cocos2d_ParticleSystem_getEmissionRate);
    oluacls_func(L, "getEmitterMode", _olua_fun_cocos2d_ParticleSystem_getEmitterMode);
    oluacls_func(L, "getEndColor", _olua_fun_cocos2d_ParticleSystem_getEndColor);
    oluacls_func(L, "getEndColorVar", _olua_fun_cocos2d_ParticleSystem_getEndColorVar);
    oluacls_func(L, "getEndRadius", _olua_fun_cocos2d_ParticleSystem_getEndRadius);
    oluacls_func(L, "getEndRadiusVar", _olua_fun_cocos2d_ParticleSystem_getEndRadiusVar);
    oluacls_func(L, "getEndSize", _olua_fun_cocos2d_ParticleSystem_getEndSize);
    oluacls_func(L, "getEndSizeVar", _olua_fun_cocos2d_ParticleSystem_getEndSizeVar);
    oluacls_func(L, "getEndSpin", _olua_fun_cocos2d_ParticleSystem_getEndSpin);
    oluacls_func(L, "getEndSpinVar", _olua_fun_cocos2d_ParticleSystem_getEndSpinVar);
    oluacls_func(L, "getGravity", _olua_fun_cocos2d_ParticleSystem_getGravity);
    oluacls_func(L, "getLife", _olua_fun_cocos2d_ParticleSystem_getLife);
    oluacls_func(L, "getLifeVar", _olua_fun_cocos2d_ParticleSystem_getLifeVar);
    oluacls_func(L, "getParticleCount", _olua_fun_cocos2d_ParticleSystem_getParticleCount);
    oluacls_func(L, "getPosVar", _olua_fun_cocos2d_ParticleSystem_getPosVar);
    oluacls_func(L, "getPositionType", _olua_fun_cocos2d_ParticleSystem_getPositionType);
    oluacls_func(L, "getRadialAccel", _olua_fun_cocos2d_ParticleSystem_getRadialAccel);
    oluacls_func(L, "getRadialAccelVar", _olua_fun_cocos2d_ParticleSystem_getRadialAccelVar);
    oluacls_func(L, "getResourceFile", _olua_fun_cocos2d_ParticleSystem_getResourceFile);
    oluacls_func(L, "getRotatePerSecond", _olua_fun_cocos2d_ParticleSystem_getRotatePerSecond);
    oluacls_func(L, "getRotatePerSecondVar", _olua_fun_cocos2d_ParticleSystem_getRotatePerSecondVar);
    oluacls_func(L, "getRotationIsDir", _olua_fun_cocos2d_ParticleSystem_getRotationIsDir);
    oluacls_func(L, "getSourcePosition", _olua_fun_cocos2d_ParticleSystem_getSourcePosition);
    oluacls_func(L, "getSpeed", _olua_fun_cocos2d_ParticleSystem_getSpeed);
    oluacls_func(L, "getSpeedVar", _olua_fun_cocos2d_ParticleSystem_getSpeedVar);
    oluacls_func(L, "getStartColor", _olua_fun_cocos2d_ParticleSystem_getStartColor);
    oluacls_func(L, "getStartColorVar", _olua_fun_cocos2d_ParticleSystem_getStartColorVar);
    oluacls_func(L, "getStartRadius", _olua_fun_cocos2d_ParticleSystem_getStartRadius);
    oluacls_func(L, "getStartRadiusVar", _olua_fun_cocos2d_ParticleSystem_getStartRadiusVar);
    oluacls_func(L, "getStartSize", _olua_fun_cocos2d_ParticleSystem_getStartSize);
    oluacls_func(L, "getStartSizeVar", _olua_fun_cocos2d_ParticleSystem_getStartSizeVar);
    oluacls_func(L, "getStartSpin", _olua_fun_cocos2d_ParticleSystem_getStartSpin);
    oluacls_func(L, "getStartSpinVar", _olua_fun_cocos2d_ParticleSystem_getStartSpinVar);
    oluacls_func(L, "getTangentialAccel", _olua_fun_cocos2d_ParticleSystem_getTangentialAccel);
    oluacls_func(L, "getTangentialAccelVar", _olua_fun_cocos2d_ParticleSystem_getTangentialAccelVar);
    oluacls_func(L, "getTexture", _olua_fun_cocos2d_ParticleSystem_getTexture);
    oluacls_func(L, "getTotalParticles", _olua_fun_cocos2d_ParticleSystem_getTotalParticles);
    oluacls_func(L, "initWithDictionary", _olua_fun_cocos2d_ParticleSystem_initWithDictionary);
    oluacls_func(L, "initWithFile", _olua_fun_cocos2d_ParticleSystem_initWithFile);
    oluacls_func(L, "initWithTotalParticles", _olua_fun_cocos2d_ParticleSystem_initWithTotalParticles);
    oluacls_func(L, "isActive", _olua_fun_cocos2d_ParticleSystem_isActive);
    oluacls_func(L, "isAutoRemoveOnFinish", _olua_fun_cocos2d_ParticleSystem_isAutoRemoveOnFinish);
    oluacls_func(L, "isBlendAdditive", _olua_fun_cocos2d_ParticleSystem_isBlendAdditive);
    oluacls_func(L, "isFull", _olua_fun_cocos2d_ParticleSystem_isFull);
    oluacls_func(L, "isPaused", _olua_fun_cocos2d_ParticleSystem_isPaused);
    oluacls_func(L, "isSourcePositionCompatible", _olua_fun_cocos2d_ParticleSystem_isSourcePositionCompatible);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleSystem_new);
    oluacls_func(L, "pauseEmissions", _olua_fun_cocos2d_ParticleSystem_pauseEmissions);
    oluacls_func(L, "postStep", _olua_fun_cocos2d_ParticleSystem_postStep);
    oluacls_func(L, "resetSystem", _olua_fun_cocos2d_ParticleSystem_resetSystem);
    oluacls_func(L, "resumeEmissions", _olua_fun_cocos2d_ParticleSystem_resumeEmissions);
    oluacls_func(L, "setAngle", _olua_fun_cocos2d_ParticleSystem_setAngle);
    oluacls_func(L, "setAngleVar", _olua_fun_cocos2d_ParticleSystem_setAngleVar);
    oluacls_func(L, "setAtlasIndex", _olua_fun_cocos2d_ParticleSystem_setAtlasIndex);
    oluacls_func(L, "setAutoRemoveOnFinish", _olua_fun_cocos2d_ParticleSystem_setAutoRemoveOnFinish);
    oluacls_func(L, "setBatchNode", _olua_fun_cocos2d_ParticleSystem_setBatchNode);
    oluacls_func(L, "setBlendAdditive", _olua_fun_cocos2d_ParticleSystem_setBlendAdditive);
    oluacls_func(L, "setBlendFunc", _olua_fun_cocos2d_ParticleSystem_setBlendFunc);
    oluacls_func(L, "setDuration", _olua_fun_cocos2d_ParticleSystem_setDuration);
    oluacls_func(L, "setEmissionRate", _olua_fun_cocos2d_ParticleSystem_setEmissionRate);
    oluacls_func(L, "setEmitterMode", _olua_fun_cocos2d_ParticleSystem_setEmitterMode);
    oluacls_func(L, "setEndColor", _olua_fun_cocos2d_ParticleSystem_setEndColor);
    oluacls_func(L, "setEndColorVar", _olua_fun_cocos2d_ParticleSystem_setEndColorVar);
    oluacls_func(L, "setEndRadius", _olua_fun_cocos2d_ParticleSystem_setEndRadius);
    oluacls_func(L, "setEndRadiusVar", _olua_fun_cocos2d_ParticleSystem_setEndRadiusVar);
    oluacls_func(L, "setEndSize", _olua_fun_cocos2d_ParticleSystem_setEndSize);
    oluacls_func(L, "setEndSizeVar", _olua_fun_cocos2d_ParticleSystem_setEndSizeVar);
    oluacls_func(L, "setEndSpin", _olua_fun_cocos2d_ParticleSystem_setEndSpin);
    oluacls_func(L, "setEndSpinVar", _olua_fun_cocos2d_ParticleSystem_setEndSpinVar);
    oluacls_func(L, "setGravity", _olua_fun_cocos2d_ParticleSystem_setGravity);
    oluacls_func(L, "setLife", _olua_fun_cocos2d_ParticleSystem_setLife);
    oluacls_func(L, "setLifeVar", _olua_fun_cocos2d_ParticleSystem_setLifeVar);
    oluacls_func(L, "setPosVar", _olua_fun_cocos2d_ParticleSystem_setPosVar);
    oluacls_func(L, "setPositionType", _olua_fun_cocos2d_ParticleSystem_setPositionType);
    oluacls_func(L, "setRadialAccel", _olua_fun_cocos2d_ParticleSystem_setRadialAccel);
    oluacls_func(L, "setRadialAccelVar", _olua_fun_cocos2d_ParticleSystem_setRadialAccelVar);
    oluacls_func(L, "setRotatePerSecond", _olua_fun_cocos2d_ParticleSystem_setRotatePerSecond);
    oluacls_func(L, "setRotatePerSecondVar", _olua_fun_cocos2d_ParticleSystem_setRotatePerSecondVar);
    oluacls_func(L, "setRotationIsDir", _olua_fun_cocos2d_ParticleSystem_setRotationIsDir);
    oluacls_func(L, "setSourcePosition", _olua_fun_cocos2d_ParticleSystem_setSourcePosition);
    oluacls_func(L, "setSourcePositionCompatible", _olua_fun_cocos2d_ParticleSystem_setSourcePositionCompatible);
    oluacls_func(L, "setSpeed", _olua_fun_cocos2d_ParticleSystem_setSpeed);
    oluacls_func(L, "setSpeedVar", _olua_fun_cocos2d_ParticleSystem_setSpeedVar);
    oluacls_func(L, "setStartColor", _olua_fun_cocos2d_ParticleSystem_setStartColor);
    oluacls_func(L, "setStartColorVar", _olua_fun_cocos2d_ParticleSystem_setStartColorVar);
    oluacls_func(L, "setStartRadius", _olua_fun_cocos2d_ParticleSystem_setStartRadius);
    oluacls_func(L, "setStartRadiusVar", _olua_fun_cocos2d_ParticleSystem_setStartRadiusVar);
    oluacls_func(L, "setStartSize", _olua_fun_cocos2d_ParticleSystem_setStartSize);
    oluacls_func(L, "setStartSizeVar", _olua_fun_cocos2d_ParticleSystem_setStartSizeVar);
    oluacls_func(L, "setStartSpin", _olua_fun_cocos2d_ParticleSystem_setStartSpin);
    oluacls_func(L, "setStartSpinVar", _olua_fun_cocos2d_ParticleSystem_setStartSpinVar);
    oluacls_func(L, "setTangentialAccel", _olua_fun_cocos2d_ParticleSystem_setTangentialAccel);
    oluacls_func(L, "setTangentialAccelVar", _olua_fun_cocos2d_ParticleSystem_setTangentialAccelVar);
    oluacls_func(L, "setTexture", _olua_fun_cocos2d_ParticleSystem_setTexture);
    oluacls_func(L, "setTotalParticles", _olua_fun_cocos2d_ParticleSystem_setTotalParticles);
    oluacls_func(L, "start", _olua_fun_cocos2d_ParticleSystem_start);
    oluacls_func(L, "stop", _olua_fun_cocos2d_ParticleSystem_stop);
    oluacls_func(L, "stopSystem", _olua_fun_cocos2d_ParticleSystem_stopSystem);
    oluacls_func(L, "updateParticleQuads", _olua_fun_cocos2d_ParticleSystem_updateParticleQuads);
    oluacls_func(L, "updateWithNoTime", _olua_fun_cocos2d_ParticleSystem_updateWithNoTime);
    oluacls_prop(L, "active", _olua_fun_cocos2d_ParticleSystem_isActive, nullptr);
    oluacls_prop(L, "allParticleSystems", _olua_fun_cocos2d_ParticleSystem_getAllParticleSystems, nullptr);
    oluacls_prop(L, "angle", _olua_fun_cocos2d_ParticleSystem_getAngle, _olua_fun_cocos2d_ParticleSystem_setAngle);
    oluacls_prop(L, "angleVar", _olua_fun_cocos2d_ParticleSystem_getAngleVar, _olua_fun_cocos2d_ParticleSystem_setAngleVar);
    oluacls_prop(L, "atlasIndex", _olua_fun_cocos2d_ParticleSystem_getAtlasIndex, _olua_fun_cocos2d_ParticleSystem_setAtlasIndex);
    oluacls_prop(L, "autoRemoveOnFinish", _olua_fun_cocos2d_ParticleSystem_isAutoRemoveOnFinish, _olua_fun_cocos2d_ParticleSystem_setAutoRemoveOnFinish);
    oluacls_prop(L, "batchNode", _olua_fun_cocos2d_ParticleSystem_getBatchNode, _olua_fun_cocos2d_ParticleSystem_setBatchNode);
    oluacls_prop(L, "blendAdditive", _olua_fun_cocos2d_ParticleSystem_isBlendAdditive, _olua_fun_cocos2d_ParticleSystem_setBlendAdditive);
    oluacls_prop(L, "blendFunc", _olua_fun_cocos2d_ParticleSystem_getBlendFunc, _olua_fun_cocos2d_ParticleSystem_setBlendFunc);
    oluacls_prop(L, "duration", _olua_fun_cocos2d_ParticleSystem_getDuration, _olua_fun_cocos2d_ParticleSystem_setDuration);
    oluacls_prop(L, "emissionRate", _olua_fun_cocos2d_ParticleSystem_getEmissionRate, _olua_fun_cocos2d_ParticleSystem_setEmissionRate);
    oluacls_prop(L, "emitterMode", _olua_fun_cocos2d_ParticleSystem_getEmitterMode, _olua_fun_cocos2d_ParticleSystem_setEmitterMode);
    oluacls_prop(L, "endColor", _olua_fun_cocos2d_ParticleSystem_getEndColor, _olua_fun_cocos2d_ParticleSystem_setEndColor);
    oluacls_prop(L, "endColorVar", _olua_fun_cocos2d_ParticleSystem_getEndColorVar, _olua_fun_cocos2d_ParticleSystem_setEndColorVar);
    oluacls_prop(L, "endRadius", _olua_fun_cocos2d_ParticleSystem_getEndRadius, _olua_fun_cocos2d_ParticleSystem_setEndRadius);
    oluacls_prop(L, "endRadiusVar", _olua_fun_cocos2d_ParticleSystem_getEndRadiusVar, _olua_fun_cocos2d_ParticleSystem_setEndRadiusVar);
    oluacls_prop(L, "endSize", _olua_fun_cocos2d_ParticleSystem_getEndSize, _olua_fun_cocos2d_ParticleSystem_setEndSize);
    oluacls_prop(L, "endSizeVar", _olua_fun_cocos2d_ParticleSystem_getEndSizeVar, _olua_fun_cocos2d_ParticleSystem_setEndSizeVar);
    oluacls_prop(L, "endSpin", _olua_fun_cocos2d_ParticleSystem_getEndSpin, _olua_fun_cocos2d_ParticleSystem_setEndSpin);
    oluacls_prop(L, "endSpinVar", _olua_fun_cocos2d_ParticleSystem_getEndSpinVar, _olua_fun_cocos2d_ParticleSystem_setEndSpinVar);
    oluacls_prop(L, "full", _olua_fun_cocos2d_ParticleSystem_isFull, nullptr);
    oluacls_prop(L, "gravity", _olua_fun_cocos2d_ParticleSystem_getGravity, _olua_fun_cocos2d_ParticleSystem_setGravity);
    oluacls_prop(L, "life", _olua_fun_cocos2d_ParticleSystem_getLife, _olua_fun_cocos2d_ParticleSystem_setLife);
    oluacls_prop(L, "lifeVar", _olua_fun_cocos2d_ParticleSystem_getLifeVar, _olua_fun_cocos2d_ParticleSystem_setLifeVar);
    oluacls_prop(L, "particleCount", _olua_fun_cocos2d_ParticleSystem_getParticleCount, nullptr);
    oluacls_prop(L, "paused", _olua_fun_cocos2d_ParticleSystem_isPaused, nullptr);
    oluacls_prop(L, "posVar", _olua_fun_cocos2d_ParticleSystem_getPosVar, _olua_fun_cocos2d_ParticleSystem_setPosVar);
    oluacls_prop(L, "positionType", _olua_fun_cocos2d_ParticleSystem_getPositionType, _olua_fun_cocos2d_ParticleSystem_setPositionType);
    oluacls_prop(L, "radialAccel", _olua_fun_cocos2d_ParticleSystem_getRadialAccel, _olua_fun_cocos2d_ParticleSystem_setRadialAccel);
    oluacls_prop(L, "radialAccelVar", _olua_fun_cocos2d_ParticleSystem_getRadialAccelVar, _olua_fun_cocos2d_ParticleSystem_setRadialAccelVar);
    oluacls_prop(L, "resourceFile", _olua_fun_cocos2d_ParticleSystem_getResourceFile, nullptr);
    oluacls_prop(L, "rotatePerSecond", _olua_fun_cocos2d_ParticleSystem_getRotatePerSecond, _olua_fun_cocos2d_ParticleSystem_setRotatePerSecond);
    oluacls_prop(L, "rotatePerSecondVar", _olua_fun_cocos2d_ParticleSystem_getRotatePerSecondVar, _olua_fun_cocos2d_ParticleSystem_setRotatePerSecondVar);
    oluacls_prop(L, "rotationIsDir", _olua_fun_cocos2d_ParticleSystem_getRotationIsDir, _olua_fun_cocos2d_ParticleSystem_setRotationIsDir);
    oluacls_prop(L, "sourcePosition", _olua_fun_cocos2d_ParticleSystem_getSourcePosition, _olua_fun_cocos2d_ParticleSystem_setSourcePosition);
    oluacls_prop(L, "sourcePositionCompatible", _olua_fun_cocos2d_ParticleSystem_isSourcePositionCompatible, _olua_fun_cocos2d_ParticleSystem_setSourcePositionCompatible);
    oluacls_prop(L, "speed", _olua_fun_cocos2d_ParticleSystem_getSpeed, _olua_fun_cocos2d_ParticleSystem_setSpeed);
    oluacls_prop(L, "speedVar", _olua_fun_cocos2d_ParticleSystem_getSpeedVar, _olua_fun_cocos2d_ParticleSystem_setSpeedVar);
    oluacls_prop(L, "startColor", _olua_fun_cocos2d_ParticleSystem_getStartColor, _olua_fun_cocos2d_ParticleSystem_setStartColor);
    oluacls_prop(L, "startColorVar", _olua_fun_cocos2d_ParticleSystem_getStartColorVar, _olua_fun_cocos2d_ParticleSystem_setStartColorVar);
    oluacls_prop(L, "startRadius", _olua_fun_cocos2d_ParticleSystem_getStartRadius, _olua_fun_cocos2d_ParticleSystem_setStartRadius);
    oluacls_prop(L, "startRadiusVar", _olua_fun_cocos2d_ParticleSystem_getStartRadiusVar, _olua_fun_cocos2d_ParticleSystem_setStartRadiusVar);
    oluacls_prop(L, "startSize", _olua_fun_cocos2d_ParticleSystem_getStartSize, _olua_fun_cocos2d_ParticleSystem_setStartSize);
    oluacls_prop(L, "startSizeVar", _olua_fun_cocos2d_ParticleSystem_getStartSizeVar, _olua_fun_cocos2d_ParticleSystem_setStartSizeVar);
    oluacls_prop(L, "startSpin", _olua_fun_cocos2d_ParticleSystem_getStartSpin, _olua_fun_cocos2d_ParticleSystem_setStartSpin);
    oluacls_prop(L, "startSpinVar", _olua_fun_cocos2d_ParticleSystem_getStartSpinVar, _olua_fun_cocos2d_ParticleSystem_setStartSpinVar);
    oluacls_prop(L, "tangentialAccel", _olua_fun_cocos2d_ParticleSystem_getTangentialAccel, _olua_fun_cocos2d_ParticleSystem_setTangentialAccel);
    oluacls_prop(L, "tangentialAccelVar", _olua_fun_cocos2d_ParticleSystem_getTangentialAccelVar, _olua_fun_cocos2d_ParticleSystem_setTangentialAccelVar);
    oluacls_prop(L, "texture", _olua_fun_cocos2d_ParticleSystem_getTexture, _olua_fun_cocos2d_ParticleSystem_setTexture);
    oluacls_prop(L, "totalParticles", _olua_fun_cocos2d_ParticleSystem_getTotalParticles, _olua_fun_cocos2d_ParticleSystem_setTotalParticles);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleSystem(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleSystem")) {
        luaL_error(L, "class not found: cocos2d::ParticleSystem");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleSystemQuad_create$1(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleSystemQuad *create()
    cocos2d::ParticleSystemQuad *ret = cocos2d::ParticleSystemQuad::create();
    int num_ret = olua_push_object(L, ret, "cc.ParticleSystemQuad");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystemQuad_create$2(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** filename */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::ParticleSystemQuad *create(const std::string &filename)
    cocos2d::ParticleSystemQuad *ret = cocos2d::ParticleSystemQuad::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleSystemQuad");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystemQuad_create$3(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ValueMap *arg1 = nullptr;       /** dictionary */

    olua_check_pointer(L, 1, &arg1, "cc.types.ValueMap");

    // static cocos2d::ParticleSystemQuad *create(cocos2d::ValueMap &dictionary)
    cocos2d::ParticleSystemQuad *ret = cocos2d::ParticleSystemQuad::create(*arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleSystemQuad");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystemQuad_create(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 0) {
        // static cocos2d::ParticleSystemQuad *create()
        return _olua_fun_cocos2d_ParticleSystemQuad_create$1(L);
    }

    if (num_args == 1) {
        if ((olua_is_string(L, 1))) {
            // static cocos2d::ParticleSystemQuad *create(const std::string &filename)
            return _olua_fun_cocos2d_ParticleSystemQuad_create$2(L);
        }

        // if ((olua_is_pointer(L, 1, "cc.types.ValueMap"))) {
            // static cocos2d::ParticleSystemQuad *create(cocos2d::ValueMap &dictionary)
            return _olua_fun_cocos2d_ParticleSystemQuad_create$3(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::ParticleSystemQuad::create' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystemQuad_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleSystemQuad *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleSystemQuad *ret = cocos2d::ParticleSystemQuad::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleSystemQuad");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystemQuad_listenRendererRecreated(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystemQuad *self = nullptr;
    cocos2d::EventCustom *arg1 = nullptr;       /** event */

    olua_to_object(L, 1, &self, "cc.ParticleSystemQuad");
    olua_check_object(L, 2, &arg1, "cc.EventCustom");

    // void listenRendererRecreated(cocos2d::EventCustom *event)
    self->listenRendererRecreated(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystemQuad_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleSystemQuad()
    cocos2d::ParticleSystemQuad *ret = new cocos2d::ParticleSystemQuad();
    int num_ret = olua_push_object(L, ret, "cc.ParticleSystemQuad");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSystemQuad_setDisplayFrame(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystemQuad *self = nullptr;
    cocos2d::SpriteFrame *arg1 = nullptr;       /** spriteFrame */

    olua_to_object(L, 1, &self, "cc.ParticleSystemQuad");
    olua_check_object(L, 2, &arg1, "cc.SpriteFrame");

    // void setDisplayFrame(cocos2d::SpriteFrame *spriteFrame)
    self->setDisplayFrame(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_ParticleSystemQuad_setTextureWithRect(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::ParticleSystemQuad *self = nullptr;
    cocos2d::Texture2D *arg1 = nullptr;       /** texture */
    cocos2d::Rect *arg2;       /** rect */

    olua_to_object(L, 1, &self, "cc.ParticleSystemQuad");
    olua_check_object(L, 2, &arg1, "cc.Texture2D");
    olua_check_object(L, 3, &arg2, "cc.Rect");

    // void setTextureWithRect(cocos2d::Texture2D *texture, const cocos2d::Rect &rect)
    self->setTextureWithRect(arg1, *arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_ParticleSystemQuad(lua_State *L)
{
    oluacls_class<cocos2d::ParticleSystemQuad, cocos2d::ParticleSystem>(L, "cc.ParticleSystemQuad");
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleSystemQuad_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleSystemQuad_createWithTotalParticles);
    oluacls_func(L, "listenRendererRecreated", _olua_fun_cocos2d_ParticleSystemQuad_listenRendererRecreated);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleSystemQuad_new);
    oluacls_func(L, "setDisplayFrame", _olua_fun_cocos2d_ParticleSystemQuad_setDisplayFrame);
    oluacls_func(L, "setTextureWithRect", _olua_fun_cocos2d_ParticleSystemQuad_setTextureWithRect);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleSystemQuad(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleSystemQuad")) {
        luaL_error(L, "class not found: cocos2d::ParticleSystemQuad");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleExplosion_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleExplosion *create()
    cocos2d::ParticleExplosion *ret = cocos2d::ParticleExplosion::create();
    int num_ret = olua_push_object(L, ret, "cc.ParticleExplosion");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleExplosion_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleExplosion *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleExplosion *ret = cocos2d::ParticleExplosion::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleExplosion");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleExplosion_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleExplosion()
    cocos2d::ParticleExplosion *ret = new cocos2d::ParticleExplosion();
    int num_ret = olua_push_object(L, ret, "cc.ParticleExplosion");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_ParticleExplosion(lua_State *L)
{
    oluacls_class<cocos2d::ParticleExplosion, cocos2d::ParticleSystemQuad>(L, "cc.ParticleExplosion");
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleExplosion_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleExplosion_createWithTotalParticles);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleExplosion_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleExplosion(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleExplosion")) {
        luaL_error(L, "class not found: cocos2d::ParticleExplosion");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleFire_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleFire *create()
    cocos2d::ParticleFire *ret = cocos2d::ParticleFire::create();
    int num_ret = olua_push_object(L, ret, "cc.ParticleFire");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleFire_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleFire *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleFire *ret = cocos2d::ParticleFire::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleFire");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleFire_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleFire()
    cocos2d::ParticleFire *ret = new cocos2d::ParticleFire();
    int num_ret = olua_push_object(L, ret, "cc.ParticleFire");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_ParticleFire(lua_State *L)
{
    oluacls_class<cocos2d::ParticleFire, cocos2d::ParticleSystemQuad>(L, "cc.ParticleFire");
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleFire_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleFire_createWithTotalParticles);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleFire_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleFire(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleFire")) {
        luaL_error(L, "class not found: cocos2d::ParticleFire");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleFireworks_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleFireworks *create()
    cocos2d::ParticleFireworks *ret = cocos2d::ParticleFireworks::create();
    int num_ret = olua_push_object(L, ret, "cc.ParticleFireworks");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleFireworks_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleFireworks *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleFireworks *ret = cocos2d::ParticleFireworks::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleFireworks");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleFireworks_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleFireworks()
    cocos2d::ParticleFireworks *ret = new cocos2d::ParticleFireworks();
    int num_ret = olua_push_object(L, ret, "cc.ParticleFireworks");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_ParticleFireworks(lua_State *L)
{
    oluacls_class<cocos2d::ParticleFireworks, cocos2d::ParticleSystemQuad>(L, "cc.ParticleFireworks");
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleFireworks_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleFireworks_createWithTotalParticles);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleFireworks_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleFireworks(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleFireworks")) {
        luaL_error(L, "class not found: cocos2d::ParticleFireworks");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleFlower_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleFlower *create()
    cocos2d::ParticleFlower *ret = cocos2d::ParticleFlower::create();
    int num_ret = olua_push_object(L, ret, "cc.ParticleFlower");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleFlower_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleFlower *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleFlower *ret = cocos2d::ParticleFlower::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleFlower");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleFlower_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleFlower()
    cocos2d::ParticleFlower *ret = new cocos2d::ParticleFlower();
    int num_ret = olua_push_object(L, ret, "cc.ParticleFlower");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_ParticleFlower(lua_State *L)
{
    oluacls_class<cocos2d::ParticleFlower, cocos2d::ParticleSystemQuad>(L, "cc.ParticleFlower");
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleFlower_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleFlower_createWithTotalParticles);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleFlower_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleFlower(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleFlower")) {
        luaL_error(L, "class not found: cocos2d::ParticleFlower");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleGalaxy_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleGalaxy *create()
    cocos2d::ParticleGalaxy *ret = cocos2d::ParticleGalaxy::create();
    int num_ret = olua_push_object(L, ret, "cc.ParticleGalaxy");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleGalaxy_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleGalaxy *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleGalaxy *ret = cocos2d::ParticleGalaxy::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleGalaxy");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleGalaxy_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleGalaxy()
    cocos2d::ParticleGalaxy *ret = new cocos2d::ParticleGalaxy();
    int num_ret = olua_push_object(L, ret, "cc.ParticleGalaxy");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_ParticleGalaxy(lua_State *L)
{
    oluacls_class<cocos2d::ParticleGalaxy, cocos2d::ParticleSystemQuad>(L, "cc.ParticleGalaxy");
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleGalaxy_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleGalaxy_createWithTotalParticles);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleGalaxy_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleGalaxy(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleGalaxy")) {
        luaL_error(L, "class not found: cocos2d::ParticleGalaxy");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleMeteor_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleMeteor *create()
    cocos2d::ParticleMeteor *ret = cocos2d::ParticleMeteor::create();
    int num_ret = olua_push_object(L, ret, "cc.ParticleMeteor");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleMeteor_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleMeteor *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleMeteor *ret = cocos2d::ParticleMeteor::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleMeteor");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleMeteor_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleMeteor()
    cocos2d::ParticleMeteor *ret = new cocos2d::ParticleMeteor();
    int num_ret = olua_push_object(L, ret, "cc.ParticleMeteor");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_ParticleMeteor(lua_State *L)
{
    oluacls_class<cocos2d::ParticleMeteor, cocos2d::ParticleSystemQuad>(L, "cc.ParticleMeteor");
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleMeteor_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleMeteor_createWithTotalParticles);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleMeteor_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleMeteor(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleMeteor")) {
        luaL_error(L, "class not found: cocos2d::ParticleMeteor");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleRain_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleRain *create()
    cocos2d::ParticleRain *ret = cocos2d::ParticleRain::create();
    int num_ret = olua_push_object(L, ret, "cc.ParticleRain");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleRain_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleRain *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleRain *ret = cocos2d::ParticleRain::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleRain");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleRain_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleRain()
    cocos2d::ParticleRain *ret = new cocos2d::ParticleRain();
    int num_ret = olua_push_object(L, ret, "cc.ParticleRain");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_ParticleRain(lua_State *L)
{
    oluacls_class<cocos2d::ParticleRain, cocos2d::ParticleSystemQuad>(L, "cc.ParticleRain");
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleRain_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleRain_createWithTotalParticles);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleRain_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleRain(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleRain")) {
        luaL_error(L, "class not found: cocos2d::ParticleRain");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleSmoke_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleSmoke *create()
    cocos2d::ParticleSmoke *ret = cocos2d::ParticleSmoke::create();
    int num_ret = olua_push_object(L, ret, "cc.ParticleSmoke");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSmoke_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleSmoke *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleSmoke *ret = cocos2d::ParticleSmoke::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleSmoke");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSmoke_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleSmoke()
    cocos2d::ParticleSmoke *ret = new cocos2d::ParticleSmoke();
    int num_ret = olua_push_object(L, ret, "cc.ParticleSmoke");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_ParticleSmoke(lua_State *L)
{
    oluacls_class<cocos2d::ParticleSmoke, cocos2d::ParticleSystemQuad>(L, "cc.ParticleSmoke");
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleSmoke_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleSmoke_createWithTotalParticles);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleSmoke_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleSmoke(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleSmoke")) {
        luaL_error(L, "class not found: cocos2d::ParticleSmoke");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleSnow_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleSnow *create()
    cocos2d::ParticleSnow *ret = cocos2d::ParticleSnow::create();
    int num_ret = olua_push_object(L, ret, "cc.ParticleSnow");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSnow_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleSnow *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleSnow *ret = cocos2d::ParticleSnow::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleSnow");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSnow_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleSnow()
    cocos2d::ParticleSnow *ret = new cocos2d::ParticleSnow();
    int num_ret = olua_push_object(L, ret, "cc.ParticleSnow");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_ParticleSnow(lua_State *L)
{
    oluacls_class<cocos2d::ParticleSnow, cocos2d::ParticleSystemQuad>(L, "cc.ParticleSnow");
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleSnow_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleSnow_createWithTotalParticles);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleSnow_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleSnow(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleSnow")) {
        luaL_error(L, "class not found: cocos2d::ParticleSnow");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleSpiral_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleSpiral *create()
    cocos2d::ParticleSpiral *ret = cocos2d::ParticleSpiral::create();
    int num_ret = olua_push_object(L, ret, "cc.ParticleSpiral");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSpiral_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleSpiral *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleSpiral *ret = cocos2d::ParticleSpiral::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleSpiral");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSpiral_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleSpiral()
    cocos2d::ParticleSpiral *ret = new cocos2d::ParticleSpiral();
    int num_ret = olua_push_object(L, ret, "cc.ParticleSpiral");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_ParticleSpiral(lua_State *L)
{
    oluacls_class<cocos2d::ParticleSpiral, cocos2d::ParticleSystemQuad>(L, "cc.ParticleSpiral");
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleSpiral_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleSpiral_createWithTotalParticles);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleSpiral_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleSpiral(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleSpiral")) {
        luaL_error(L, "class not found: cocos2d::ParticleSpiral");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_ParticleSun_create(lua_State *L)
{
    olua_startinvoke(L);

    // static cocos2d::ParticleSun *create()
    cocos2d::ParticleSun *ret = cocos2d::ParticleSun::create();
    int num_ret = olua_push_object(L, ret, "cc.ParticleSun");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSun_createWithTotalParticles(lua_State *L)
{
    olua_startinvoke(L);

    int arg1 = 0;       /** numberOfParticles */

    olua_check_integer(L, 1, &arg1);

    // static cocos2d::ParticleSun *createWithTotalParticles(int numberOfParticles)
    cocos2d::ParticleSun *ret = cocos2d::ParticleSun::createWithTotalParticles(arg1);
    int num_ret = olua_push_object(L, ret, "cc.ParticleSun");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_ParticleSun_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::ParticleSun()
    cocos2d::ParticleSun *ret = new cocos2d::ParticleSun();
    int num_ret = olua_push_object(L, ret, "cc.ParticleSun");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_ParticleSun(lua_State *L)
{
    oluacls_class<cocos2d::ParticleSun, cocos2d::ParticleSystemQuad>(L, "cc.ParticleSun");
    oluacls_func(L, "create", _olua_fun_cocos2d_ParticleSun_create);
    oluacls_func(L, "createWithTotalParticles", _olua_fun_cocos2d_ParticleSun_createWithTotalParticles);
    oluacls_func(L, "new", _olua_fun_cocos2d_ParticleSun_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_ParticleSun(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.ParticleSun")) {
        luaL_error(L, "class not found: cocos2d::ParticleSun");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_SAXDelegator___gc(lua_State *L)
{
    olua_startinvoke(L);

    auto self = (cocos2d::SAXDelegator *)olua_toobj(L, 1, "cc.SAXDelegator");
    olua_postgc(L, self);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SAXDelegator_endElement(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SAXDelegator *self = nullptr;
    void *arg1 = nullptr;       /** ctx */
    const char *arg2 = nullptr;       /** name */

    olua_to_object(L, 1, &self, "cc.SAXDelegator");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_string(L, 3, &arg2);

    // void endElement(void *ctx, const char *name)
    self->endElement(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_SAXDelegator_textHandler(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::SAXDelegator *self = nullptr;
    void *arg1 = nullptr;       /** ctx */
    const char *arg2 = nullptr;       /** s */
    size_t arg3 = 0;       /** len */

    olua_to_object(L, 1, &self, "cc.SAXDelegator");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_string(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // void textHandler(void *ctx, const char *s, size_t len)
    self->textHandler(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_SAXDelegator(lua_State *L)
{
    oluacls_class<cocos2d::SAXDelegator>(L, "cc.SAXDelegator");
    oluacls_func(L, "__gc", _olua_fun_cocos2d_SAXDelegator___gc);
    oluacls_func(L, "endElement", _olua_fun_cocos2d_SAXDelegator_endElement);
    oluacls_func(L, "textHandler", _olua_fun_cocos2d_SAXDelegator_textHandler);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_SAXDelegator(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.SAXDelegator")) {
        luaL_error(L, "class not found: cocos2d::SAXDelegator");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_cls_cc_TMXTileFlags(lua_State *L)
{
    oluacls_class<cocos2d::TMXTileFlags>(L, "cc.TMXTileFlags");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "kTMXFlipedAll", (lua_Integer)cocos2d::TMXTileFlags::kTMXFlipedAll);
    oluacls_enum(L, "kTMXFlippedMask", (lua_Integer)cocos2d::TMXTileFlags::kTMXFlippedMask);
    oluacls_enum(L, "kTMXTileDiagonalFlag", (lua_Integer)cocos2d::TMXTileFlags::kTMXTileDiagonalFlag);
    oluacls_enum(L, "kTMXTileHorizontalFlag", (lua_Integer)cocos2d::TMXTileFlags::kTMXTileHorizontalFlag);
    oluacls_enum(L, "kTMXTileVerticalFlag", (lua_Integer)cocos2d::TMXTileFlags::kTMXTileVerticalFlag);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TMXTileFlags(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TMXTileFlags")) {
        luaL_error(L, "class not found: cocos2d::TMXTileFlags");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TMXObjectGroup_getGroupName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXObjectGroup *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXObjectGroup");

    // const std::string &getGroupName()
    const std::string &ret = self->getGroupName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXObjectGroup_getObject(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXObjectGroup *self = nullptr;
    std::string arg1;       /** objectName */

    olua_to_object(L, 1, &self, "cc.TMXObjectGroup");
    olua_check_string(L, 2, &arg1);

    // cocos2d::ValueMap getObject(const std::string &objectName)
    cocos2d::ValueMap ret = self->getObject(arg1);
    int num_ret = olua_push_cocos2d_ValueMap(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXObjectGroup_getObjects(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXObjectGroup *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXObjectGroup");

    // const cocos2d::ValueVector &getObjects()
    const cocos2d::ValueVector &ret = self->getObjects();
    int num_ret = olua_push_cocos2d_ValueVector(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXObjectGroup_getPositionOffset(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXObjectGroup *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXObjectGroup");

    // const cocos2d::Vec2 &getPositionOffset()
    const cocos2d::Vec2 &ret = self->getPositionOffset();
    int num_ret = olua_push_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXObjectGroup_getProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXObjectGroup *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXObjectGroup");

    // const cocos2d::ValueMap &getProperties()
    const cocos2d::ValueMap &ret = self->getProperties();
    int num_ret = olua_push_cocos2d_ValueMap(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXObjectGroup_getProperty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXObjectGroup *self = nullptr;
    std::string arg1;       /** propertyName */

    olua_to_object(L, 1, &self, "cc.TMXObjectGroup");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Value getProperty(const std::string &propertyName)
    cocos2d::Value ret = self->getProperty(arg1);
    int num_ret = olua_push_cocos2d_Value(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXObjectGroup_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TMXObjectGroup()
    cocos2d::TMXObjectGroup *ret = new cocos2d::TMXObjectGroup();
    int num_ret = olua_push_object(L, ret, "cc.TMXObjectGroup");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXObjectGroup_setGroupName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXObjectGroup *self = nullptr;
    std::string arg1;       /** groupName */

    olua_to_object(L, 1, &self, "cc.TMXObjectGroup");
    olua_check_string(L, 2, &arg1);

    // void setGroupName(const std::string &groupName)
    self->setGroupName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXObjectGroup_setObjects(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXObjectGroup *self = nullptr;
    cocos2d::ValueVector arg1;       /** objects */

    olua_to_object(L, 1, &self, "cc.TMXObjectGroup");
    olua_check_cocos2d_ValueVector(L, 2, &arg1);

    // void setObjects(const cocos2d::ValueVector &objects)
    self->setObjects(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXObjectGroup_setPositionOffset(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXObjectGroup *self = nullptr;
    cocos2d::Vec2 *arg1;       /** offset */

    olua_to_object(L, 1, &self, "cc.TMXObjectGroup");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void setPositionOffset(const cocos2d::Vec2 &offset)
    self->setPositionOffset(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXObjectGroup_setProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXObjectGroup *self = nullptr;
    cocos2d::ValueMap arg1;       /** properties */

    olua_to_object(L, 1, &self, "cc.TMXObjectGroup");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setProperties(const cocos2d::ValueMap &properties)
    self->setProperties(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_TMXObjectGroup(lua_State *L)
{
    oluacls_class<cocos2d::TMXObjectGroup, cocos2d::Ref>(L, "cc.TMXObjectGroup");
    oluacls_func(L, "getGroupName", _olua_fun_cocos2d_TMXObjectGroup_getGroupName);
    oluacls_func(L, "getObject", _olua_fun_cocos2d_TMXObjectGroup_getObject);
    oluacls_func(L, "getObjects", _olua_fun_cocos2d_TMXObjectGroup_getObjects);
    oluacls_func(L, "getPositionOffset", _olua_fun_cocos2d_TMXObjectGroup_getPositionOffset);
    oluacls_func(L, "getProperties", _olua_fun_cocos2d_TMXObjectGroup_getProperties);
    oluacls_func(L, "getProperty", _olua_fun_cocos2d_TMXObjectGroup_getProperty);
    oluacls_func(L, "new", _olua_fun_cocos2d_TMXObjectGroup_new);
    oluacls_func(L, "setGroupName", _olua_fun_cocos2d_TMXObjectGroup_setGroupName);
    oluacls_func(L, "setObjects", _olua_fun_cocos2d_TMXObjectGroup_setObjects);
    oluacls_func(L, "setPositionOffset", _olua_fun_cocos2d_TMXObjectGroup_setPositionOffset);
    oluacls_func(L, "setProperties", _olua_fun_cocos2d_TMXObjectGroup_setProperties);
    oluacls_prop(L, "groupName", _olua_fun_cocos2d_TMXObjectGroup_getGroupName, _olua_fun_cocos2d_TMXObjectGroup_setGroupName);
    oluacls_prop(L, "objects", _olua_fun_cocos2d_TMXObjectGroup_getObjects, _olua_fun_cocos2d_TMXObjectGroup_setObjects);
    oluacls_prop(L, "positionOffset", _olua_fun_cocos2d_TMXObjectGroup_getPositionOffset, _olua_fun_cocos2d_TMXObjectGroup_setPositionOffset);
    oluacls_prop(L, "properties", _olua_fun_cocos2d_TMXObjectGroup_getProperties, _olua_fun_cocos2d_TMXObjectGroup_setProperties);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TMXObjectGroup(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TMXObjectGroup")) {
        luaL_error(L, "class not found: cocos2d::TMXObjectGroup");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TMXLayer_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTilesetInfo *arg1 = nullptr;       /** tilesetInfo */
    cocos2d::TMXLayerInfo *arg2 = nullptr;       /** layerInfo */
    cocos2d::TMXMapInfo *arg3 = nullptr;       /** mapInfo */

    olua_check_object(L, 1, &arg1, "cc.TMXTilesetInfo");
    olua_check_object(L, 2, &arg2, "cc.TMXLayerInfo");
    olua_check_object(L, 3, &arg3, "cc.TMXMapInfo");

    // static cocos2d::TMXLayer *create(cocos2d::TMXTilesetInfo *tilesetInfo, cocos2d::TMXLayerInfo *layerInfo, cocos2d::TMXMapInfo *mapInfo)
    cocos2d::TMXLayer *ret = cocos2d::TMXLayer::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.TMXLayer");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_getLayerName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXLayer");

    // const std::string &getLayerName()
    const std::string &ret = self->getLayerName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_getLayerOrientation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXLayer");

    // int getLayerOrientation()
    int ret = self->getLayerOrientation();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_getLayerSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXLayer");

    // const cocos2d::Size &getLayerSize()
    const cocos2d::Size &ret = self->getLayerSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_getMapTileSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXLayer");

    // const cocos2d::Size &getMapTileSize()
    const cocos2d::Size &ret = self->getMapTileSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_getPositionAt(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    cocos2d::Vec2 *arg1;       /** tileCoordinate */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // cocos2d::Vec2 getPositionAt(const cocos2d::Vec2 &tileCoordinate)
    cocos2d::Vec2 ret = self->getPositionAt(*arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_getProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXLayer");

    // const cocos2d::ValueMap &getProperties()
    const cocos2d::ValueMap &ret = self->getProperties();
    int num_ret = olua_push_cocos2d_ValueMap(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_getProperty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    std::string arg1;       /** propertyName */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Value getProperty(const std::string &propertyName)
    cocos2d::Value ret = self->getProperty(arg1);
    int num_ret = olua_push_cocos2d_Value(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_getTileAt(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    cocos2d::Vec2 *arg1;       /** tileCoordinate */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // cocos2d::Sprite *getTileAt(const cocos2d::Vec2 &tileCoordinate)
    cocos2d::Sprite *ret = self->getTileAt(*arg1);
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_getTileGIDAt$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    cocos2d::Vec2 *arg1;       /** tileCoordinate */
    cocos2d::TMXTileFlags *arg2 = nullptr;       /** flags */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_pointer(L, 3, &arg2, "cc.types.TMXTileFlags");

    // uint32_t getTileGIDAt(const cocos2d::Vec2 &tileCoordinate, @optional cocos2d::TMXTileFlags *flags)
    uint32_t ret = self->getTileGIDAt(*arg1, arg2);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_getTileGIDAt$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    cocos2d::Vec2 *arg1;       /** tileCoordinate */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // uint32_t getTileGIDAt(const cocos2d::Vec2 &tileCoordinate)
    uint32_t ret = self->getTileGIDAt(*arg1);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_getTileGIDAt(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.TMXLayer")) && (olua_is_object(L, 2, "cc.Vec2"))) {
            // uint32_t getTileGIDAt(const cocos2d::Vec2 &tileCoordinate)
            return _olua_fun_cocos2d_TMXLayer_getTileGIDAt$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.TMXLayer")) && (olua_is_object(L, 2, "cc.Vec2")) && (olua_is_pointer(L, 3, "cc.types.TMXTileFlags"))) {
            // uint32_t getTileGIDAt(const cocos2d::Vec2 &tileCoordinate, @optional cocos2d::TMXTileFlags *flags)
            return _olua_fun_cocos2d_TMXLayer_getTileGIDAt$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TMXLayer::getTileGIDAt' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_getTileSet(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXLayer");

    // cocos2d::TMXTilesetInfo *getTileSet()
    cocos2d::TMXTilesetInfo *ret = self->getTileSet();
    int num_ret = olua_push_object(L, ret, "cc.TMXTilesetInfo");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_getTiles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXLayer");

    // uint32_t *getTiles()
    uint32_t *ret = self->getTiles();
    int num_ret = olua_push_pointer(L, ret, "olua.uint32");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_initWithTilesetInfo(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    cocos2d::TMXTilesetInfo *arg1 = nullptr;       /** tilesetInfo */
    cocos2d::TMXLayerInfo *arg2 = nullptr;       /** layerInfo */
    cocos2d::TMXMapInfo *arg3 = nullptr;       /** mapInfo */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_object(L, 2, &arg1, "cc.TMXTilesetInfo");
    olua_check_object(L, 3, &arg2, "cc.TMXLayerInfo");
    olua_check_object(L, 4, &arg3, "cc.TMXMapInfo");

    // bool initWithTilesetInfo(cocos2d::TMXTilesetInfo *tilesetInfo, cocos2d::TMXLayerInfo *layerInfo, cocos2d::TMXMapInfo *mapInfo)
    bool ret = self->initWithTilesetInfo(arg1, arg2, arg3);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TMXLayer()
    cocos2d::TMXLayer *ret = new cocos2d::TMXLayer();
    int num_ret = olua_push_object(L, ret, "cc.TMXLayer");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayer_releaseMap(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXLayer");

    // void releaseMap()
    self->releaseMap();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_removeTileAt(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    cocos2d::Vec2 *arg1;       /** tileCoordinate */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void removeTileAt(const cocos2d::Vec2 &tileCoordinate)
    self->removeTileAt(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_setLayerName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    std::string arg1;       /** layerName */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_string(L, 2, &arg1);

    // void setLayerName(const std::string &layerName)
    self->setLayerName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_setLayerOrientation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    int arg1 = 0;       /** orientation */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_integer(L, 2, &arg1);

    // void setLayerOrientation(int orientation)
    self->setLayerOrientation(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_setLayerSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    cocos2d::Size *arg1;       /** size */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setLayerSize(const cocos2d::Size &size)
    self->setLayerSize(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_setMapTileSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    cocos2d::Size *arg1;       /** size */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setMapTileSize(const cocos2d::Size &size)
    self->setMapTileSize(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_setProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    cocos2d::ValueMap arg1;       /** properties */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setProperties(const cocos2d::ValueMap &properties)
    self->setProperties(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_setTileGID$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    uint32_t arg1 = 0;       /** gid */
    cocos2d::Vec2 *arg2;       /** tileCoordinate */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_integer(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Vec2");

    // void setTileGID(uint32_t gid, const cocos2d::Vec2 &tileCoordinate)
    self->setTileGID(arg1, *arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_setTileGID$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    uint32_t arg1 = 0;       /** gid */
    cocos2d::Vec2 *arg2;       /** tileCoordinate */
    cocos2d::TMXTileFlags arg3 = (cocos2d::TMXTileFlags)0;       /** flags */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_integer(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Vec2");
    olua_check_enum(L, 4, &arg3);

    // void setTileGID(uint32_t gid, const cocos2d::Vec2 &tileCoordinate, cocos2d::TMXTileFlags flags)
    self->setTileGID(arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_setTileGID(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.TMXLayer")) && (olua_is_integer(L, 2)) && (olua_is_object(L, 3, "cc.Vec2"))) {
            // void setTileGID(uint32_t gid, const cocos2d::Vec2 &tileCoordinate)
            return _olua_fun_cocos2d_TMXLayer_setTileGID$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.TMXLayer")) && (olua_is_integer(L, 2)) && (olua_is_object(L, 3, "cc.Vec2")) && (olua_is_enum(L, 4))) {
            // void setTileGID(uint32_t gid, const cocos2d::Vec2 &tileCoordinate, cocos2d::TMXTileFlags flags)
            return _olua_fun_cocos2d_TMXLayer_setTileGID$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::TMXLayer::setTileGID' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_setTileSet(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    cocos2d::TMXTilesetInfo *arg1 = nullptr;       /** info */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_object(L, 2, &arg1, "cc.TMXTilesetInfo");

    // void setTileSet(cocos2d::TMXTilesetInfo *info)
    self->setTileSet(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_setTiles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;
    uint32_t *arg1 = nullptr;       /** tiles */

    olua_to_object(L, 1, &self, "cc.TMXLayer");
    olua_check_pointer(L, 2, &arg1, "olua.uint32");

    // void setTiles(uint32_t *tiles)
    self->setTiles(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXLayer_setupTiles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXLayer");

    // void setupTiles()
    self->setupTiles();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_TMXLayer(lua_State *L)
{
    oluacls_class<cocos2d::TMXLayer, cocos2d::SpriteBatchNode>(L, "cc.TMXLayer");
    oluacls_func(L, "create", _olua_fun_cocos2d_TMXLayer_create);
    oluacls_func(L, "getLayerName", _olua_fun_cocos2d_TMXLayer_getLayerName);
    oluacls_func(L, "getLayerOrientation", _olua_fun_cocos2d_TMXLayer_getLayerOrientation);
    oluacls_func(L, "getLayerSize", _olua_fun_cocos2d_TMXLayer_getLayerSize);
    oluacls_func(L, "getMapTileSize", _olua_fun_cocos2d_TMXLayer_getMapTileSize);
    oluacls_func(L, "getPositionAt", _olua_fun_cocos2d_TMXLayer_getPositionAt);
    oluacls_func(L, "getProperties", _olua_fun_cocos2d_TMXLayer_getProperties);
    oluacls_func(L, "getProperty", _olua_fun_cocos2d_TMXLayer_getProperty);
    oluacls_func(L, "getTileAt", _olua_fun_cocos2d_TMXLayer_getTileAt);
    oluacls_func(L, "getTileGIDAt", _olua_fun_cocos2d_TMXLayer_getTileGIDAt);
    oluacls_func(L, "getTileSet", _olua_fun_cocos2d_TMXLayer_getTileSet);
    oluacls_func(L, "getTiles", _olua_fun_cocos2d_TMXLayer_getTiles);
    oluacls_func(L, "initWithTilesetInfo", _olua_fun_cocos2d_TMXLayer_initWithTilesetInfo);
    oluacls_func(L, "new", _olua_fun_cocos2d_TMXLayer_new);
    oluacls_func(L, "releaseMap", _olua_fun_cocos2d_TMXLayer_releaseMap);
    oluacls_func(L, "removeTileAt", _olua_fun_cocos2d_TMXLayer_removeTileAt);
    oluacls_func(L, "setLayerName", _olua_fun_cocos2d_TMXLayer_setLayerName);
    oluacls_func(L, "setLayerOrientation", _olua_fun_cocos2d_TMXLayer_setLayerOrientation);
    oluacls_func(L, "setLayerSize", _olua_fun_cocos2d_TMXLayer_setLayerSize);
    oluacls_func(L, "setMapTileSize", _olua_fun_cocos2d_TMXLayer_setMapTileSize);
    oluacls_func(L, "setProperties", _olua_fun_cocos2d_TMXLayer_setProperties);
    oluacls_func(L, "setTileGID", _olua_fun_cocos2d_TMXLayer_setTileGID);
    oluacls_func(L, "setTileSet", _olua_fun_cocos2d_TMXLayer_setTileSet);
    oluacls_func(L, "setTiles", _olua_fun_cocos2d_TMXLayer_setTiles);
    oluacls_func(L, "setupTiles", _olua_fun_cocos2d_TMXLayer_setupTiles);
    oluacls_prop(L, "layerName", _olua_fun_cocos2d_TMXLayer_getLayerName, _olua_fun_cocos2d_TMXLayer_setLayerName);
    oluacls_prop(L, "layerOrientation", _olua_fun_cocos2d_TMXLayer_getLayerOrientation, _olua_fun_cocos2d_TMXLayer_setLayerOrientation);
    oluacls_prop(L, "layerSize", _olua_fun_cocos2d_TMXLayer_getLayerSize, _olua_fun_cocos2d_TMXLayer_setLayerSize);
    oluacls_prop(L, "mapTileSize", _olua_fun_cocos2d_TMXLayer_getMapTileSize, _olua_fun_cocos2d_TMXLayer_setMapTileSize);
    oluacls_prop(L, "properties", _olua_fun_cocos2d_TMXLayer_getProperties, _olua_fun_cocos2d_TMXLayer_setProperties);
    oluacls_prop(L, "tileSet", _olua_fun_cocos2d_TMXLayer_getTileSet, _olua_fun_cocos2d_TMXLayer_setTileSet);
    oluacls_prop(L, "tiles", _olua_fun_cocos2d_TMXLayer_getTiles, _olua_fun_cocos2d_TMXLayer_setTiles);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TMXLayer(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TMXLayer")) {
        luaL_error(L, "class not found: cocos2d::TMXLayer");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TMXLayerInfo_getProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayerInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXLayerInfo");

    // cocos2d::ValueMap &getProperties()
    cocos2d::ValueMap &ret = self->getProperties();
    int num_ret = olua_push_pointer(L, &ret, "cc.types.ValueMap");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayerInfo_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TMXLayerInfo()
    cocos2d::TMXLayerInfo *ret = new cocos2d::TMXLayerInfo();
    int num_ret = olua_push_object(L, ret, "cc.TMXLayerInfo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXLayerInfo_setProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXLayerInfo *self = nullptr;
    cocos2d::ValueMap arg1;       /** properties */

    olua_to_object(L, 1, &self, "cc.TMXLayerInfo");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setProperties(cocos2d::ValueMap properties)
    self->setProperties(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_TMXLayerInfo(lua_State *L)
{
    oluacls_class<cocos2d::TMXLayerInfo, cocos2d::Ref>(L, "cc.TMXLayerInfo");
    oluacls_func(L, "getProperties", _olua_fun_cocos2d_TMXLayerInfo_getProperties);
    oluacls_func(L, "new", _olua_fun_cocos2d_TMXLayerInfo_new);
    oluacls_func(L, "setProperties", _olua_fun_cocos2d_TMXLayerInfo_setProperties);
    oluacls_prop(L, "properties", _olua_fun_cocos2d_TMXLayerInfo_getProperties, _olua_fun_cocos2d_TMXLayerInfo_setProperties);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TMXLayerInfo(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TMXLayerInfo")) {
        luaL_error(L, "class not found: cocos2d::TMXLayerInfo");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TMXMapInfo_as(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    const char *arg1 = nullptr;       /** cls */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_string(L, 2, &arg1);

    do {
        if (olua_isa(L, 1, arg1)) {
            lua_pushvalue(L, 1);
            break;
        }
        if (olua_strequal(arg1, "cc.SAXDelegator")) {
            olua_pushobj_as<cocos2d::SAXDelegator>(L, 1, self, "as.cc.SAXDelegator");
            break;
        }

        luaL_error(L, "'cocos2d::TMXMapInfo' can't cast to '%s'", arg1);
    } while (0);

    olua_endinvoke(L);

    return 1;
}

static int _olua_fun_cocos2d_TMXMapInfo_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** tmxFile */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::TMXMapInfo *create(const std::string &tmxFile)
    cocos2d::TMXMapInfo *ret = cocos2d::TMXMapInfo::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.TMXMapInfo");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_createWithXML(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** tmxString */
    std::string arg2;       /** resourcePath */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);

    // static cocos2d::TMXMapInfo *createWithXML(const std::string &tmxString, const std::string &resourcePath)
    cocos2d::TMXMapInfo *ret = cocos2d::TMXMapInfo::createWithXML(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TMXMapInfo");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_endElement(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    void *arg1 = nullptr;       /** ctx */
    const char *arg2 = nullptr;       /** name */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_string(L, 3, &arg2);

    // void endElement(void *ctx, const char *name)
    self->endElement(arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_getCurrentString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // const std::string &getCurrentString()
    const std::string &ret = self->getCurrentString();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getExternalTilesetFileName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // const std::string &getExternalTilesetFileName()
    const std::string &ret = self->getExternalTilesetFileName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getHexSideLength(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // int getHexSideLength()
    int ret = self->getHexSideLength();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getLayerAttribs(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // int getLayerAttribs()
    int ret = self->getLayerAttribs();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getLayers(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // const cocos2d::Vector<cocos2d::TMXLayerInfo *> &getLayers()
    const cocos2d::Vector<cocos2d::TMXLayerInfo *> &ret = self->getLayers();
    int num_ret = olua_push_array<cocos2d::TMXLayerInfo *>(L, ret, [L](cocos2d::TMXLayerInfo *arg1) {
        olua_push_object(L, arg1, "cc.TMXLayerInfo");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getMapSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // const cocos2d::Size &getMapSize()
    const cocos2d::Size &ret = self->getMapSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getObjectGroups(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // const cocos2d::Vector<cocos2d::TMXObjectGroup *> &getObjectGroups()
    const cocos2d::Vector<cocos2d::TMXObjectGroup *> &ret = self->getObjectGroups();
    int num_ret = olua_push_array<cocos2d::TMXObjectGroup *>(L, ret, [L](cocos2d::TMXObjectGroup *arg1) {
        olua_push_object(L, arg1, "cc.TMXObjectGroup");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getOrientation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // int getOrientation()
    int ret = self->getOrientation();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getParentElement(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // int getParentElement()
    int ret = self->getParentElement();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getParentGID(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // int getParentGID()
    int ret = self->getParentGID();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // const cocos2d::ValueMap &getProperties()
    const cocos2d::ValueMap &ret = self->getProperties();
    int num_ret = olua_push_cocos2d_ValueMap(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getStaggerAxis(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // int getStaggerAxis()
    int ret = self->getStaggerAxis();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getStaggerIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // int getStaggerIndex()
    int ret = self->getStaggerIndex();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getTMXFileName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // const std::string &getTMXFileName()
    const std::string &ret = self->getTMXFileName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getTileProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // cocos2d::ValueMapIntKey &getTileProperties()
    cocos2d::ValueMapIntKey &ret = self->getTileProperties();
    int num_ret = olua_push_cocos2d_ValueMapIntKey(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getTileSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // const cocos2d::Size &getTileSize()
    const cocos2d::Size &ret = self->getTileSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_getTilesets(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // const cocos2d::Vector<cocos2d::TMXTilesetInfo *> &getTilesets()
    const cocos2d::Vector<cocos2d::TMXTilesetInfo *> &ret = self->getTilesets();
    int num_ret = olua_push_array<cocos2d::TMXTilesetInfo *>(L, ret, [L](cocos2d::TMXTilesetInfo *arg1) {
        olua_push_object(L, arg1, "cc.TMXTilesetInfo");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_initWithTMXFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    std::string arg1;       /** tmxFile */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_string(L, 2, &arg1);

    // bool initWithTMXFile(const std::string &tmxFile)
    bool ret = self->initWithTMXFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_initWithXML(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    std::string arg1;       /** tmxString */
    std::string arg2;       /** resourcePath */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // bool initWithXML(const std::string &tmxString, const std::string &resourcePath)
    bool ret = self->initWithXML(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_isStoringCharacters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");

    // bool isStoringCharacters()
    bool ret = self->isStoringCharacters();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TMXMapInfo()
    cocos2d::TMXMapInfo *ret = new cocos2d::TMXMapInfo();
    int num_ret = olua_push_object(L, ret, "cc.TMXMapInfo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_parseXMLFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    std::string arg1;       /** xmlFilename */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_string(L, 2, &arg1);

    // bool parseXMLFile(const std::string &xmlFilename)
    bool ret = self->parseXMLFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_parseXMLString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    std::string arg1;       /** xmlString */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_string(L, 2, &arg1);

    // bool parseXMLString(const std::string &xmlString)
    bool ret = self->parseXMLString(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXMapInfo_setCurrentString(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    std::string arg1;       /** currentString */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_string(L, 2, &arg1);

    // void setCurrentString(const std::string &currentString)
    self->setCurrentString(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setHexSideLength(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    int arg1 = 0;       /** hexSideLength */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_integer(L, 2, &arg1);

    // void setHexSideLength(int hexSideLength)
    self->setHexSideLength(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setLayerAttribs(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    int arg1 = 0;       /** layerAttribs */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_integer(L, 2, &arg1);

    // void setLayerAttribs(int layerAttribs)
    self->setLayerAttribs(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setLayers(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    cocos2d::Vector<cocos2d::TMXLayerInfo *> arg1;       /** layers */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_array<cocos2d::TMXLayerInfo *>(L, 2, arg1, [L](cocos2d::TMXLayerInfo **arg1) {
        olua_check_object(L, -1, arg1, "cc.TMXLayerInfo");
    });

    // void setLayers(const cocos2d::Vector<cocos2d::TMXLayerInfo *> &layers)
    self->setLayers(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setMapSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    cocos2d::Size *arg1;       /** mapSize */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setMapSize(const cocos2d::Size &mapSize)
    self->setMapSize(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setObjectGroups(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    cocos2d::Vector<cocos2d::TMXObjectGroup *> arg1;       /** groups */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_array<cocos2d::TMXObjectGroup *>(L, 2, arg1, [L](cocos2d::TMXObjectGroup **arg1) {
        olua_check_object(L, -1, arg1, "cc.TMXObjectGroup");
    });

    // void setObjectGroups(const cocos2d::Vector<cocos2d::TMXObjectGroup *> &groups)
    self->setObjectGroups(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setOrientation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    int arg1 = 0;       /** orientation */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_integer(L, 2, &arg1);

    // void setOrientation(int orientation)
    self->setOrientation(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setParentElement(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    int arg1 = 0;       /** element */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_integer(L, 2, &arg1);

    // void setParentElement(int element)
    self->setParentElement(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setParentGID(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    int arg1 = 0;       /** gid */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_integer(L, 2, &arg1);

    // void setParentGID(int gid)
    self->setParentGID(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    cocos2d::ValueMap arg1;       /** properties */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setProperties(const cocos2d::ValueMap &properties)
    self->setProperties(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setStaggerAxis(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    int arg1 = 0;       /** staggerAxis */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_integer(L, 2, &arg1);

    // void setStaggerAxis(int staggerAxis)
    self->setStaggerAxis(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setStaggerIndex(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    int arg1 = 0;       /** staggerIndex */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_integer(L, 2, &arg1);

    // void setStaggerIndex(int staggerIndex)
    self->setStaggerIndex(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setStoringCharacters(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    bool arg1 = false;       /** storingCharacters */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_bool(L, 2, &arg1);

    // void setStoringCharacters(bool storingCharacters)
    self->setStoringCharacters(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setTMXFileName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    std::string arg1;       /** fileName */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_string(L, 2, &arg1);

    // void setTMXFileName(const std::string &fileName)
    self->setTMXFileName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setTileProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    cocos2d::ValueMapIntKey arg1;       /** tileProperties */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_cocos2d_ValueMapIntKey(L, 2, &arg1);

    // void setTileProperties(const cocos2d::ValueMapIntKey &tileProperties)
    self->setTileProperties(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setTileSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    cocos2d::Size *arg1;       /** tileSize */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setTileSize(const cocos2d::Size &tileSize)
    self->setTileSize(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_setTilesets(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    cocos2d::Vector<cocos2d::TMXTilesetInfo *> arg1;       /** tilesets */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_array<cocos2d::TMXTilesetInfo *>(L, 2, arg1, [L](cocos2d::TMXTilesetInfo **arg1) {
        olua_check_object(L, -1, arg1, "cc.TMXTilesetInfo");
    });

    // void setTilesets(const cocos2d::Vector<cocos2d::TMXTilesetInfo *> &tilesets)
    self->setTilesets(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXMapInfo_textHandler(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXMapInfo *self = nullptr;
    void *arg1 = nullptr;       /** ctx */
    const char *arg2 = nullptr;       /** ch */
    size_t arg3 = 0;       /** len */

    olua_to_object(L, 1, &self, "cc.TMXMapInfo");
    olua_check_object(L, 2, &arg1, "void *");
    olua_check_string(L, 3, &arg2);
    olua_check_integer(L, 4, &arg3);

    // void textHandler(void *ctx, const char *ch, size_t len)
    self->textHandler(arg1, arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_TMXMapInfo(lua_State *L)
{
    oluacls_class<cocos2d::TMXMapInfo, cocos2d::Ref>(L, "cc.TMXMapInfo");
    oluacls_func(L, "as", _olua_fun_cocos2d_TMXMapInfo_as);
    oluacls_func(L, "create", _olua_fun_cocos2d_TMXMapInfo_create);
    oluacls_func(L, "createWithXML", _olua_fun_cocos2d_TMXMapInfo_createWithXML);
    oluacls_func(L, "endElement", _olua_fun_cocos2d_TMXMapInfo_endElement);
    oluacls_func(L, "getCurrentString", _olua_fun_cocos2d_TMXMapInfo_getCurrentString);
    oluacls_func(L, "getExternalTilesetFileName", _olua_fun_cocos2d_TMXMapInfo_getExternalTilesetFileName);
    oluacls_func(L, "getHexSideLength", _olua_fun_cocos2d_TMXMapInfo_getHexSideLength);
    oluacls_func(L, "getLayerAttribs", _olua_fun_cocos2d_TMXMapInfo_getLayerAttribs);
    oluacls_func(L, "getLayers", _olua_fun_cocos2d_TMXMapInfo_getLayers);
    oluacls_func(L, "getMapSize", _olua_fun_cocos2d_TMXMapInfo_getMapSize);
    oluacls_func(L, "getObjectGroups", _olua_fun_cocos2d_TMXMapInfo_getObjectGroups);
    oluacls_func(L, "getOrientation", _olua_fun_cocos2d_TMXMapInfo_getOrientation);
    oluacls_func(L, "getParentElement", _olua_fun_cocos2d_TMXMapInfo_getParentElement);
    oluacls_func(L, "getParentGID", _olua_fun_cocos2d_TMXMapInfo_getParentGID);
    oluacls_func(L, "getProperties", _olua_fun_cocos2d_TMXMapInfo_getProperties);
    oluacls_func(L, "getStaggerAxis", _olua_fun_cocos2d_TMXMapInfo_getStaggerAxis);
    oluacls_func(L, "getStaggerIndex", _olua_fun_cocos2d_TMXMapInfo_getStaggerIndex);
    oluacls_func(L, "getTMXFileName", _olua_fun_cocos2d_TMXMapInfo_getTMXFileName);
    oluacls_func(L, "getTileProperties", _olua_fun_cocos2d_TMXMapInfo_getTileProperties);
    oluacls_func(L, "getTileSize", _olua_fun_cocos2d_TMXMapInfo_getTileSize);
    oluacls_func(L, "getTilesets", _olua_fun_cocos2d_TMXMapInfo_getTilesets);
    oluacls_func(L, "initWithTMXFile", _olua_fun_cocos2d_TMXMapInfo_initWithTMXFile);
    oluacls_func(L, "initWithXML", _olua_fun_cocos2d_TMXMapInfo_initWithXML);
    oluacls_func(L, "isStoringCharacters", _olua_fun_cocos2d_TMXMapInfo_isStoringCharacters);
    oluacls_func(L, "new", _olua_fun_cocos2d_TMXMapInfo_new);
    oluacls_func(L, "parseXMLFile", _olua_fun_cocos2d_TMXMapInfo_parseXMLFile);
    oluacls_func(L, "parseXMLString", _olua_fun_cocos2d_TMXMapInfo_parseXMLString);
    oluacls_func(L, "setCurrentString", _olua_fun_cocos2d_TMXMapInfo_setCurrentString);
    oluacls_func(L, "setHexSideLength", _olua_fun_cocos2d_TMXMapInfo_setHexSideLength);
    oluacls_func(L, "setLayerAttribs", _olua_fun_cocos2d_TMXMapInfo_setLayerAttribs);
    oluacls_func(L, "setLayers", _olua_fun_cocos2d_TMXMapInfo_setLayers);
    oluacls_func(L, "setMapSize", _olua_fun_cocos2d_TMXMapInfo_setMapSize);
    oluacls_func(L, "setObjectGroups", _olua_fun_cocos2d_TMXMapInfo_setObjectGroups);
    oluacls_func(L, "setOrientation", _olua_fun_cocos2d_TMXMapInfo_setOrientation);
    oluacls_func(L, "setParentElement", _olua_fun_cocos2d_TMXMapInfo_setParentElement);
    oluacls_func(L, "setParentGID", _olua_fun_cocos2d_TMXMapInfo_setParentGID);
    oluacls_func(L, "setProperties", _olua_fun_cocos2d_TMXMapInfo_setProperties);
    oluacls_func(L, "setStaggerAxis", _olua_fun_cocos2d_TMXMapInfo_setStaggerAxis);
    oluacls_func(L, "setStaggerIndex", _olua_fun_cocos2d_TMXMapInfo_setStaggerIndex);
    oluacls_func(L, "setStoringCharacters", _olua_fun_cocos2d_TMXMapInfo_setStoringCharacters);
    oluacls_func(L, "setTMXFileName", _olua_fun_cocos2d_TMXMapInfo_setTMXFileName);
    oluacls_func(L, "setTileProperties", _olua_fun_cocos2d_TMXMapInfo_setTileProperties);
    oluacls_func(L, "setTileSize", _olua_fun_cocos2d_TMXMapInfo_setTileSize);
    oluacls_func(L, "setTilesets", _olua_fun_cocos2d_TMXMapInfo_setTilesets);
    oluacls_func(L, "textHandler", _olua_fun_cocos2d_TMXMapInfo_textHandler);
    oluacls_prop(L, "currentString", _olua_fun_cocos2d_TMXMapInfo_getCurrentString, _olua_fun_cocos2d_TMXMapInfo_setCurrentString);
    oluacls_prop(L, "externalTilesetFileName", _olua_fun_cocos2d_TMXMapInfo_getExternalTilesetFileName, nullptr);
    oluacls_prop(L, "hexSideLength", _olua_fun_cocos2d_TMXMapInfo_getHexSideLength, _olua_fun_cocos2d_TMXMapInfo_setHexSideLength);
    oluacls_prop(L, "layerAttribs", _olua_fun_cocos2d_TMXMapInfo_getLayerAttribs, _olua_fun_cocos2d_TMXMapInfo_setLayerAttribs);
    oluacls_prop(L, "layers", _olua_fun_cocos2d_TMXMapInfo_getLayers, _olua_fun_cocos2d_TMXMapInfo_setLayers);
    oluacls_prop(L, "mapSize", _olua_fun_cocos2d_TMXMapInfo_getMapSize, _olua_fun_cocos2d_TMXMapInfo_setMapSize);
    oluacls_prop(L, "objectGroups", _olua_fun_cocos2d_TMXMapInfo_getObjectGroups, _olua_fun_cocos2d_TMXMapInfo_setObjectGroups);
    oluacls_prop(L, "orientation", _olua_fun_cocos2d_TMXMapInfo_getOrientation, _olua_fun_cocos2d_TMXMapInfo_setOrientation);
    oluacls_prop(L, "parentElement", _olua_fun_cocos2d_TMXMapInfo_getParentElement, _olua_fun_cocos2d_TMXMapInfo_setParentElement);
    oluacls_prop(L, "parentGID", _olua_fun_cocos2d_TMXMapInfo_getParentGID, _olua_fun_cocos2d_TMXMapInfo_setParentGID);
    oluacls_prop(L, "properties", _olua_fun_cocos2d_TMXMapInfo_getProperties, _olua_fun_cocos2d_TMXMapInfo_setProperties);
    oluacls_prop(L, "staggerAxis", _olua_fun_cocos2d_TMXMapInfo_getStaggerAxis, _olua_fun_cocos2d_TMXMapInfo_setStaggerAxis);
    oluacls_prop(L, "staggerIndex", _olua_fun_cocos2d_TMXMapInfo_getStaggerIndex, _olua_fun_cocos2d_TMXMapInfo_setStaggerIndex);
    oluacls_prop(L, "storingCharacters", _olua_fun_cocos2d_TMXMapInfo_isStoringCharacters, _olua_fun_cocos2d_TMXMapInfo_setStoringCharacters);
    oluacls_prop(L, "tileProperties", _olua_fun_cocos2d_TMXMapInfo_getTileProperties, _olua_fun_cocos2d_TMXMapInfo_setTileProperties);
    oluacls_prop(L, "tileSize", _olua_fun_cocos2d_TMXMapInfo_getTileSize, _olua_fun_cocos2d_TMXMapInfo_setTileSize);
    oluacls_prop(L, "tilesets", _olua_fun_cocos2d_TMXMapInfo_getTilesets, _olua_fun_cocos2d_TMXMapInfo_setTilesets);
    oluacls_prop(L, "tmxFileName", _olua_fun_cocos2d_TMXMapInfo_getTMXFileName, _olua_fun_cocos2d_TMXMapInfo_setTMXFileName);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TMXMapInfo(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TMXMapInfo")) {
        luaL_error(L, "class not found: cocos2d::TMXMapInfo");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TMXTilesetInfo_getRectForGID(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTilesetInfo *self = nullptr;
    uint32_t arg1 = 0;       /** gid */

    olua_to_object(L, 1, &self, "cc.TMXTilesetInfo");
    olua_check_integer(L, 2, &arg1);

    // cocos2d::Rect getRectForGID(uint32_t gid)
    cocos2d::Rect ret = self->getRectForGID(arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Rect");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTilesetInfo_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TMXTilesetInfo()
    cocos2d::TMXTilesetInfo *ret = new cocos2d::TMXTilesetInfo();
    int num_ret = olua_push_object(L, ret, "cc.TMXTilesetInfo");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_cls_cc_TMXTilesetInfo(lua_State *L)
{
    oluacls_class<cocos2d::TMXTilesetInfo, cocos2d::Ref>(L, "cc.TMXTilesetInfo");
    oluacls_func(L, "getRectForGID", _olua_fun_cocos2d_TMXTilesetInfo_getRectForGID);
    oluacls_func(L, "new", _olua_fun_cocos2d_TMXTilesetInfo_new);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TMXTilesetInfo(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TMXTilesetInfo")) {
        luaL_error(L, "class not found: cocos2d::TMXTilesetInfo");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_TMXTiledMap_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** tmxFile */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::TMXTiledMap *create(const std::string &tmxFile)
    cocos2d::TMXTiledMap *ret = cocos2d::TMXTiledMap::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.TMXTiledMap");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_createWithXML(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** tmxString */
    std::string arg2;       /** resourcePath */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);

    // static cocos2d::TMXTiledMap *createWithXML(const std::string &tmxString, const std::string &resourcePath)
    cocos2d::TMXTiledMap *ret = cocos2d::TMXTiledMap::createWithXML(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.TMXTiledMap");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_getLayer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;
    std::string arg1;       /** layerName */

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");
    olua_check_string(L, 2, &arg1);

    // cocos2d::TMXLayer *getLayer(const std::string &layerName)
    cocos2d::TMXLayer *ret = self->getLayer(arg1);
    int num_ret = olua_push_object(L, ret, "cc.TMXLayer");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_getLayerNum(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");

    // int getLayerNum()
    int ret = self->getLayerNum();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_getMapOrientation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");

    // int getMapOrientation()
    int ret = self->getMapOrientation();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_getMapSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");

    // const cocos2d::Size &getMapSize()
    const cocos2d::Size &ret = self->getMapSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_getObjectGroup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;
    std::string arg1;       /** groupName */

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");
    olua_check_string(L, 2, &arg1);

    // cocos2d::TMXObjectGroup *getObjectGroup(const std::string &groupName)
    cocos2d::TMXObjectGroup *ret = self->getObjectGroup(arg1);
    int num_ret = olua_push_object(L, ret, "cc.TMXObjectGroup");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_getObjectGroups(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");

    // const cocos2d::Vector<cocos2d::TMXObjectGroup *> &getObjectGroups()
    const cocos2d::Vector<cocos2d::TMXObjectGroup *> &ret = self->getObjectGroups();
    int num_ret = olua_push_array<cocos2d::TMXObjectGroup *>(L, ret, [L](cocos2d::TMXObjectGroup *arg1) {
        olua_push_object(L, arg1, "cc.TMXObjectGroup");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_getProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");

    // cocos2d::ValueMap &getProperties()
    cocos2d::ValueMap &ret = self->getProperties();
    int num_ret = olua_push_pointer(L, &ret, "cc.types.ValueMap");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_getPropertiesForGID(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;
    int arg1 = 0;       /** GID */

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");
    olua_check_integer(L, 2, &arg1);

    // cocos2d::Value getPropertiesForGID(int GID)
    cocos2d::Value ret = self->getPropertiesForGID(arg1);
    int num_ret = olua_push_cocos2d_Value(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_getProperty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;
    std::string arg1;       /** propertyName */

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Value getProperty(const std::string &propertyName)
    cocos2d::Value ret = self->getProperty(arg1);
    int num_ret = olua_push_cocos2d_Value(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_getResourceFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");

    // const std::string &getResourceFile()
    const std::string &ret = self->getResourceFile();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_getTileSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");

    // const cocos2d::Size &getTileSize()
    const cocos2d::Size &ret = self->getTileSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_initWithTMXFile(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;
    std::string arg1;       /** tmxFile */

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");
    olua_check_string(L, 2, &arg1);

    // bool initWithTMXFile(const std::string &tmxFile)
    bool ret = self->initWithTMXFile(arg1);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_initWithXML(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;
    std::string arg1;       /** tmxString */
    std::string arg2;       /** resourcePath */

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");
    olua_check_string(L, 2, &arg1);
    olua_check_string(L, 3, &arg2);

    // bool initWithXML(const std::string &tmxString, const std::string &resourcePath)
    bool ret = self->initWithXML(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::TMXTiledMap()
    cocos2d::TMXTiledMap *ret = new cocos2d::TMXTiledMap();
    int num_ret = olua_push_object(L, ret, "cc.TMXTiledMap");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_TMXTiledMap_setMapOrientation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;
    int arg1 = 0;       /** mapOrientation */

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");
    olua_check_integer(L, 2, &arg1);

    // void setMapOrientation(int mapOrientation)
    self->setMapOrientation(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXTiledMap_setMapSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;
    cocos2d::Size *arg1;       /** mapSize */

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setMapSize(const cocos2d::Size &mapSize)
    self->setMapSize(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXTiledMap_setObjectGroups(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;
    cocos2d::Vector<cocos2d::TMXObjectGroup *> arg1;       /** groups */

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");
    olua_check_array<cocos2d::TMXObjectGroup *>(L, 2, arg1, [L](cocos2d::TMXObjectGroup **arg1) {
        olua_check_object(L, -1, arg1, "cc.TMXObjectGroup");
    });

    // void setObjectGroups(const cocos2d::Vector<cocos2d::TMXObjectGroup *> &groups)
    self->setObjectGroups(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXTiledMap_setProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;
    cocos2d::ValueMap arg1;       /** properties */

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setProperties(const cocos2d::ValueMap &properties)
    self->setProperties(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_TMXTiledMap_setTileSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTiledMap *self = nullptr;
    cocos2d::Size *arg1;       /** tileSize */

    olua_to_object(L, 1, &self, "cc.TMXTiledMap");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setTileSize(const cocos2d::Size &tileSize)
    self->setTileSize(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_TMXTiledMap(lua_State *L)
{
    oluacls_class<cocos2d::TMXTiledMap, cocos2d::Node>(L, "cc.TMXTiledMap");
    oluacls_func(L, "create", _olua_fun_cocos2d_TMXTiledMap_create);
    oluacls_func(L, "createWithXML", _olua_fun_cocos2d_TMXTiledMap_createWithXML);
    oluacls_func(L, "getLayer", _olua_fun_cocos2d_TMXTiledMap_getLayer);
    oluacls_func(L, "getLayerNum", _olua_fun_cocos2d_TMXTiledMap_getLayerNum);
    oluacls_func(L, "getMapOrientation", _olua_fun_cocos2d_TMXTiledMap_getMapOrientation);
    oluacls_func(L, "getMapSize", _olua_fun_cocos2d_TMXTiledMap_getMapSize);
    oluacls_func(L, "getObjectGroup", _olua_fun_cocos2d_TMXTiledMap_getObjectGroup);
    oluacls_func(L, "getObjectGroups", _olua_fun_cocos2d_TMXTiledMap_getObjectGroups);
    oluacls_func(L, "getProperties", _olua_fun_cocos2d_TMXTiledMap_getProperties);
    oluacls_func(L, "getPropertiesForGID", _olua_fun_cocos2d_TMXTiledMap_getPropertiesForGID);
    oluacls_func(L, "getProperty", _olua_fun_cocos2d_TMXTiledMap_getProperty);
    oluacls_func(L, "getResourceFile", _olua_fun_cocos2d_TMXTiledMap_getResourceFile);
    oluacls_func(L, "getTileSize", _olua_fun_cocos2d_TMXTiledMap_getTileSize);
    oluacls_func(L, "initWithTMXFile", _olua_fun_cocos2d_TMXTiledMap_initWithTMXFile);
    oluacls_func(L, "initWithXML", _olua_fun_cocos2d_TMXTiledMap_initWithXML);
    oluacls_func(L, "new", _olua_fun_cocos2d_TMXTiledMap_new);
    oluacls_func(L, "setMapOrientation", _olua_fun_cocos2d_TMXTiledMap_setMapOrientation);
    oluacls_func(L, "setMapSize", _olua_fun_cocos2d_TMXTiledMap_setMapSize);
    oluacls_func(L, "setObjectGroups", _olua_fun_cocos2d_TMXTiledMap_setObjectGroups);
    oluacls_func(L, "setProperties", _olua_fun_cocos2d_TMXTiledMap_setProperties);
    oluacls_func(L, "setTileSize", _olua_fun_cocos2d_TMXTiledMap_setTileSize);
    oluacls_prop(L, "layerNum", _olua_fun_cocos2d_TMXTiledMap_getLayerNum, nullptr);
    oluacls_prop(L, "mapOrientation", _olua_fun_cocos2d_TMXTiledMap_getMapOrientation, _olua_fun_cocos2d_TMXTiledMap_setMapOrientation);
    oluacls_prop(L, "mapSize", _olua_fun_cocos2d_TMXTiledMap_getMapSize, _olua_fun_cocos2d_TMXTiledMap_setMapSize);
    oluacls_prop(L, "objectGroups", _olua_fun_cocos2d_TMXTiledMap_getObjectGroups, _olua_fun_cocos2d_TMXTiledMap_setObjectGroups);
    oluacls_prop(L, "properties", _olua_fun_cocos2d_TMXTiledMap_getProperties, _olua_fun_cocos2d_TMXTiledMap_setProperties);
    oluacls_prop(L, "resourceFile", _olua_fun_cocos2d_TMXTiledMap_getResourceFile, nullptr);
    oluacls_prop(L, "tileSize", _olua_fun_cocos2d_TMXTiledMap_getTileSize, _olua_fun_cocos2d_TMXTiledMap_setTileSize);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_TMXTiledMap(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.TMXTiledMap")) {
        luaL_error(L, "class not found: cocos2d::TMXTiledMap");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_FastTMXTiledMap_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** tmxFile */

    olua_check_string(L, 1, &arg1);

    // static cocos2d::FastTMXTiledMap *create(const std::string &tmxFile)
    cocos2d::FastTMXTiledMap *ret = cocos2d::FastTMXTiledMap::create(arg1);
    int num_ret = olua_push_object(L, ret, "cc.FastTMXTiledMap");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_createWithXML(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** tmxString */
    std::string arg2;       /** resourcePath */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);

    // static cocos2d::FastTMXTiledMap *createWithXML(const std::string &tmxString, const std::string &resourcePath)
    cocos2d::FastTMXTiledMap *ret = cocos2d::FastTMXTiledMap::createWithXML(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.FastTMXTiledMap");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_getLayer(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;
    std::string arg1;       /** layerName */

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");
    olua_check_string(L, 2, &arg1);

    // cocos2d::FastTMXLayer *getLayer(const std::string &layerName)
    cocos2d::FastTMXLayer *ret = self->getLayer(arg1);
    int num_ret = olua_push_object(L, ret, "cc.FastTMXLayer");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_getMapOrientation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");

    // int getMapOrientation()
    int ret = self->getMapOrientation();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_getMapSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");

    // const cocos2d::Size &getMapSize()
    const cocos2d::Size &ret = self->getMapSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_getObjectGroup(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;
    std::string arg1;       /** groupName */

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");
    olua_check_string(L, 2, &arg1);

    // cocos2d::TMXObjectGroup *getObjectGroup(const std::string &groupName)
    cocos2d::TMXObjectGroup *ret = self->getObjectGroup(arg1);
    int num_ret = olua_push_object(L, ret, "cc.TMXObjectGroup");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_getObjectGroups(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");

    // const cocos2d::Vector<cocos2d::TMXObjectGroup *> &getObjectGroups()
    const cocos2d::Vector<cocos2d::TMXObjectGroup *> &ret = self->getObjectGroups();
    int num_ret = olua_push_array<cocos2d::TMXObjectGroup *>(L, ret, [L](cocos2d::TMXObjectGroup *arg1) {
        olua_push_object(L, arg1, "cc.TMXObjectGroup");
    });

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_getProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");

    // const cocos2d::ValueMap &getProperties()
    const cocos2d::ValueMap &ret = self->getProperties();
    int num_ret = olua_push_cocos2d_ValueMap(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_getPropertiesForGID(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;
    int arg1 = 0;       /** GID */

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");
    olua_check_integer(L, 2, &arg1);

    // cocos2d::Value getPropertiesForGID(int GID)
    cocos2d::Value ret = self->getPropertiesForGID(arg1);
    int num_ret = olua_push_cocos2d_Value(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_getProperty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;
    std::string arg1;       /** propertyName */

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Value getProperty(const std::string &propertyName)
    cocos2d::Value ret = self->getProperty(arg1);
    int num_ret = olua_push_cocos2d_Value(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_getTileSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");

    // const cocos2d::Size &getTileSize()
    const cocos2d::Size &ret = self->getTileSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_setMapOrientation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;
    int arg1 = 0;       /** mapOrientation */

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");
    olua_check_integer(L, 2, &arg1);

    // void setMapOrientation(int mapOrientation)
    self->setMapOrientation(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_setMapSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;
    cocos2d::Size *arg1;       /** mapSize */

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setMapSize(const cocos2d::Size &mapSize)
    self->setMapSize(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_setObjectGroups(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;
    cocos2d::Vector<cocos2d::TMXObjectGroup *> arg1;       /** groups */

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");
    olua_check_array<cocos2d::TMXObjectGroup *>(L, 2, arg1, [L](cocos2d::TMXObjectGroup **arg1) {
        olua_check_object(L, -1, arg1, "cc.TMXObjectGroup");
    });

    // void setObjectGroups(const cocos2d::Vector<cocos2d::TMXObjectGroup *> &groups)
    self->setObjectGroups(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_setProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;
    cocos2d::ValueMap arg1;       /** properties */

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setProperties(const cocos2d::ValueMap &properties)
    self->setProperties(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXTiledMap_setTileSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXTiledMap *self = nullptr;
    cocos2d::Size *arg1;       /** tileSize */

    olua_to_object(L, 1, &self, "cc.FastTMXTiledMap");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setTileSize(const cocos2d::Size &tileSize)
    self->setTileSize(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_FastTMXTiledMap(lua_State *L)
{
    oluacls_class<cocos2d::FastTMXTiledMap, cocos2d::Node>(L, "cc.FastTMXTiledMap");
    oluacls_func(L, "create", _olua_fun_cocos2d_FastTMXTiledMap_create);
    oluacls_func(L, "createWithXML", _olua_fun_cocos2d_FastTMXTiledMap_createWithXML);
    oluacls_func(L, "getLayer", _olua_fun_cocos2d_FastTMXTiledMap_getLayer);
    oluacls_func(L, "getMapOrientation", _olua_fun_cocos2d_FastTMXTiledMap_getMapOrientation);
    oluacls_func(L, "getMapSize", _olua_fun_cocos2d_FastTMXTiledMap_getMapSize);
    oluacls_func(L, "getObjectGroup", _olua_fun_cocos2d_FastTMXTiledMap_getObjectGroup);
    oluacls_func(L, "getObjectGroups", _olua_fun_cocos2d_FastTMXTiledMap_getObjectGroups);
    oluacls_func(L, "getProperties", _olua_fun_cocos2d_FastTMXTiledMap_getProperties);
    oluacls_func(L, "getPropertiesForGID", _olua_fun_cocos2d_FastTMXTiledMap_getPropertiesForGID);
    oluacls_func(L, "getProperty", _olua_fun_cocos2d_FastTMXTiledMap_getProperty);
    oluacls_func(L, "getTileSize", _olua_fun_cocos2d_FastTMXTiledMap_getTileSize);
    oluacls_func(L, "setMapOrientation", _olua_fun_cocos2d_FastTMXTiledMap_setMapOrientation);
    oluacls_func(L, "setMapSize", _olua_fun_cocos2d_FastTMXTiledMap_setMapSize);
    oluacls_func(L, "setObjectGroups", _olua_fun_cocos2d_FastTMXTiledMap_setObjectGroups);
    oluacls_func(L, "setProperties", _olua_fun_cocos2d_FastTMXTiledMap_setProperties);
    oluacls_func(L, "setTileSize", _olua_fun_cocos2d_FastTMXTiledMap_setTileSize);
    oluacls_prop(L, "mapOrientation", _olua_fun_cocos2d_FastTMXTiledMap_getMapOrientation, _olua_fun_cocos2d_FastTMXTiledMap_setMapOrientation);
    oluacls_prop(L, "mapSize", _olua_fun_cocos2d_FastTMXTiledMap_getMapSize, _olua_fun_cocos2d_FastTMXTiledMap_setMapSize);
    oluacls_prop(L, "objectGroups", _olua_fun_cocos2d_FastTMXTiledMap_getObjectGroups, _olua_fun_cocos2d_FastTMXTiledMap_setObjectGroups);
    oluacls_prop(L, "properties", _olua_fun_cocos2d_FastTMXTiledMap_getProperties, _olua_fun_cocos2d_FastTMXTiledMap_setProperties);
    oluacls_prop(L, "tileSize", _olua_fun_cocos2d_FastTMXTiledMap_getTileSize, _olua_fun_cocos2d_FastTMXTiledMap_setTileSize);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_FastTMXTiledMap(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.FastTMXTiledMap")) {
        luaL_error(L, "class not found: cocos2d::FastTMXTiledMap");
    }
    return 1;
}
OLUA_END_DECLS

static int _olua_fun_cocos2d_FastTMXLayer_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::TMXTilesetInfo *arg1 = nullptr;       /** tilesetInfo */
    cocos2d::TMXLayerInfo *arg2 = nullptr;       /** layerInfo */
    cocos2d::TMXMapInfo *arg3 = nullptr;       /** mapInfo */

    olua_check_object(L, 1, &arg1, "cc.TMXTilesetInfo");
    olua_check_object(L, 2, &arg2, "cc.TMXLayerInfo");
    olua_check_object(L, 3, &arg3, "cc.TMXMapInfo");

    // static cocos2d::FastTMXLayer *create(cocos2d::TMXTilesetInfo *tilesetInfo, cocos2d::TMXLayerInfo *layerInfo, cocos2d::TMXMapInfo *mapInfo)
    cocos2d::FastTMXLayer *ret = cocos2d::FastTMXLayer::create(arg1, arg2, arg3);
    int num_ret = olua_push_object(L, ret, "cc.FastTMXLayer");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_getLayerName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");

    // const std::string &getLayerName()
    const std::string &ret = self->getLayerName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_getLayerOrientation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");

    // int getLayerOrientation()
    int ret = self->getLayerOrientation();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_getLayerSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");

    // const cocos2d::Size &getLayerSize()
    const cocos2d::Size &ret = self->getLayerSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_getMapTileSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");

    // const cocos2d::Size &getMapTileSize()
    const cocos2d::Size &ret = self->getMapTileSize();
    int num_ret = olua_push_object(L, ret, "cc.Size");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_getPositionAt(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    cocos2d::Vec2 *arg1;       /** tileCoordinate */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // cocos2d::Vec2 getPositionAt(const cocos2d::Vec2 &tileCoordinate)
    cocos2d::Vec2 ret = self->getPositionAt(*arg1);
    int num_ret = olua_copy_object(L, ret, "cc.Vec2");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_getProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");

    // const cocos2d::ValueMap &getProperties()
    const cocos2d::ValueMap &ret = self->getProperties();
    int num_ret = olua_push_cocos2d_ValueMap(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_getProperty(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    std::string arg1;       /** propertyName */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_string(L, 2, &arg1);

    // cocos2d::Value getProperty(const std::string &propertyName)
    cocos2d::Value ret = self->getProperty(arg1);
    int num_ret = olua_push_cocos2d_Value(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_getTileAt(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    cocos2d::Vec2 *arg1;       /** tileCoordinate */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // cocos2d::Sprite *getTileAt(const cocos2d::Vec2 &tileCoordinate)
    cocos2d::Sprite *ret = self->getTileAt(*arg1);
    int num_ret = olua_push_object(L, ret, "cc.Sprite");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_getTileGIDAt$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    cocos2d::Vec2 *arg1;       /** tileCoordinate */
    cocos2d::TMXTileFlags *arg2 = nullptr;       /** flags */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Vec2");
    olua_check_pointer(L, 3, &arg2, "cc.types.TMXTileFlags");

    // int getTileGIDAt(const cocos2d::Vec2 &tileCoordinate, @optional cocos2d::TMXTileFlags *flags)
    int ret = self->getTileGIDAt(*arg1, arg2);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_getTileGIDAt$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    cocos2d::Vec2 *arg1;       /** tileCoordinate */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // int getTileGIDAt(const cocos2d::Vec2 &tileCoordinate)
    int ret = self->getTileGIDAt(*arg1);
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_getTileGIDAt(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.FastTMXLayer")) && (olua_is_object(L, 2, "cc.Vec2"))) {
            // int getTileGIDAt(const cocos2d::Vec2 &tileCoordinate)
            return _olua_fun_cocos2d_FastTMXLayer_getTileGIDAt$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FastTMXLayer")) && (olua_is_object(L, 2, "cc.Vec2")) && (olua_is_pointer(L, 3, "cc.types.TMXTileFlags"))) {
            // int getTileGIDAt(const cocos2d::Vec2 &tileCoordinate, @optional cocos2d::TMXTileFlags *flags)
            return _olua_fun_cocos2d_FastTMXLayer_getTileGIDAt$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FastTMXLayer::getTileGIDAt' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_getTileSet(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");

    // cocos2d::TMXTilesetInfo *getTileSet()
    cocos2d::TMXTilesetInfo *ret = self->getTileSet();
    int num_ret = olua_push_object(L, ret, "cc.TMXTilesetInfo");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_getTiles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");

    // const uint32_t *getTiles()
    const uint32_t *ret = self->getTiles();
    int num_ret = olua_push_pointer(L, ret, "olua.uint32");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::FastTMXLayer()
    cocos2d::FastTMXLayer *ret = new cocos2d::FastTMXLayer();
    int num_ret = olua_push_object(L, ret, "cc.FastTMXLayer");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_FastTMXLayer_removeTileAt(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    cocos2d::Vec2 *arg1;       /** tileCoordinate */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Vec2");

    // void removeTileAt(const cocos2d::Vec2 &tileCoordinate)
    self->removeTileAt(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_setLayerName(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    std::string arg1;       /** layerName */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_string(L, 2, &arg1);

    // void setLayerName(const std::string &layerName)
    self->setLayerName(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_setLayerOrientation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    int arg1 = 0;       /** orientation */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_integer(L, 2, &arg1);

    // void setLayerOrientation(int orientation)
    self->setLayerOrientation(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_setLayerSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    cocos2d::Size *arg1;       /** size */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setLayerSize(const cocos2d::Size &size)
    self->setLayerSize(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_setMapTileSize(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    cocos2d::Size *arg1;       /** size */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Size");

    // void setMapTileSize(const cocos2d::Size &size)
    self->setMapTileSize(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_setProperties(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    cocos2d::ValueMap arg1;       /** properties */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_cocos2d_ValueMap(L, 2, &arg1);

    // void setProperties(const cocos2d::ValueMap &properties)
    self->setProperties(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_setTileGID$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    int arg1 = 0;       /** gid */
    cocos2d::Vec2 *arg2;       /** tileCoordinate */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_integer(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Vec2");

    // void setTileGID(int gid, const cocos2d::Vec2 &tileCoordinate)
    self->setTileGID(arg1, *arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_setTileGID$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    int arg1 = 0;       /** gid */
    cocos2d::Vec2 *arg2;       /** tileCoordinate */
    cocos2d::TMXTileFlags arg3 = (cocos2d::TMXTileFlags)0;       /** flags */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_integer(L, 2, &arg1);
    olua_check_object(L, 3, &arg2, "cc.Vec2");
    olua_check_enum(L, 4, &arg3);

    // void setTileGID(int gid, const cocos2d::Vec2 &tileCoordinate, cocos2d::TMXTileFlags flags)
    self->setTileGID(arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_setTileGID(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.FastTMXLayer")) && (olua_is_integer(L, 2)) && (olua_is_object(L, 3, "cc.Vec2"))) {
            // void setTileGID(int gid, const cocos2d::Vec2 &tileCoordinate)
            return _olua_fun_cocos2d_FastTMXLayer_setTileGID$1(L);
        // }
    }

    if (num_args == 4) {
        // if ((olua_is_object(L, 1, "cc.FastTMXLayer")) && (olua_is_integer(L, 2)) && (olua_is_object(L, 3, "cc.Vec2")) && (olua_is_enum(L, 4))) {
            // void setTileGID(int gid, const cocos2d::Vec2 &tileCoordinate, cocos2d::TMXTileFlags flags)
            return _olua_fun_cocos2d_FastTMXLayer_setTileGID$2(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::FastTMXLayer::setTileGID' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_setTileSet(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    cocos2d::TMXTilesetInfo *arg1 = nullptr;       /** info */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_object(L, 2, &arg1, "cc.TMXTilesetInfo");

    // void setTileSet(cocos2d::TMXTilesetInfo *info)
    self->setTileSet(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_setTiles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    uint32_t *arg1 = nullptr;       /** tiles */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_pointer(L, 2, &arg1, "olua.uint32");

    // void setTiles(uint32_t *tiles)
    self->setTiles(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_setupTileSprite(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;
    cocos2d::Sprite *arg1 = nullptr;       /** sprite */
    cocos2d::Vec2 *arg2;       /** pos */
    uint32_t arg3 = 0;       /** gid */

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");
    olua_check_object(L, 2, &arg1, "cc.Sprite");
    olua_check_object(L, 3, &arg2, "cc.Vec2");
    olua_check_integer(L, 4, &arg3);

    // void setupTileSprite(cocos2d::Sprite *sprite, const cocos2d::Vec2 &pos, uint32_t gid)
    self->setupTileSprite(arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_FastTMXLayer_setupTiles(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::FastTMXLayer *self = nullptr;

    olua_to_object(L, 1, &self, "cc.FastTMXLayer");

    // void setupTiles()
    self->setupTiles();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_FastTMXLayer(lua_State *L)
{
    oluacls_class<cocos2d::FastTMXLayer, cocos2d::Node>(L, "cc.FastTMXLayer");
    oluacls_func(L, "create", _olua_fun_cocos2d_FastTMXLayer_create);
    oluacls_func(L, "getLayerName", _olua_fun_cocos2d_FastTMXLayer_getLayerName);
    oluacls_func(L, "getLayerOrientation", _olua_fun_cocos2d_FastTMXLayer_getLayerOrientation);
    oluacls_func(L, "getLayerSize", _olua_fun_cocos2d_FastTMXLayer_getLayerSize);
    oluacls_func(L, "getMapTileSize", _olua_fun_cocos2d_FastTMXLayer_getMapTileSize);
    oluacls_func(L, "getPositionAt", _olua_fun_cocos2d_FastTMXLayer_getPositionAt);
    oluacls_func(L, "getProperties", _olua_fun_cocos2d_FastTMXLayer_getProperties);
    oluacls_func(L, "getProperty", _olua_fun_cocos2d_FastTMXLayer_getProperty);
    oluacls_func(L, "getTileAt", _olua_fun_cocos2d_FastTMXLayer_getTileAt);
    oluacls_func(L, "getTileGIDAt", _olua_fun_cocos2d_FastTMXLayer_getTileGIDAt);
    oluacls_func(L, "getTileSet", _olua_fun_cocos2d_FastTMXLayer_getTileSet);
    oluacls_func(L, "getTiles", _olua_fun_cocos2d_FastTMXLayer_getTiles);
    oluacls_func(L, "new", _olua_fun_cocos2d_FastTMXLayer_new);
    oluacls_func(L, "removeTileAt", _olua_fun_cocos2d_FastTMXLayer_removeTileAt);
    oluacls_func(L, "setLayerName", _olua_fun_cocos2d_FastTMXLayer_setLayerName);
    oluacls_func(L, "setLayerOrientation", _olua_fun_cocos2d_FastTMXLayer_setLayerOrientation);
    oluacls_func(L, "setLayerSize", _olua_fun_cocos2d_FastTMXLayer_setLayerSize);
    oluacls_func(L, "setMapTileSize", _olua_fun_cocos2d_FastTMXLayer_setMapTileSize);
    oluacls_func(L, "setProperties", _olua_fun_cocos2d_FastTMXLayer_setProperties);
    oluacls_func(L, "setTileGID", _olua_fun_cocos2d_FastTMXLayer_setTileGID);
    oluacls_func(L, "setTileSet", _olua_fun_cocos2d_FastTMXLayer_setTileSet);
    oluacls_func(L, "setTiles", _olua_fun_cocos2d_FastTMXLayer_setTiles);
    oluacls_func(L, "setupTileSprite", _olua_fun_cocos2d_FastTMXLayer_setupTileSprite);
    oluacls_func(L, "setupTiles", _olua_fun_cocos2d_FastTMXLayer_setupTiles);
    oluacls_prop(L, "layerName", _olua_fun_cocos2d_FastTMXLayer_getLayerName, _olua_fun_cocos2d_FastTMXLayer_setLayerName);
    oluacls_prop(L, "layerOrientation", _olua_fun_cocos2d_FastTMXLayer_getLayerOrientation, _olua_fun_cocos2d_FastTMXLayer_setLayerOrientation);
    oluacls_prop(L, "layerSize", _olua_fun_cocos2d_FastTMXLayer_getLayerSize, _olua_fun_cocos2d_FastTMXLayer_setLayerSize);
    oluacls_prop(L, "mapTileSize", _olua_fun_cocos2d_FastTMXLayer_getMapTileSize, _olua_fun_cocos2d_FastTMXLayer_setMapTileSize);
    oluacls_prop(L, "properties", _olua_fun_cocos2d_FastTMXLayer_getProperties, _olua_fun_cocos2d_FastTMXLayer_setProperties);
    oluacls_prop(L, "tileSet", _olua_fun_cocos2d_FastTMXLayer_getTileSet, _olua_fun_cocos2d_FastTMXLayer_setTileSet);
    oluacls_prop(L, "tiles", _olua_fun_cocos2d_FastTMXLayer_getTiles, _olua_fun_cocos2d_FastTMXLayer_setTiles);
    oluacls_const(L, "FAST_TMX_ORIENTATION_HEX", cocos2d::FastTMXLayer::FAST_TMX_ORIENTATION_HEX);
    oluacls_const(L, "FAST_TMX_ORIENTATION_ISO", cocos2d::FastTMXLayer::FAST_TMX_ORIENTATION_ISO);
    oluacls_const(L, "FAST_TMX_ORIENTATION_ORTHO", cocos2d::FastTMXLayer::FAST_TMX_ORIENTATION_ORTHO);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_FastTMXLayer(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.FastTMXLayer")) {
        luaL_error(L, "class not found: cocos2d::FastTMXLayer");
    }
    return 1;
}
OLUA_END_DECLS

#if CC_USE_NAVMESH
static int _olua_cls_cc_NavMeshAgent_NavMeshAgentSyncFlag(lua_State *L)
{
    oluacls_class<cocos2d::NavMeshAgent::NavMeshAgentSyncFlag>(L, "cc.NavMeshAgent.NavMeshAgentSyncFlag");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "AGENT_TO_NODE", (lua_Integer)cocos2d::NavMeshAgent::NavMeshAgentSyncFlag::AGENT_TO_NODE);
    oluacls_enum(L, "NODE_AND_NODE", (lua_Integer)cocos2d::NavMeshAgent::NavMeshAgentSyncFlag::NODE_AND_NODE);
    oluacls_enum(L, "NODE_TO_AGENT", (lua_Integer)cocos2d::NavMeshAgent::NavMeshAgentSyncFlag::NODE_TO_AGENT);
    oluacls_enum(L, "NONE", (lua_Integer)cocos2d::NavMeshAgent::NavMeshAgentSyncFlag::NONE);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_NavMeshAgent_NavMeshAgentSyncFlag(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.NavMeshAgent.NavMeshAgentSyncFlag")) {
        luaL_error(L, "class not found: cocos2d::NavMeshAgent::NavMeshAgentSyncFlag");
    }
    return 1;
}
OLUA_END_DECLS
#endif

#if CC_USE_NAVMESH
static int _olua_fun_cocos2d_NavMeshAgent_completeOffMeshLink(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // void completeOffMeshLink()
    self->completeOffMeshLink();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_create(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgentParam *arg1;       /** param */

    olua_check_object(L, 1, &arg1, "cc.NavMeshAgentParam");

    // static cocos2d::NavMeshAgent *create(const cocos2d::NavMeshAgentParam &param)
    cocos2d::NavMeshAgent *ret = cocos2d::NavMeshAgent::create(*arg1);
    int num_ret = olua_push_object(L, ret, "cc.NavMeshAgent");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_getCurrentOffMeshLinkData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // cocos2d::OffMeshLinkData getCurrentOffMeshLinkData()
    cocos2d::OffMeshLinkData ret = self->getCurrentOffMeshLinkData();
    int num_ret = olua_copy_object(L, ret, "cc.OffMeshLinkData");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_getCurrentVelocity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // cocos2d::Vec3 getCurrentVelocity()
    cocos2d::Vec3 ret = self->getCurrentVelocity();
    int num_ret = olua_copy_object(L, ret, "cc.Vec3");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_getHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // float getHeight()
    float ret = self->getHeight();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_getMaxAcceleration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // float getMaxAcceleration()
    float ret = self->getMaxAcceleration();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_getMaxSpeed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // float getMaxSpeed()
    float ret = self->getMaxSpeed();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_getNavMeshAgentComponentName(lua_State *L)
{
    olua_startinvoke(L);

    // static const std::string &getNavMeshAgentComponentName()
    const std::string &ret = cocos2d::NavMeshAgent::getNavMeshAgentComponentName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_getObstacleAvoidanceType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // unsigned char getObstacleAvoidanceType()
    unsigned char ret = self->getObstacleAvoidanceType();
    int num_ret = olua_push_integer(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_getRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // float getRadius()
    float ret = self->getRadius();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_getSeparationWeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // float getSeparationWeight()
    float ret = self->getSeparationWeight();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_getSyncFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // cocos2d::NavMeshAgent::NavMeshAgentSyncFlag getSyncFlag()
    cocos2d::NavMeshAgent::NavMeshAgentSyncFlag ret = self->getSyncFlag();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_getUserData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // void *getUserData()
    void *ret = self->getUserData();
    int num_ret = olua_push_object(L, ret, "void *");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_getVelocity(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // cocos2d::Vec3 getVelocity()
    cocos2d::Vec3 ret = self->getVelocity();
    int num_ret = olua_copy_object(L, ret, "cc.Vec3");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_isOnOffMeshLink(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // bool isOnOffMeshLink()
    bool ret = self->isOnOffMeshLink();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_move$1(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    cocos2d::Vec3 *arg1;       /** destination */
    std::function<void (cocos2d::NavMeshAgent *, float)> arg2;       /** callback */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_object(L, 2, &arg1, "cc.Vec3");
    olua_check_callback(L, 3, &arg2, "std.function");

    void *cb_store = (void *)self;
    std::string cb_tag = "move";
    std::string cb_name;
    if (olua_isfunction(L, 3)) {
        cb_name = olua_setcallback(L, cb_store, 3, cb_tag.c_str(), OLUA_TAG_REPLACE);
        olua_Context cb_ctx = olua_context(L);
        // lua_State *ML = olua_mainthread(L);
        arg2 = [cb_store, cb_name, cb_ctx /*, ML */](cocos2d::NavMeshAgent *cb_arg1, float cb_arg2) {
            lua_State *L = olua_mainthread(NULL);
            olua_checkhostthread();

            if (olua_contextequal(L, cb_ctx)) {
                int top = lua_gettop(L);
                size_t last = olua_push_objpool(L);
                olua_enable_objpool(L);
                olua_push_object(L, cb_arg1, "cc.NavMeshAgent");
                olua_push_number(L, cb_arg2);
                olua_disable_objpool(L);

                olua_callback(L, cb_store, cb_name.c_str(), 2);

                //pop stack value
                olua_pop_objpool(L, last);
                lua_settop(L, top);
            }
        };
    } else {
        olua_removecallback(L, cb_store, cb_tag.c_str(), OLUA_TAG_EQUAL);
        arg2 = nullptr;
    }

    // void move(const cocos2d::Vec3 &destination, @optional const std::function<void (cocos2d::NavMeshAgent *, float)> &callback)
    self->move(*arg1, arg2);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_move$2(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    cocos2d::Vec3 *arg1;       /** destination */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_object(L, 2, &arg1, "cc.Vec3");

    // void move(const cocos2d::Vec3 &destination)
    self->move(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_move(lua_State *L)
{
    int num_args = lua_gettop(L);

    if (num_args == 2) {
        // if ((olua_is_object(L, 1, "cc.NavMeshAgent")) && (olua_is_object(L, 2, "cc.Vec3"))) {
            // void move(const cocos2d::Vec3 &destination)
            return _olua_fun_cocos2d_NavMeshAgent_move$2(L);
        // }
    }

    if (num_args == 3) {
        // if ((olua_is_object(L, 1, "cc.NavMeshAgent")) && (olua_is_object(L, 2, "cc.Vec3")) && (olua_is_callback(L, 3, "std.function"))) {
            // void move(const cocos2d::Vec3 &destination, @optional const std::function<void (cocos2d::NavMeshAgent *, float)> &callback)
            return _olua_fun_cocos2d_NavMeshAgent_move$1(L);
        // }
    }

    luaL_error(L, "method 'cocos2d::NavMeshAgent::move' not support '%d' arguments", num_args);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::NavMeshAgent()
    cocos2d::NavMeshAgent *ret = new cocos2d::NavMeshAgent();
    int num_ret = olua_push_object(L, ret, "cc.NavMeshAgent");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshAgent_pause(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // void pause()
    self->pause();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_resume(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // void resume()
    self->resume();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_setAutoOrientation(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    bool arg1 = false;       /** isAuto */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_bool(L, 2, &arg1);

    // void setAutoOrientation(bool isAuto)
    self->setAutoOrientation(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_setAutoTraverseOffMeshLink(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    bool arg1 = false;       /** isAuto */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_bool(L, 2, &arg1);

    // void setAutoTraverseOffMeshLink(bool isAuto)
    self->setAutoTraverseOffMeshLink(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_setHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    float arg1 = 0;       /** height */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_number(L, 2, &arg1);

    // void setHeight(float height)
    self->setHeight(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_setMaxAcceleration(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    float arg1 = 0;       /** maxAcceleration */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_number(L, 2, &arg1);

    // void setMaxAcceleration(float maxAcceleration)
    self->setMaxAcceleration(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_setMaxSpeed(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    float arg1 = 0;       /** maxSpeed */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_number(L, 2, &arg1);

    // void setMaxSpeed(float maxSpeed)
    self->setMaxSpeed(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_setObstacleAvoidanceType(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    unsigned char arg1 = 0;       /** type */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_integer(L, 2, &arg1);

    // void setObstacleAvoidanceType(unsigned char type)
    self->setObstacleAvoidanceType(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_setOrientationRefAxes(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    cocos2d::Vec3 *arg1;       /** rotRefAxes */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_object(L, 2, &arg1, "cc.Vec3");

    // void setOrientationRefAxes(const cocos2d::Vec3 &rotRefAxes)
    self->setOrientationRefAxes(*arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_setRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    float arg1 = 0;       /** radius */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_number(L, 2, &arg1);

    // void setRadius(float radius)
    self->setRadius(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_setSeparationWeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    float arg1 = 0;       /** weight */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_number(L, 2, &arg1);

    // void setSeparationWeight(float weight)
    self->setSeparationWeight(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_setSyncFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    cocos2d::NavMeshAgent::NavMeshAgentSyncFlag arg1 = (cocos2d::NavMeshAgent::NavMeshAgentSyncFlag)0;       /** flag */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_enum(L, 2, &arg1);

    // void setSyncFlag(const cocos2d::NavMeshAgent::NavMeshAgentSyncFlag &flag)
    self->setSyncFlag(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_setUserData(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;
    void *arg1 = nullptr;       /** data */

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");
    olua_check_object(L, 2, &arg1, "void *");

    // void setUserData(void *data)
    self->setUserData(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_stop(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // void stop()
    self->stop();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_syncToAgent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // void syncToAgent()
    self->syncToAgent();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshAgent_syncToNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshAgent *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshAgent");

    // void syncToNode()
    self->syncToNode();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_NavMeshAgent(lua_State *L)
{
    oluacls_class<cocos2d::NavMeshAgent, cocos2d::Component>(L, "cc.NavMeshAgent");
    oluacls_func(L, "completeOffMeshLink", _olua_fun_cocos2d_NavMeshAgent_completeOffMeshLink);
    oluacls_func(L, "create", _olua_fun_cocos2d_NavMeshAgent_create);
    oluacls_func(L, "getCurrentOffMeshLinkData", _olua_fun_cocos2d_NavMeshAgent_getCurrentOffMeshLinkData);
    oluacls_func(L, "getCurrentVelocity", _olua_fun_cocos2d_NavMeshAgent_getCurrentVelocity);
    oluacls_func(L, "getHeight", _olua_fun_cocos2d_NavMeshAgent_getHeight);
    oluacls_func(L, "getMaxAcceleration", _olua_fun_cocos2d_NavMeshAgent_getMaxAcceleration);
    oluacls_func(L, "getMaxSpeed", _olua_fun_cocos2d_NavMeshAgent_getMaxSpeed);
    oluacls_func(L, "getNavMeshAgentComponentName", _olua_fun_cocos2d_NavMeshAgent_getNavMeshAgentComponentName);
    oluacls_func(L, "getObstacleAvoidanceType", _olua_fun_cocos2d_NavMeshAgent_getObstacleAvoidanceType);
    oluacls_func(L, "getRadius", _olua_fun_cocos2d_NavMeshAgent_getRadius);
    oluacls_func(L, "getSeparationWeight", _olua_fun_cocos2d_NavMeshAgent_getSeparationWeight);
    oluacls_func(L, "getSyncFlag", _olua_fun_cocos2d_NavMeshAgent_getSyncFlag);
    oluacls_func(L, "getUserData", _olua_fun_cocos2d_NavMeshAgent_getUserData);
    oluacls_func(L, "getVelocity", _olua_fun_cocos2d_NavMeshAgent_getVelocity);
    oluacls_func(L, "isOnOffMeshLink", _olua_fun_cocos2d_NavMeshAgent_isOnOffMeshLink);
    oluacls_func(L, "move", _olua_fun_cocos2d_NavMeshAgent_move);
    oluacls_func(L, "new", _olua_fun_cocos2d_NavMeshAgent_new);
    oluacls_func(L, "pause", _olua_fun_cocos2d_NavMeshAgent_pause);
    oluacls_func(L, "resume", _olua_fun_cocos2d_NavMeshAgent_resume);
    oluacls_func(L, "setAutoOrientation", _olua_fun_cocos2d_NavMeshAgent_setAutoOrientation);
    oluacls_func(L, "setAutoTraverseOffMeshLink", _olua_fun_cocos2d_NavMeshAgent_setAutoTraverseOffMeshLink);
    oluacls_func(L, "setHeight", _olua_fun_cocos2d_NavMeshAgent_setHeight);
    oluacls_func(L, "setMaxAcceleration", _olua_fun_cocos2d_NavMeshAgent_setMaxAcceleration);
    oluacls_func(L, "setMaxSpeed", _olua_fun_cocos2d_NavMeshAgent_setMaxSpeed);
    oluacls_func(L, "setObstacleAvoidanceType", _olua_fun_cocos2d_NavMeshAgent_setObstacleAvoidanceType);
    oluacls_func(L, "setOrientationRefAxes", _olua_fun_cocos2d_NavMeshAgent_setOrientationRefAxes);
    oluacls_func(L, "setRadius", _olua_fun_cocos2d_NavMeshAgent_setRadius);
    oluacls_func(L, "setSeparationWeight", _olua_fun_cocos2d_NavMeshAgent_setSeparationWeight);
    oluacls_func(L, "setSyncFlag", _olua_fun_cocos2d_NavMeshAgent_setSyncFlag);
    oluacls_func(L, "setUserData", _olua_fun_cocos2d_NavMeshAgent_setUserData);
    oluacls_func(L, "stop", _olua_fun_cocos2d_NavMeshAgent_stop);
    oluacls_func(L, "syncToAgent", _olua_fun_cocos2d_NavMeshAgent_syncToAgent);
    oluacls_func(L, "syncToNode", _olua_fun_cocos2d_NavMeshAgent_syncToNode);
    oluacls_prop(L, "currentOffMeshLinkData", _olua_fun_cocos2d_NavMeshAgent_getCurrentOffMeshLinkData, nullptr);
    oluacls_prop(L, "currentVelocity", _olua_fun_cocos2d_NavMeshAgent_getCurrentVelocity, nullptr);
    oluacls_prop(L, "height", _olua_fun_cocos2d_NavMeshAgent_getHeight, _olua_fun_cocos2d_NavMeshAgent_setHeight);
    oluacls_prop(L, "maxAcceleration", _olua_fun_cocos2d_NavMeshAgent_getMaxAcceleration, _olua_fun_cocos2d_NavMeshAgent_setMaxAcceleration);
    oluacls_prop(L, "maxSpeed", _olua_fun_cocos2d_NavMeshAgent_getMaxSpeed, _olua_fun_cocos2d_NavMeshAgent_setMaxSpeed);
    oluacls_prop(L, "navMeshAgentComponentName", _olua_fun_cocos2d_NavMeshAgent_getNavMeshAgentComponentName, nullptr);
    oluacls_prop(L, "obstacleAvoidanceType", _olua_fun_cocos2d_NavMeshAgent_getObstacleAvoidanceType, _olua_fun_cocos2d_NavMeshAgent_setObstacleAvoidanceType);
    oluacls_prop(L, "onOffMeshLink", _olua_fun_cocos2d_NavMeshAgent_isOnOffMeshLink, nullptr);
    oluacls_prop(L, "radius", _olua_fun_cocos2d_NavMeshAgent_getRadius, _olua_fun_cocos2d_NavMeshAgent_setRadius);
    oluacls_prop(L, "separationWeight", _olua_fun_cocos2d_NavMeshAgent_getSeparationWeight, _olua_fun_cocos2d_NavMeshAgent_setSeparationWeight);
    oluacls_prop(L, "syncFlag", _olua_fun_cocos2d_NavMeshAgent_getSyncFlag, _olua_fun_cocos2d_NavMeshAgent_setSyncFlag);
    oluacls_prop(L, "userData", _olua_fun_cocos2d_NavMeshAgent_getUserData, _olua_fun_cocos2d_NavMeshAgent_setUserData);
    oluacls_prop(L, "velocity", _olua_fun_cocos2d_NavMeshAgent_getVelocity, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_NavMeshAgent(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.NavMeshAgent")) {
        luaL_error(L, "class not found: cocos2d::NavMeshAgent");
    }
    return 1;
}
OLUA_END_DECLS
#endif

#if CC_USE_NAVMESH
static int _olua_cls_cc_NavMeshObstacle_NavMeshObstacleSyncFlag(lua_State *L)
{
    oluacls_class<cocos2d::NavMeshObstacle::NavMeshObstacleSyncFlag>(L, "cc.NavMeshObstacle.NavMeshObstacleSyncFlag");
    oluacls_func(L, "__index", olua_indexerror);
    oluacls_func(L, "__newindex", olua_newindexerror);
    oluacls_enum(L, "NODE_AND_NODE", (lua_Integer)cocos2d::NavMeshObstacle::NavMeshObstacleSyncFlag::NODE_AND_NODE);
    oluacls_enum(L, "NODE_TO_OBSTACLE", (lua_Integer)cocos2d::NavMeshObstacle::NavMeshObstacleSyncFlag::NODE_TO_OBSTACLE);
    oluacls_enum(L, "NONE", (lua_Integer)cocos2d::NavMeshObstacle::NavMeshObstacleSyncFlag::NONE);
    oluacls_enum(L, "OBSTACLE_TO_NODE", (lua_Integer)cocos2d::NavMeshObstacle::NavMeshObstacleSyncFlag::OBSTACLE_TO_NODE);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_NavMeshObstacle_NavMeshObstacleSyncFlag(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.NavMeshObstacle.NavMeshObstacleSyncFlag")) {
        luaL_error(L, "class not found: cocos2d::NavMeshObstacle::NavMeshObstacleSyncFlag");
    }
    return 1;
}
OLUA_END_DECLS
#endif

#if CC_USE_NAVMESH
static int _olua_fun_cocos2d_NavMeshObstacle_create(lua_State *L)
{
    olua_startinvoke(L);

    float arg1 = 0;       /** radius */
    float arg2 = 0;       /** height */

    olua_check_number(L, 1, &arg1);
    olua_check_number(L, 2, &arg2);

    // static cocos2d::NavMeshObstacle *create(float radius, float height)
    cocos2d::NavMeshObstacle *ret = cocos2d::NavMeshObstacle::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.NavMeshObstacle");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshObstacle_getHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshObstacle *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshObstacle");

    // float getHeight()
    float ret = self->getHeight();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshObstacle_getNavMeshObstacleComponentName(lua_State *L)
{
    olua_startinvoke(L);

    // static const std::string &getNavMeshObstacleComponentName()
    const std::string &ret = cocos2d::NavMeshObstacle::getNavMeshObstacleComponentName();
    int num_ret = olua_push_string(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshObstacle_getRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshObstacle *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshObstacle");

    // float getRadius()
    float ret = self->getRadius();
    int num_ret = olua_push_number(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshObstacle_getSyncFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshObstacle *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshObstacle");

    // cocos2d::NavMeshObstacle::NavMeshObstacleSyncFlag getSyncFlag()
    cocos2d::NavMeshObstacle::NavMeshObstacleSyncFlag ret = self->getSyncFlag();
    int num_ret = olua_push_enum(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshObstacle_initWith(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshObstacle *self = nullptr;
    float arg1 = 0;       /** radius */
    float arg2 = 0;       /** height */

    olua_to_object(L, 1, &self, "cc.NavMeshObstacle");
    olua_check_number(L, 2, &arg1);
    olua_check_number(L, 3, &arg2);

    // bool initWith(float radius, float height)
    bool ret = self->initWith(arg1, arg2);
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshObstacle_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::NavMeshObstacle()
    cocos2d::NavMeshObstacle *ret = new cocos2d::NavMeshObstacle();
    int num_ret = olua_push_object(L, ret, "cc.NavMeshObstacle");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMeshObstacle_setHeight(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshObstacle *self = nullptr;
    float arg1 = 0;       /** height */

    olua_to_object(L, 1, &self, "cc.NavMeshObstacle");
    olua_check_number(L, 2, &arg1);

    // void setHeight(float height)
    self->setHeight(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshObstacle_setRadius(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshObstacle *self = nullptr;
    float arg1 = 0;       /** radius */

    olua_to_object(L, 1, &self, "cc.NavMeshObstacle");
    olua_check_number(L, 2, &arg1);

    // void setRadius(float radius)
    self->setRadius(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshObstacle_setSyncFlag(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshObstacle *self = nullptr;
    cocos2d::NavMeshObstacle::NavMeshObstacleSyncFlag arg1 = (cocos2d::NavMeshObstacle::NavMeshObstacleSyncFlag)0;       /** flag */

    olua_to_object(L, 1, &self, "cc.NavMeshObstacle");
    olua_check_enum(L, 2, &arg1);

    // void setSyncFlag(const cocos2d::NavMeshObstacle::NavMeshObstacleSyncFlag &flag)
    self->setSyncFlag(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshObstacle_syncToNode(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshObstacle *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshObstacle");

    // void syncToNode()
    self->syncToNode();

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMeshObstacle_syncToObstacle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMeshObstacle *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMeshObstacle");

    // void syncToObstacle()
    self->syncToObstacle();

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_NavMeshObstacle(lua_State *L)
{
    oluacls_class<cocos2d::NavMeshObstacle, cocos2d::Component>(L, "cc.NavMeshObstacle");
    oluacls_func(L, "create", _olua_fun_cocos2d_NavMeshObstacle_create);
    oluacls_func(L, "getHeight", _olua_fun_cocos2d_NavMeshObstacle_getHeight);
    oluacls_func(L, "getNavMeshObstacleComponentName", _olua_fun_cocos2d_NavMeshObstacle_getNavMeshObstacleComponentName);
    oluacls_func(L, "getRadius", _olua_fun_cocos2d_NavMeshObstacle_getRadius);
    oluacls_func(L, "getSyncFlag", _olua_fun_cocos2d_NavMeshObstacle_getSyncFlag);
    oluacls_func(L, "initWith", _olua_fun_cocos2d_NavMeshObstacle_initWith);
    oluacls_func(L, "new", _olua_fun_cocos2d_NavMeshObstacle_new);
    oluacls_func(L, "setHeight", _olua_fun_cocos2d_NavMeshObstacle_setHeight);
    oluacls_func(L, "setRadius", _olua_fun_cocos2d_NavMeshObstacle_setRadius);
    oluacls_func(L, "setSyncFlag", _olua_fun_cocos2d_NavMeshObstacle_setSyncFlag);
    oluacls_func(L, "syncToNode", _olua_fun_cocos2d_NavMeshObstacle_syncToNode);
    oluacls_func(L, "syncToObstacle", _olua_fun_cocos2d_NavMeshObstacle_syncToObstacle);
    oluacls_prop(L, "height", _olua_fun_cocos2d_NavMeshObstacle_getHeight, _olua_fun_cocos2d_NavMeshObstacle_setHeight);
    oluacls_prop(L, "navMeshObstacleComponentName", _olua_fun_cocos2d_NavMeshObstacle_getNavMeshObstacleComponentName, nullptr);
    oluacls_prop(L, "radius", _olua_fun_cocos2d_NavMeshObstacle_getRadius, _olua_fun_cocos2d_NavMeshObstacle_setRadius);
    oluacls_prop(L, "syncFlag", _olua_fun_cocos2d_NavMeshObstacle_getSyncFlag, _olua_fun_cocos2d_NavMeshObstacle_setSyncFlag);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_NavMeshObstacle(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.NavMeshObstacle")) {
        luaL_error(L, "class not found: cocos2d::NavMeshObstacle");
    }
    return 1;
}
OLUA_END_DECLS
#endif

#if CC_USE_NAVMESH
static int _olua_fun_cocos2d_NavMesh_addNavMeshAgent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMesh *self = nullptr;
    cocos2d::NavMeshAgent *arg1 = nullptr;       /** agent */

    olua_to_object(L, 1, &self, "cc.NavMesh");
    olua_check_object(L, 2, &arg1, "cc.NavMeshAgent");

    // void addNavMeshAgent(cocos2d::NavMeshAgent *agent)
    self->addNavMeshAgent(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMesh_addNavMeshObstacle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMesh *self = nullptr;
    cocos2d::NavMeshObstacle *arg1 = nullptr;       /** obstacle */

    olua_to_object(L, 1, &self, "cc.NavMesh");
    olua_check_object(L, 2, &arg1, "cc.NavMeshObstacle");

    // void addNavMeshObstacle(cocos2d::NavMeshObstacle *obstacle)
    self->addNavMeshObstacle(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMesh_create(lua_State *L)
{
    olua_startinvoke(L);

    std::string arg1;       /** navFilePath */
    std::string arg2;       /** geomFilePath */

    olua_check_string(L, 1, &arg1);
    olua_check_string(L, 2, &arg2);

    // static cocos2d::NavMesh *create(const std::string &navFilePath, const std::string &geomFilePath)
    cocos2d::NavMesh *ret = cocos2d::NavMesh::create(arg1, arg2);
    int num_ret = olua_push_object(L, ret, "cc.NavMesh");

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMesh_debugDraw(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMesh *self = nullptr;
    cocos2d::Renderer *arg1 = nullptr;       /** renderer */

    olua_to_object(L, 1, &self, "cc.NavMesh");
    olua_check_object(L, 2, &arg1, "cc.Renderer");

    // void debugDraw(cocos2d::Renderer *renderer)
    self->debugDraw(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMesh_findPath(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMesh *self = nullptr;
    cocos2d::Vec3 *arg1;       /** start */
    cocos2d::Vec3 *arg2;       /** end_ */
    std::vector<cocos2d::Vec3> arg3;       /** pathPoints */

    olua_to_object(L, 1, &self, "cc.NavMesh");
    olua_check_object(L, 2, &arg1, "cc.Vec3");
    olua_check_object(L, 3, &arg2, "cc.Vec3");
    olua_check_array<cocos2d::Vec3>(L, 4, arg3, [L](cocos2d::Vec3 *arg1) {
        olua_check_object(L, -1, arg1, "cc.Vec3");
    });

    // void findPath(const cocos2d::Vec3 &start, const cocos2d::Vec3 &end_, std::vector<cocos2d::Vec3> &pathPoints)
    self->findPath(*arg1, *arg2, arg3);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMesh_isDebugDrawEnabled(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMesh *self = nullptr;

    olua_to_object(L, 1, &self, "cc.NavMesh");

    // bool isDebugDrawEnabled()
    bool ret = self->isDebugDrawEnabled();
    int num_ret = olua_push_bool(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMesh_new(lua_State *L)
{
    olua_startinvoke(L);

    // cocos2d::NavMesh()
    cocos2d::NavMesh *ret = new cocos2d::NavMesh();
    int num_ret = olua_push_object(L, ret, "cc.NavMesh");
    olua_postnew(L, ret);

    olua_endinvoke(L);

    return num_ret;
}

static int _olua_fun_cocos2d_NavMesh_removeNavMeshAgent(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMesh *self = nullptr;
    cocos2d::NavMeshAgent *arg1 = nullptr;       /** agent */

    olua_to_object(L, 1, &self, "cc.NavMesh");
    olua_check_object(L, 2, &arg1, "cc.NavMeshAgent");

    // void removeNavMeshAgent(cocos2d::NavMeshAgent *agent)
    self->removeNavMeshAgent(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMesh_removeNavMeshObstacle(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMesh *self = nullptr;
    cocos2d::NavMeshObstacle *arg1 = nullptr;       /** obstacle */

    olua_to_object(L, 1, &self, "cc.NavMesh");
    olua_check_object(L, 2, &arg1, "cc.NavMeshObstacle");

    // void removeNavMeshObstacle(cocos2d::NavMeshObstacle *obstacle)
    self->removeNavMeshObstacle(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMesh_setDebugDrawEnable(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMesh *self = nullptr;
    bool arg1 = false;       /** enable */

    olua_to_object(L, 1, &self, "cc.NavMesh");
    olua_check_bool(L, 2, &arg1);

    // void setDebugDrawEnable(bool enable)
    self->setDebugDrawEnable(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_fun_cocos2d_NavMesh_update(lua_State *L)
{
    olua_startinvoke(L);

    cocos2d::NavMesh *self = nullptr;
    float arg1 = 0;       /** dt */

    olua_to_object(L, 1, &self, "cc.NavMesh");
    olua_check_number(L, 2, &arg1);

    // void update(float dt)
    self->update(arg1);

    olua_endinvoke(L);

    return 0;
}

static int _olua_cls_cc_NavMesh(lua_State *L)
{
    oluacls_class<cocos2d::NavMesh, cocos2d::Ref>(L, "cc.NavMesh");
    oluacls_func(L, "addNavMeshAgent", _olua_fun_cocos2d_NavMesh_addNavMeshAgent);
    oluacls_func(L, "addNavMeshObstacle", _olua_fun_cocos2d_NavMesh_addNavMeshObstacle);
    oluacls_func(L, "create", _olua_fun_cocos2d_NavMesh_create);
    oluacls_func(L, "debugDraw", _olua_fun_cocos2d_NavMesh_debugDraw);
    oluacls_func(L, "findPath", _olua_fun_cocos2d_NavMesh_findPath);
    oluacls_func(L, "isDebugDrawEnabled", _olua_fun_cocos2d_NavMesh_isDebugDrawEnabled);
    oluacls_func(L, "new", _olua_fun_cocos2d_NavMesh_new);
    oluacls_func(L, "removeNavMeshAgent", _olua_fun_cocos2d_NavMesh_removeNavMeshAgent);
    oluacls_func(L, "removeNavMeshObstacle", _olua_fun_cocos2d_NavMesh_removeNavMeshObstacle);
    oluacls_func(L, "setDebugDrawEnable", _olua_fun_cocos2d_NavMesh_setDebugDrawEnable);
    oluacls_func(L, "update", _olua_fun_cocos2d_NavMesh_update);
    oluacls_prop(L, "debugDrawEnabled", _olua_fun_cocos2d_NavMesh_isDebugDrawEnabled, nullptr);

    return 1;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cc_NavMesh(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);
    if (!olua_getclass(L, "cc.NavMesh")) {
        luaL_error(L, "class not found: cocos2d::NavMesh");
    }
    return 1;
}
OLUA_END_DECLS
#endif

int _olua_module_cocos2d(lua_State *L)
{
    olua_require(L, "cc.RenderTargetFlag", _olua_cls_cc_RenderTargetFlag);
    olua_require(L, "cc.ClearFlag", _olua_cls_cc_ClearFlag);
    olua_require(L, "cc.MATRIX_STACK_TYPE", _olua_cls_cc_MATRIX_STACK_TYPE);
    olua_require(L, "cc.Director.Projection", _olua_cls_cc_Director_Projection);
    olua_require(L, "cc.UserDefault", _olua_cls_cc_UserDefault);
    olua_require(L, "cc.Ref", _olua_cls_cc_Ref);
    olua_require(L, "cc.Clonable", _olua_cls_cc_Clonable);
    olua_require(L, "cc.Console", _olua_cls_cc_Console);
    olua_require(L, "cc.Acceleration", _olua_cls_cc_Acceleration);
    olua_require(L, "cc.Director", _olua_cls_cc_Director);
    olua_require(L, "cc.ccSchedulerFunc", _olua_cls_cc_ccSchedulerFunc);
    olua_require(L, "cc.Scheduler", _olua_cls_cc_Scheduler);
    olua_require(L, "cc.EventDispatcher", _olua_cls_cc_EventDispatcher);
    olua_require(L, "cc.EventListener.Type", _olua_cls_cc_EventListener_Type);
    olua_require(L, "cc.EventListener", _olua_cls_cc_EventListener);
    olua_require(L, "cc.EventListenerTouchOneByOne.ccTouchBeganCallback", _olua_cls_cc_EventListenerTouchOneByOne_ccTouchBeganCallback);
    olua_require(L, "cc.EventListenerTouchOneByOne.ccTouchCallback", _olua_cls_cc_EventListenerTouchOneByOne_ccTouchCallback);
    olua_require(L, "cc.EventListenerTouchOneByOne", _olua_cls_cc_EventListenerTouchOneByOne);
    olua_require(L, "cc.EventListenerTouchAllAtOnce.ccTouchesCallback", _olua_cls_cc_EventListenerTouchAllAtOnce_ccTouchesCallback);
    olua_require(L, "cc.EventListenerTouchAllAtOnce", _olua_cls_cc_EventListenerTouchAllAtOnce);
    olua_require(L, "cc.EventListenerCustom", _olua_cls_cc_EventListenerCustom);
    olua_require(L, "cc.EventListenerKeyboard", _olua_cls_cc_EventListenerKeyboard);
    olua_require(L, "cc.EventListenerAcceleration", _olua_cls_cc_EventListenerAcceleration);
    olua_require(L, "cc.EventListenerFocus", _olua_cls_cc_EventListenerFocus);
    olua_require(L, "cc.EventListenerMouse", _olua_cls_cc_EventListenerMouse);
    olua_require(L, "cc.Event.Type", _olua_cls_cc_Event_Type);
    olua_require(L, "cc.Event", _olua_cls_cc_Event);
    olua_require(L, "cc.EventCustom", _olua_cls_cc_EventCustom);
    olua_require(L, "cc.EventListenerController", _olua_cls_cc_EventListenerController);
    olua_require(L, "cc.EventTouch.EventCode", _olua_cls_cc_EventTouch_EventCode);
    olua_require(L, "cc.EventTouch", _olua_cls_cc_EventTouch);
    olua_require(L, "cc.EventKeyboard", _olua_cls_cc_EventKeyboard);
    olua_require(L, "cc.EventAcceleration", _olua_cls_cc_EventAcceleration);
    olua_require(L, "cc.EventFocus", _olua_cls_cc_EventFocus);
    olua_require(L, "cc.EventMouse.MouseEventType", _olua_cls_cc_EventMouse_MouseEventType);
    olua_require(L, "cc.EventMouse.MouseButton", _olua_cls_cc_EventMouse_MouseButton);
    olua_require(L, "cc.EventMouse", _olua_cls_cc_EventMouse);
    olua_require(L, "cc.EventKeyboard.KeyCode", _olua_cls_cc_EventKeyboard_KeyCode);
    olua_require(L, "cc.Touch.DispatchMode", _olua_cls_cc_Touch_DispatchMode);
    olua_require(L, "cc.EventController.ControllerEventType", _olua_cls_cc_EventController_ControllerEventType);
    olua_require(L, "cc.EventController", _olua_cls_cc_EventController);
    olua_require(L, "cc.Touch", _olua_cls_cc_Touch);
    olua_require(L, "cc.Controller.Key", _olua_cls_cc_Controller_Key);
    olua_require(L, "cc.Controller", _olua_cls_cc_Controller);
    olua_require(L, "cc.AudioProfile", _olua_cls_cc_AudioProfile);
    olua_require(L, "cc.AudioEngine.AudioState", _olua_cls_cc_AudioEngine_AudioState);
    olua_require(L, "cc.AudioEngine", _olua_cls_cc_AudioEngine);
    olua_require(L, "cc.ApplicationProtocol.Platform", _olua_cls_cc_ApplicationProtocol_Platform);
    olua_require(L, "cc.LanguageType", _olua_cls_cc_LanguageType);
    olua_require(L, "cc.ApplicationProtocol", _olua_cls_cc_ApplicationProtocol);
    olua_require(L, "cc.Application", _olua_cls_cc_Application);
    olua_require(L, "cc.Device", _olua_cls_cc_Device);
    olua_require(L, "cc.ResizableBuffer", _olua_cls_cc_ResizableBuffer);
    olua_require(L, "cc.FileUtils.Status", _olua_cls_cc_FileUtils_Status);
    olua_require(L, "cc.FileUtils", _olua_cls_cc_FileUtils);
    olua_require(L, "cc.ResolutionPolicy", _olua_cls_cc_ResolutionPolicy);
    olua_require(L, "cc.GLView", _olua_cls_cc_GLView);
    olua_require(L, "cc.GLViewImpl", _olua_cls_cc_GLViewImpl);
    olua_require(L, "cc.Image.Format", _olua_cls_cc_Image_Format);
    olua_require(L, "cc.Image", _olua_cls_cc_Image);
    olua_require(L, "cc.Properties.Type", _olua_cls_cc_Properties_Type);
    olua_require(L, "cc.Properties", _olua_cls_cc_Properties);
    olua_require(L, "cc.Material", _olua_cls_cc_Material);
    olua_require(L, "cc.Renderer", _olua_cls_cc_Renderer);
    olua_require(L, "cc.RenderCommand.Type", _olua_cls_cc_RenderCommand_Type);
    olua_require(L, "cc.CustomCommand.DrawType", _olua_cls_cc_CustomCommand_DrawType);
    olua_require(L, "cc.PipelineDescriptor", _olua_cls_cc_PipelineDescriptor);
    olua_require(L, "cc.Technique", _olua_cls_cc_Technique);
    olua_require(L, "cc.Pass", _olua_cls_cc_Pass);
    olua_require(L, "cc.RenderState", _olua_cls_cc_RenderState);
    olua_require(L, "cc.RenderCommand", _olua_cls_cc_RenderCommand);
    olua_require(L, "cc.CustomCommand", _olua_cls_cc_CustomCommand);
    olua_require(L, "cc.MeshCommand", _olua_cls_cc_MeshCommand);
    olua_require(L, "cc.TextureCache", _olua_cls_cc_TextureCache);
    olua_require(L, "cc.Texture2D", _olua_cls_cc_Texture2D);
    olua_require(L, "cc.TextureCube", _olua_cls_cc_TextureCube);
    olua_require(L, "cc.TextureAtlas", _olua_cls_cc_TextureAtlas);
    olua_require(L, "cc.WebSocket.ErrorCode", _olua_cls_cc_WebSocket_ErrorCode);
    olua_require(L, "cc.WebSocket.State", _olua_cls_cc_WebSocket_State);
    olua_require(L, "cc.WebSocket.Delegate", _olua_cls_cc_WebSocket_Delegate);
    olua_require(L, "cc.WebSocket", _olua_cls_cc_WebSocket);
    olua_require(L, "cc.LuaWebSocketDelegate", _olua_cls_cc_LuaWebSocketDelegate);
    olua_require(L, "cc.ActionManager", _olua_cls_cc_ActionManager);
    olua_require(L, "cc.Component", _olua_cls_cc_Component);
    olua_require(L, "cc.LuaComponent", _olua_cls_cc_LuaComponent);
    olua_require(L, "cc.Node", _olua_cls_cc_Node);
    olua_require(L, "cc.BlendProtocol", _olua_cls_cc_BlendProtocol);
    olua_require(L, "cc.TextureProtocol", _olua_cls_cc_TextureProtocol);
    olua_require(L, "cc.AtlasNode", _olua_cls_cc_AtlasNode);
    olua_require(L, "cc.sImageTGA", _olua_cls_cc_sImageTGA);
    olua_require(L, "cc.TileMapAtlas", _olua_cls_cc_TileMapAtlas);
    olua_require(L, "cc.ClippingNode", _olua_cls_cc_ClippingNode);
    olua_require(L, "cc.MotionStreak", _olua_cls_cc_MotionStreak);
    olua_require(L, "cc.ProtectedNode", _olua_cls_cc_ProtectedNode);
    olua_require(L, "cc.DrawNode", _olua_cls_cc_DrawNode);
    olua_require(L, "cc.ParallaxNode", _olua_cls_cc_ParallaxNode);
    olua_require(L, "cc.TextHAlignment", _olua_cls_cc_TextHAlignment);
    olua_require(L, "cc.TextVAlignment", _olua_cls_cc_TextVAlignment);
    olua_require(L, "cc.GlyphCollection", _olua_cls_cc_GlyphCollection);
    olua_require(L, "cc.LabelEffect", _olua_cls_cc_LabelEffect);
    olua_require(L, "cc.Label.LabelType", _olua_cls_cc_Label_LabelType);
    olua_require(L, "cc.Label.Overflow", _olua_cls_cc_Label_Overflow);
    olua_require(L, "cc.LabelProtocol", _olua_cls_cc_LabelProtocol);
    olua_require(L, "cc.Label", _olua_cls_cc_Label);
    olua_require(L, "cc.LabelAtlas", _olua_cls_cc_LabelAtlas);
    olua_require(L, "cc.FontAtlas", _olua_cls_cc_FontAtlas);
    olua_require(L, "cc.ClippingRectangleNode", _olua_cls_cc_ClippingRectangleNode);
    olua_require(L, "cc.RenderTexture", _olua_cls_cc_RenderTexture);
    olua_require(L, "cc.ProgressTimer.Type", _olua_cls_cc_ProgressTimer_Type);
    olua_require(L, "cc.ProgressTimer", _olua_cls_cc_ProgressTimer);
    olua_require(L, "cc.AnimationFrame", _olua_cls_cc_AnimationFrame);
    olua_require(L, "cc.Animation", _olua_cls_cc_Animation);
    olua_require(L, "cc.SpriteFrame", _olua_cls_cc_SpriteFrame);
    olua_require(L, "cc.Sprite", _olua_cls_cc_Sprite);
    olua_require(L, "cc.SpriteBatchNode", _olua_cls_cc_SpriteBatchNode);
    olua_require(L, "cc.SpriteFrameCache", _olua_cls_cc_SpriteFrameCache);
    olua_require(L, "cc.AnimationCache", _olua_cls_cc_AnimationCache);
    olua_require(L, "cc.Scene", _olua_cls_cc_Scene);
    olua_require(L, "cc.Layer", _olua_cls_cc_Layer);
    olua_require(L, "cc.LayerColor", _olua_cls_cc_LayerColor);
    olua_require(L, "cc.LayerGradient", _olua_cls_cc_LayerGradient);
    olua_require(L, "cc.LayerRadialGradient", _olua_cls_cc_LayerRadialGradient);
    olua_require(L, "cc.LayerMultiplex", _olua_cls_cc_LayerMultiplex);
    olua_require(L, "cc.TransitionScene.Orientation", _olua_cls_cc_TransitionScene_Orientation);
    olua_require(L, "cc.TransitionScene", _olua_cls_cc_TransitionScene);
    olua_require(L, "cc.TransitionEaseScene", _olua_cls_cc_TransitionEaseScene);
    olua_require(L, "cc.TransitionSceneOriented", _olua_cls_cc_TransitionSceneOriented);
    olua_require(L, "cc.TransitionRotoZoom", _olua_cls_cc_TransitionRotoZoom);
    olua_require(L, "cc.TransitionJumpZoom", _olua_cls_cc_TransitionJumpZoom);
    olua_require(L, "cc.TransitionMoveInL", _olua_cls_cc_TransitionMoveInL);
    olua_require(L, "cc.TransitionMoveInR", _olua_cls_cc_TransitionMoveInR);
    olua_require(L, "cc.TransitionMoveInT", _olua_cls_cc_TransitionMoveInT);
    olua_require(L, "cc.TransitionMoveInB", _olua_cls_cc_TransitionMoveInB);
    olua_require(L, "cc.TransitionSlideInL", _olua_cls_cc_TransitionSlideInL);
    olua_require(L, "cc.TransitionSlideInR", _olua_cls_cc_TransitionSlideInR);
    olua_require(L, "cc.TransitionSlideInB", _olua_cls_cc_TransitionSlideInB);
    olua_require(L, "cc.TransitionSlideInT", _olua_cls_cc_TransitionSlideInT);
    olua_require(L, "cc.TransitionShrinkGrow", _olua_cls_cc_TransitionShrinkGrow);
    olua_require(L, "cc.TransitionFlipX", _olua_cls_cc_TransitionFlipX);
    olua_require(L, "cc.TransitionFlipY", _olua_cls_cc_TransitionFlipY);
    olua_require(L, "cc.TransitionFlipAngular", _olua_cls_cc_TransitionFlipAngular);
    olua_require(L, "cc.TransitionZoomFlipX", _olua_cls_cc_TransitionZoomFlipX);
    olua_require(L, "cc.TransitionZoomFlipY", _olua_cls_cc_TransitionZoomFlipY);
    olua_require(L, "cc.TransitionZoomFlipAngular", _olua_cls_cc_TransitionZoomFlipAngular);
    olua_require(L, "cc.TransitionFade", _olua_cls_cc_TransitionFade);
    olua_require(L, "cc.TransitionCrossFade", _olua_cls_cc_TransitionCrossFade);
    olua_require(L, "cc.TransitionTurnOffTiles", _olua_cls_cc_TransitionTurnOffTiles);
    olua_require(L, "cc.TransitionSplitCols", _olua_cls_cc_TransitionSplitCols);
    olua_require(L, "cc.TransitionSplitRows", _olua_cls_cc_TransitionSplitRows);
    olua_require(L, "cc.TransitionFadeTR", _olua_cls_cc_TransitionFadeTR);
    olua_require(L, "cc.TransitionFadeBL", _olua_cls_cc_TransitionFadeBL);
    olua_require(L, "cc.TransitionFadeUp", _olua_cls_cc_TransitionFadeUp);
    olua_require(L, "cc.TransitionFadeDown", _olua_cls_cc_TransitionFadeDown);
    olua_require(L, "cc.TransitionPageTurn", _olua_cls_cc_TransitionPageTurn);
    olua_require(L, "cc.TransitionProgress", _olua_cls_cc_TransitionProgress);
    olua_require(L, "cc.TransitionProgressRadialCCW", _olua_cls_cc_TransitionProgressRadialCCW);
    olua_require(L, "cc.TransitionProgressRadialCW", _olua_cls_cc_TransitionProgressRadialCW);
    olua_require(L, "cc.TransitionProgressHorizontal", _olua_cls_cc_TransitionProgressHorizontal);
    olua_require(L, "cc.TransitionProgressVertical", _olua_cls_cc_TransitionProgressVertical);
    olua_require(L, "cc.TransitionProgressInOut", _olua_cls_cc_TransitionProgressInOut);
    olua_require(L, "cc.TransitionProgressOutIn", _olua_cls_cc_TransitionProgressOutIn);
    olua_require(L, "cc.IMEDelegate", _olua_cls_cc_IMEDelegate);
    olua_require(L, "cc.TextFieldDelegate", _olua_cls_cc_TextFieldDelegate);
    olua_require(L, "cc.TextFieldTTF", _olua_cls_cc_TextFieldTTF);
    olua_require(L, "cc.LightType", _olua_cls_cc_LightType);
    olua_require(L, "cc.LightFlag", _olua_cls_cc_LightFlag);
    olua_require(L, "cc.BaseLight", _olua_cls_cc_BaseLight);
    olua_require(L, "cc.DirectionLight", _olua_cls_cc_DirectionLight);
    olua_require(L, "cc.PointLight", _olua_cls_cc_PointLight);
    olua_require(L, "cc.SpotLight", _olua_cls_cc_SpotLight);
    olua_require(L, "cc.AmbientLight", _olua_cls_cc_AmbientLight);
    olua_require(L, "cc.CameraFlag", _olua_cls_cc_CameraFlag);
    olua_require(L, "cc.Camera.Type", _olua_cls_cc_Camera_Type);
    olua_require(L, "cc.Camera", _olua_cls_cc_Camera);
    olua_require(L, "cc.CameraBackgroundBrush.BrushType", _olua_cls_cc_CameraBackgroundBrush_BrushType);
    olua_require(L, "cc.CameraBackgroundBrush", _olua_cls_cc_CameraBackgroundBrush);
    olua_require(L, "cc.CameraBackgroundDepthBrush", _olua_cls_cc_CameraBackgroundDepthBrush);
    olua_require(L, "cc.CameraBackgroundColorBrush", _olua_cls_cc_CameraBackgroundColorBrush);
    olua_require(L, "cc.CameraBackgroundSkyBoxBrush", _olua_cls_cc_CameraBackgroundSkyBoxBrush);
    olua_require(L, "cc.PlayableProtocol", _olua_cls_cc_PlayableProtocol);
    olua_require(L, "cc.ParticleBatchNode", _olua_cls_cc_ParticleBatchNode);
    olua_require(L, "cc.ParticleSystem.Mode", _olua_cls_cc_ParticleSystem_Mode);
    olua_require(L, "cc.ParticleSystem.PositionType", _olua_cls_cc_ParticleSystem_PositionType);
    olua_require(L, "cc.ParticleSystem", _olua_cls_cc_ParticleSystem);
    olua_require(L, "cc.ParticleSystemQuad", _olua_cls_cc_ParticleSystemQuad);
    olua_require(L, "cc.ParticleExplosion", _olua_cls_cc_ParticleExplosion);
    olua_require(L, "cc.ParticleFire", _olua_cls_cc_ParticleFire);
    olua_require(L, "cc.ParticleFireworks", _olua_cls_cc_ParticleFireworks);
    olua_require(L, "cc.ParticleFlower", _olua_cls_cc_ParticleFlower);
    olua_require(L, "cc.ParticleGalaxy", _olua_cls_cc_ParticleGalaxy);
    olua_require(L, "cc.ParticleMeteor", _olua_cls_cc_ParticleMeteor);
    olua_require(L, "cc.ParticleRain", _olua_cls_cc_ParticleRain);
    olua_require(L, "cc.ParticleSmoke", _olua_cls_cc_ParticleSmoke);
    olua_require(L, "cc.ParticleSnow", _olua_cls_cc_ParticleSnow);
    olua_require(L, "cc.ParticleSpiral", _olua_cls_cc_ParticleSpiral);
    olua_require(L, "cc.ParticleSun", _olua_cls_cc_ParticleSun);
    olua_require(L, "cc.SAXDelegator", _olua_cls_cc_SAXDelegator);
    olua_require(L, "cc.TMXTileFlags", _olua_cls_cc_TMXTileFlags);
    olua_require(L, "cc.TMXObjectGroup", _olua_cls_cc_TMXObjectGroup);
    olua_require(L, "cc.TMXLayer", _olua_cls_cc_TMXLayer);
    olua_require(L, "cc.TMXLayerInfo", _olua_cls_cc_TMXLayerInfo);
    olua_require(L, "cc.TMXMapInfo", _olua_cls_cc_TMXMapInfo);
    olua_require(L, "cc.TMXTilesetInfo", _olua_cls_cc_TMXTilesetInfo);
    olua_require(L, "cc.TMXTiledMap", _olua_cls_cc_TMXTiledMap);
    olua_require(L, "cc.FastTMXTiledMap", _olua_cls_cc_FastTMXTiledMap);
    olua_require(L, "cc.FastTMXLayer", _olua_cls_cc_FastTMXLayer);
#if CC_USE_NAVMESH
    olua_require(L, "cc.NavMeshAgent.NavMeshAgentSyncFlag", _olua_cls_cc_NavMeshAgent_NavMeshAgentSyncFlag);
    olua_require(L, "cc.NavMeshAgent", _olua_cls_cc_NavMeshAgent);
    olua_require(L, "cc.NavMeshObstacle.NavMeshObstacleSyncFlag", _olua_cls_cc_NavMeshObstacle_NavMeshObstacleSyncFlag);
    olua_require(L, "cc.NavMeshObstacle", _olua_cls_cc_NavMeshObstacle);
    olua_require(L, "cc.NavMesh", _olua_cls_cc_NavMesh);
#endif

    return 0;
}

OLUA_BEGIN_DECLS
OLUA_LIB int luaopen_cocos2d(lua_State *L)
{
    olua_require(L, "cocos2d",  _olua_module_cocos2d);

    return 0;
}
OLUA_END_DECLS
